
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/class.js
 */


;

(function () {
	var initializing = false,
	    fnTest = /xyz/.test(function () {
		xyz;
	}) ? /\b_super\b/ : /.*/;

	this.Class = function () {};

	Class.extend = function (prop) {
		var _super = this.prototype;

		initializing = true;
		var prototype = new this();
		initializing = false;

		for (var name in prop) {
			prototype[name] = typeof prop[name] == "function" && typeof _super[name] == "function" && fnTest.test(prop[name]) ? function (name, fn) {
				return function () {
					var tmp = this._super;

					this._super = _super[name];

					var ret = fn.apply(this, arguments);
					this._super = tmp;

					return ret;
				};
			}(name, prop[name]) : prop[name];
		}

		function Class() {
			this._type = "instance";
			if (!initializing && this.init) this.init.apply(this, arguments);
		}

		Class.prototype = prototype;
		Class._type = "class";

		Class.prototype.constructor = Class;

		Class.extend = arguments.callee;

		return Class;
	};
})();
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/provide.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

// provide a namespace
if(!window.frappe)
	window.frappe = {};

frappe.provide = function(namespace) {
	// docs: create a namespace //
	var nsl = namespace.split('.');
	var parent = window;
	for(var i=0; i<nsl.length; i++) {
		var n = nsl[i];
		if(!parent[n]) {
			parent[n] = {}
		}
		parent = parent[n];
	}
	return parent;
}

frappe.provide("locals");
frappe.provide("frappe.flags");
frappe.provide("frappe.settings");
frappe.provide("frappe.utils");
frappe.provide("frappe.ui");
frappe.provide("frappe.modules");
frappe.provide("frappe.templates");
frappe.provide("frappe.test_data");

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/assets.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

// library to mange assets (js, css, models, html) etc in the app.
// will try and get from localStorge if latest are available
// depends on frappe.versions to manage versioning

frappe.require = function(items, callback) {
	if(typeof items === "string") {
		items = [items];
	}
	frappe.assets.execute(items, callback);
};

frappe.assets = {
	check: function() {
		// if version is different then clear localstorage
		if(window._version_number != localStorage.getItem("_version_number")) {
			frappe.assets.clear_local_storage();
			console.log("Cleared App Cache.");
		}

		if(localStorage._last_load) {
			var not_updated_since = new Date() - new Date(localStorage._last_load);
			if(not_updated_since < 10000 || not_updated_since > 86400000) {
				frappe.assets.clear_local_storage();
			}
		} else {
			frappe.assets.clear_local_storage();
		}

		frappe.assets.init_local_storage();
	},

	init_local_storage: function() {
		localStorage._last_load = new Date();
		localStorage._version_number = window._version_number;
		if(frappe.boot) localStorage.metadata_version = frappe.boot.metadata_version;
	},

	clear_local_storage: function() {
		$.each(["_last_load", "_version_number", "metadata_version", "page_info",
			"last_visited"], function(i, key) {
			localStorage.removeItem(key);
		});

		// clear assets
		for(var key in localStorage) {
			if(key.indexOf("desk_assets:")===0 || key.indexOf("_page:")===0
				|| key.indexOf("_doctype:")===0 || key.indexOf("preferred_breadcrumbs:")===0) {
				localStorage.removeItem(key);
			}
		}
		console.log("localStorage cleared");
	},


	// keep track of executed assets
	executed_ : [],

	// pass on to the handler to set
	execute: function(items, callback) {
		var to_fetch = []
		for(var i=0, l=items.length; i<l; i++) {
			if(!frappe.assets.exists(items[i])) {
				to_fetch.push(items[i]);
			}
		}
		if(to_fetch.length) {
			frappe.assets.fetch(to_fetch, function() {
				frappe.assets.eval_assets(items, callback);
			});
		} else {
			frappe.assets.eval_assets(items, callback);
		}
	},

	eval_assets: function(items, callback) {
		for(var i=0, l=items.length; i<l; i++) {
			// execute js/css if not already.
			var path = items[i];
			if(frappe.assets.executed_.indexOf(path)===-1) {
				// execute
				frappe.assets.handler[frappe.assets.extn(path)](frappe.assets.get(path), path);
				frappe.assets.executed_.push(path)
			}
		}
		callback && callback();
	},

	// check if the asset exists in
	// localstorage
	exists: function(src) {
		if(frappe.assets.executed_.indexOf(src)!== -1) {
			return true;
		}
		if(frappe.boot.developer_mode) {
			return false;
		}
		if(frappe.assets.get(src)) {
			return true;
		} else {
			return false;
		}
	},

	// load an asset via
	fetch: function(items, callback) {
		// this is virtual page load, only get the the source
		// *without* the template

		frappe.call({
			type: "GET",
			method:"frappe.client.get_js",
			args: {
				"items": items
			},
			callback: function(r) {
				$.each(items, function(i, src) {
					frappe.assets.add(src, r.message[i]);
				});
				callback();
			},
			freeze: true,
		});
	},

	add: function(src, txt) {
		if('localStorage' in window) {
			try {
				frappe.assets.set(src, txt);
			} catch(e) {
				// if quota is exceeded, clear local storage and set item
				frappe.assets.clear_local_storage();
				frappe.assets.set(src, txt);
			}
		}
	},

	get: function(src) {
		return localStorage.getItem("desk_assets:" + src);
	},

	set: function(src, txt) {
		localStorage.setItem("desk_assets:" + src, txt);
	},

	extn: function(src) {
		if(src.indexOf('?')!=-1) {
			src = src.split('?').slice(-1)[0];
		}
		return src.split('.').slice(-1)[0];
	},

	handler: {
		js: function(txt, src) {
			frappe.dom.eval(txt);
		},
		css: function(txt, src) {
			frappe.dom.set_style(txt);
		}
	},
};

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/format.js
 */
function format (str, args) {
	if(str==undefined) return str;

	this.unkeyed_index = 0;
	return str.replace(/\{(\w*)\}/g, function(match, key) {

		if (key === '') {
			key = this.unkeyed_index;
			this.unkeyed_index++
		}
		if (key == +key) {
			return args[key] !== undefined
				? args[key]
				: match;
		}
	}.bind(this));
}

if (jQuery) {
	jQuery.format = format
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/form/formatters.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

// for license information please see license.txt

frappe.provide("frappe.form.formatters");

frappe.form.link_formatters = {};

frappe.form.formatters = {
	_right: function(value, options) {
		if(options && (options.inline || options.only_value)) {
			return value;
		} else {
			return "<div style='text-align: right'>" + value + "</div>";
		}
	},
	Data: function(value) {
		return value==null ? "" : value;
	},
	Select: function(value) {
		return __(frappe.form.formatters["Data"](value));
	},
	Float: function(value, docfield, options, doc) {
		// don't allow 0 precision for Floats, hence or'ing with null
		var precision = docfield.precision || cint(frappe.boot.sysdefaults.float_precision) || null;
		if (docfield.options && docfield.options.trim()) {
			// options points to a currency field, but expects precision of float!
			docfield.precision = precision;
			return frappe.form.formatters.Currency(value, docfield, options, doc);

		} else {
			// show 1.000000 as 1
			if (!(options || {}).always_show_decimals && !is_null(value)) {
				var temp = cstr(value).split(".");
				if (temp[1]==undefined || cint(temp[1])===0) {
					precision = 0;
				}
			}

			return frappe.form.formatters._right(
				((value==null || value==="")
					? ""
					: format_number(value, null, precision)), options);
		}
	},
	Int: function(value, docfield, options) {
		return frappe.form.formatters._right(value==null ? "" : cint(value), options)
	},
	Percent: function(value, docfield, options) {
		return frappe.form.formatters._right(flt(value, 2) + "%", options)
	},
	Currency: function (value, docfield, options, doc) {
		var currency  = frappe.meta.get_field_currency(docfield, doc);
		var precision = docfield.precision || cint(frappe.boot.sysdefaults.currency_precision) || 2;

		// If you change anything below, it's going to hurt a company in UAE, a bit.
		if (precision > 2) {
			var parts	 = cstr(value).split("."); // should be minimum 2, comes from the DB
			var decimals = parts.length > 1 ? parts[1] : ""; // parts.length == 2 ???
			
			if ( decimals.length < 3 || decimals.length < precision ) {
				const fraction = frappe.model.get_value(":Currency", currency, "fraction_units") || 100; // if not set, minimum 2.
				precision      = cstr(fraction).length - 1;
			}
		}
		
		value = (value == null || value == "") ? "" : format_currency(value, currency, precision);
		
		if ( options && options.only_value ) {
			return value;
		} else {
			return frappe.form.formatters._right(value, options);
		}
	},
	Check: function(value) {
		if(value) {
			return '<i class="octicon octicon-check" style="margin-right: 3px;"></i>';
		} else {
			return '<i class="fa fa-square disabled-check"></i>';
		}
	},
	Link: function(value, docfield, options, doc) {
		var doctype = docfield._options || docfield.options;
		var original_value = value;
		if(value && value.match(/^['"].*['"]$/)) {
			value.replace(/^.(.*).$/, "$1");
		}

		if(options && (options.for_print || options.only_value)) {
			return value;
		}

		if(frappe.form.link_formatters[doctype]) {
			// don't apply formatters in case of composite (parent field of same type)
			if (doc && doctype !== doc.doctype) {
				value = frappe.form.link_formatters[doctype](value, doc);
			}
		}

		if(!value) {
			return "";
		}
		if(value[0] == "'" && value[value.length -1] == "'") {
			return value.substring(1, value.length - 1);
		}
		if(docfield && docfield.link_onclick) {
			return repl('<a onclick="%(onclick)s">%(value)s</a>',
				{onclick: docfield.link_onclick.replace(/"/g, '&quot;'), value:value});
		} else if(docfield && doctype) {
			return repl('<a class="grey" href="#Form/%(doctype)s/%(name)s" data-doctype="%(doctype)s">%(label)s</a>', {
				doctype: encodeURIComponent(doctype),
				name: encodeURIComponent(original_value),
				label: __(options && options.label || value)
			});
		} else {
			return value;
		}
	},
	Date: function(value) {
		if (value) {
			value = frappe.datetime.str_to_user(value);
			// handle invalid date
			if (value==="Invalid date") {
				value = null;
			}
		}

		return value || "";
	},
	DateRange: function(value) {
		if($.isArray(value)) {
			return __("{0} to {1}", [
				frappe.datetime.str_to_user(value[0]),
				frappe.datetime.str_to_user(value[1])
			]);
		} else {
			return value || "";
		}
	},
	Datetime: function(value) {
		if(value) {
			var m = moment(frappe.datetime.convert_to_user_tz(value));
			if(frappe.boot.sysdefaults.time_zone) {
				m = m.tz(frappe.boot.sysdefaults.time_zone);
			}
			return m.format(frappe.boot.sysdefaults.date_format.toUpperCase() + ', h:mm a z');
		} else {
			return "";
		}
	},
	Text: function(value) {
		if(value) {
			var tags = ["<p", "<div", "<br", "<table"];
			var match = false;

			for(var i=0; i<tags.length; i++) {
				if(value.match(tags[i])) {
					match = true;
					break;
				}
			}

			if(!match) {
				value = replace_newlines(value);
			}
		}

		return frappe.form.formatters.Data(value);
	},
	LikedBy: function(value) {
		var html = "";
		$.each(JSON.parse(value || "[]"), function(i, v) {
			if(v) html+= frappe.avatar(v);
		});
		return html;
	},
	Tag: function(value) {
		var html = "";
		$.each((value || "").split(","), function(i, v) {
			if(v) html+= '<span class="label label-info" \
				style="margin-right: 7px; cursor: pointer;"\
				data-field="_user_tags" data-label="'+v+'">'+v +'</span>';
		});
		return html;
	},
	Comment: function(value) {
		var html = "";
		$.each(JSON.parse(value || "[]"), function(i, v) {
			if(v) html+= '<span class="label label-warning" \
				style="margin-right: 7px;"\
				data-field="_comments" data-label="'+v.name+'">'+v.comment+'</span>';
		});
		return html;
	},
	Assign: function(value) {
		var html = "";
		$.each(JSON.parse(value || "[]"), function(i, v) {
			if(v) html+= '<span class="label label-warning" \
				style="margin-right: 7px;"\
				data-field="_assign">'+v+'</span>';
		});
		return html;
	},
	SmallText: function(value) {
		return frappe.form.formatters.Text(value);
	},
	TextEditor: function(value) {
		return frappe.form.formatters.Text(value);
	},
	Code: function(value) {
		return "<pre>" + (value==null ? "" : $("<div>").text(value).html()) + "</pre>"
	},
	WorkflowState: function(value) {
		var workflow_state = frappe.get_doc("Workflow State", value);
		if(workflow_state) {
			return repl("<span class='label label-%(style)s' \
				data-workflow-state='%(value)s'\
				style='padding-bottom: 4px; cursor: pointer;'>\
				<i class='fa fa-small fa-white fa-%(icon)s'></i> %(value)s</span>", {
					value: value,
					style: workflow_state.style.toLowerCase(),
					icon: workflow_state.icon
				});
		} else {
			return "<span class='label'>" + value + "</span>";
		}
	},
	Email: function(value) {
		return $("<div></div>").text(value).html();
	}
}

frappe.form.get_formatter = function(fieldtype) {
	if(!fieldtype)
		fieldtype = "Data";
	return frappe.form.formatters[fieldtype.replace(/ /g, "")] || frappe.form.formatters.Data;
}

frappe.format = function(value, df, options, doc) {
	if(!df) df = {"fieldtype":"Data"};
	var fieldtype = df.fieldtype || "Data";

	// format Dynamic Link as a Link
	if(fieldtype==="Dynamic Link") {
		fieldtype = "Link";
		df._options = doc ? doc[df.options] : null;
	}

	var formatter = df.formatter || frappe.form.get_formatter(fieldtype);

	var formatted = formatter(value, df, options, doc);

	if (typeof formatted == "string")
		formatted = frappe.dom.remove_script_and_style(formatted);

	return formatted;
}

frappe.get_format_helper = function(doc) {
	var helper = {
		get_formatted: function(fieldname) {
			var df = frappe.meta.get_docfield(doc.doctype, fieldname);
			if(!df) { console.log("fieldname not found: " + fieldname); }
			return frappe.format(doc[fieldname], df, {inline:1}, doc);
		}
	};
	$.extend(helper, doc);
	return helper;
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/modal.html
 */
frappe.templates['modal'] = '<div class="modal fade" style="overflow: auto;" tabindex="-1">  <div class="modal-dialog">   <div class="modal-content">    <div class="modal-header">                 <div class="row">                     <div class="col-xs-7">       <span class="indicator hidden"></span>                         <h4 class="modal-title" style="font-weight: bold;">{%= title %}</h4>                     </div>                     <div class="col-xs-5">                         <div class="text-right buttons">                 <button type="button" class="btn btn-default btn-sm btn-modal-close"                                 data-dismiss="modal">         <i class="octicon octicon-x visible-xs" style="padding: 1px 0px;"></i>         <span class="hidden-xs">{%= __("Close") %}</span></button>                 <button type="button" class="btn btn-primary btn-sm hide">                                 {%= __("Confirm") %}</button>                         </div>                     </div>                 </div>    </div>    <div class="modal-body ui-front">{%= content %}    </div>   </div>  </div> </div> ';

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/dom.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

// add a new dom element
frappe.provide('frappe.dom');

frappe.dom = {
	id_count: 0,
	freeze_count: 0,
	by_id: function(id) {
		return document.getElementById(id);
	},
	get_unique_id: function() {
		const id = 'unique-' + frappe.dom.id_count;
		frappe.dom.id_count++;
		return id;
	},
	set_unique_id: function(ele) {
		var $ele = $(ele);
		if($ele.attr('id')) {
			return $ele.attr('id');
		}
		var id = 'unique-' + frappe.dom.id_count;
		$ele.attr('id', id);
		frappe.dom.id_count++;
		return id;
	},
	eval: function(txt) {
		if(!txt) return;
		var el = document.createElement('script');
		el.appendChild(document.createTextNode(txt));
		// execute the script globally
		document.getElementsByTagName('head')[0].appendChild(el);
	},
	remove_script_and_style: function(txt) {
		var div = document.createElement('div');
		div.innerHTML = txt;
		var found = false;
		["script", "style", "noscript", "title", "meta", "base", "head"].forEach(function(e, i) {
			var elements = div.getElementsByTagName(e);
			var i = elements.length;
			while (i--) {
				found = true;
				elements[i].parentNode.removeChild(elements[i]);
			}
		});

		// remove links with rel="stylesheet"
		var elements = div.getElementsByTagName('link');
		var i = elements.length;
		while (i--) {
			if (elements[i].getAttribute("rel")=="stylesheet"){
				found = true;
				elements[i].parentNode.removeChild(elements[i]);
			}
		}
		if(found) {
			return div.innerHTML;
		} else {
			// don't disturb
			return txt;
		}
	},
	is_element_in_viewport: function (el) {

		//special bonus for those using jQuery
		if (typeof jQuery === "function" && el instanceof jQuery) {
			el = el[0];
		}

		var rect = el.getBoundingClientRect();

		return (
			rect.top >= 0
			&& rect.left >= 0
			// && rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) && /*or $(window).height() */
			// && rect.right <= (window.innerWidth || document.documentElement.clientWidth) /*or $(window).width() */
		);
	},

	set_style: function(txt, id) {
		if(!txt) return;

		var se = document.createElement('style');
		se.type = "text/css";

		if (id) {
			var element = document.getElementById(id);
			if (element) {
				element.parentNode.removeChild(element);
			}
			se.id = id;
		}

		if (se.styleSheet) {
			se.styleSheet.cssText = txt;
		} else {
			se.appendChild(document.createTextNode(txt));
		}
		document.getElementsByTagName('head')[0].appendChild(se);
		return se;
	},
	add: function(parent, newtag, className, cs, innerHTML, onclick) {
		if(parent && parent.substr)parent = frappe.dom.by_id(parent);
		var c = document.createElement(newtag);
		if(parent)
			parent.appendChild(c);

		// if image, 3rd parameter is source
		if(className) {
			if(newtag.toLowerCase()=='img')
				c.src = className
			else
				c.className = className;
		}
		if(cs) frappe.dom.css(c,cs);
		if(innerHTML) c.innerHTML = innerHTML;
		if(onclick) c.onclick = onclick;
		return c;
	},
	css: function(ele, s) {
		if(ele && s) {
			$.extend(ele.style, s);
		}
		return ele;
	},
	freeze: function(msg, css_class) {
		// blur
		if(!$('#freeze').length) {
			var freeze = $('<div id="freeze" class="modal-backdrop fade"></div>')
				.on("click", function() {
					if (cur_frm && cur_frm.cur_grid) {
						cur_frm.cur_grid.toggle_view();
						return false;
					}
				})
				.appendTo("#body_div");

			freeze.html(repl('<div class="freeze-message-container"><div class="freeze-message"><p class="lead">%(msg)s</p></div></div>',
				{msg: msg || ""}));

			setTimeout(function() { freeze.addClass("in") }, 1);

		} else {
			$("#freeze").addClass("in");
		}

		if (css_class) {
			$("#freeze").addClass(css_class);
		}

		frappe.dom.freeze_count++;
	},
	unfreeze: function() {
		if(!frappe.dom.freeze_count) return; // anything open?
		frappe.dom.freeze_count--;
		if(!frappe.dom.freeze_count) {
			var freeze = $('#freeze').removeClass("in").remove();
		}
	},
	save_selection: function() {
		// via http://stackoverflow.com/questions/5605401/insert-link-in-contenteditable-element
		if (window.getSelection) {
			var sel = window.getSelection();
			if (sel.getRangeAt && sel.rangeCount) {
				var ranges = [];
				for (var i = 0, len = sel.rangeCount; i < len; ++i) {
					ranges.push(sel.getRangeAt(i));
				}
				return ranges;
			}
		} else if (document.selection && document.selection.createRange) {
			return document.selection.createRange();
		}
		return null;
	},
	restore_selection: function(savedSel) {
		if (savedSel) {
			if (window.getSelection) {
				var sel = window.getSelection();
				sel.removeAllRanges();
				for (var i = 0, len = savedSel.length; i < len; ++i) {
					sel.addRange(savedSel[i]);
				}
			} else if (document.selection && savedSel.select) {
				savedSel.select();
			}
		}
	},
	is_touchscreen: function() {
		return ('ontouchstart' in window)
	}
}

frappe.ellipsis = function(text, max) {
	if(!max) max = 20;
	text = cstr(text);
	if(text.length > max) {
		text = text.substr(0, max) + '...';
	}
	return text;
};

frappe.run_serially = function(tasks) {
	var result = Promise.resolve();
	tasks.forEach(task => {
		if(task) {
			result = result.then ? result.then(task) : Promise.resolve();
		}
	});
	return result;
};

frappe.timeout = seconds => {
	return new Promise((resolve) => {
		setTimeout(() => resolve(), seconds * 1000);
	});
};

frappe.scrub = function(text) {
	return text.replace(/ /g, "_").toLowerCase();
};

frappe.get_modal = function(title, content) {
	return $(frappe.render_template("modal", {title:title, content:content})).appendTo(document.body);
};

// add <option> list to <select>
(function($) {
	$.fn.add_options = function(options_list) {
		// create options
		for(var i=0, j=options_list.length; i<j; i++) {
			var v = options_list[i];
			if (is_null(v)) {
				var value = null;
				var label = null;
			} else {
				var is_value_null = is_null(v.value);
				var is_label_null = is_null(v.label);

				if (is_value_null && is_label_null) {
					var value = v;
					var label = __(v);
				} else {
					var value = is_value_null ? "" : v.value;
					var label = is_label_null ? __(value) : __(v.label);
				}
			}
			$('<option>').html(cstr(label)).attr('value', value).appendTo(this);
		}
		// select the first option
		this.selectedIndex = 0;
		return $(this);
	}
	$.fn.set_working = function() {
		this.prop('disabled', true);
	}
	$.fn.done_working = function() {
		this.prop('disabled', false);
	}
})(jQuery);

(function($) {
	function pasteIntoInput(el, text) {
		el.focus();
		if (typeof el.selectionStart == "number") {
			var val = el.value;
			var selStart = el.selectionStart;
			el.value = val.slice(0, selStart) + text + val.slice(el.selectionEnd);
			el.selectionEnd = el.selectionStart = selStart + text.length;
		} else if (typeof document.selection != "undefined") {
			var textRange = document.selection.createRange();
			textRange.text = text;
			textRange.collapse(false);
			textRange.select();
		}
	}

	function allowTabChar(el) {
		$(el).keydown(function(e) {
			if (e.which == 9) {
				pasteIntoInput(this, "\t");
				return false;
			}
		});

		// For Opera, which only allows suppression of keypress events, not keydown
		$(el).keypress(function(e) {
			if (e.which == 9) {
				return false;
			}
		});
	}

	$.fn.allowTabs = function() {
		if (this.jquery) {
			this.each(function() {
				if (this.nodeType == 1) {
					var nodeName = this.nodeName.toLowerCase();
					if (nodeName == "textarea" || (nodeName == "input" && this.type == "text")) {
						allowTabChar(this);
					}
				}
			})
		}
		return this;
	}
})(jQuery);
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/messages.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.messages")

frappe.messages.waiting = function(parent, msg) {
	return $(frappe.messages.get_waiting_message(msg))
		.appendTo(parent);
};

frappe.messages.get_waiting_message = function(msg) {
	return repl('<div class="msg-box" style="width: 63%; margin: 30px auto;">\
		<p class="text-center">%(msg)s</p></div>', { msg: msg });
}

frappe.throw = function(msg) {
	if(typeof msg==='string') {
		msg = {message: msg, title: __('Error')};
	}
	if(!msg.indicator) msg.indicator = 'red';
	frappe.msgprint(msg);
	throw new Error(msg.message);
}

frappe.confirm = function(message, ifyes, ifno) {
	var d = new frappe.ui.Dialog({
		title: __("Confirm"),
		fields: [
			{fieldtype:"HTML", options:`<p class="frappe-confirm-message">${message}</p>`}
		],
		primary_action_label: __("Yes"),
		primary_action: function() {
			if(ifyes) ifyes();
			d.hide();
		},
		secondary_action_label: __("No")
	});
	d.show();

	// flag, used to bind "okay" on enter
	d.confirm_dialog = true;

	// no if closed without primary action
	if(ifno) {
		d.onhide = function() {
			if(!d.primary_action_fulfilled) {
				ifno();
			}
		};
	}
	return d;
}

frappe.prompt = function(fields, callback, title, primary_label) {
	if (typeof fields === "string") {
		fields = [{
			label: fields,
			fieldname: "value",
			fieldtype: "Data",
			reqd: 1
		}];
	}
	if(!$.isArray(fields)) fields = [fields];
	var d = new frappe.ui.Dialog({
		fields: fields,
		title: title || __("Enter Value"),
	});
	d.set_primary_action(primary_label || __("Submit"), function() {
		var values = d.get_values();
		if(!values) {
			return;
		}
		d.hide();
		callback(values);
	});
	d.show();
	return d;
}

var msg_dialog=null;
frappe.msgprint = function(msg, title) {
	if(!msg) return;

	if($.isPlainObject(msg)) {
		var data = msg;
	} else {
		// passed as JSON
		if(typeof msg==='string' && msg.substr(0,1)==='{') {
			var data = JSON.parse(msg);
		} else {
			var data = {'message': msg, 'title': title};
		}
	}

	if(!data.indicator) {
		data.indicator = 'blue';
	}

	if(data.message instanceof Array) {
		data.message.forEach(function(m) {
			frappe.msgprint(m);
		});
		return;
	}

	if(data.alert) {
		frappe.show_alert(data);
		return;
	}

	if(!msg_dialog) {
		msg_dialog = new frappe.ui.Dialog({
			title: __("Message"),
			onhide: function() {
				if(msg_dialog.custom_onhide) {
					msg_dialog.custom_onhide();
				}
				msg_dialog.msg_area.empty();
			}
		});
		msg_dialog.msg_area = $('<div class="msgprint">')
			.appendTo(msg_dialog.body);

		msg_dialog.loading_indicator = $('<div class="loading-indicator text-center" \
				style="margin: 15px;">\
				<img src="/assets/frappe/images/ui/ajax-loader.gif"></div>')
			.appendTo(msg_dialog.body);

		msg_dialog.clear = function() {
			msg_dialog.msg_area.empty();
		}

		msg_dialog.indicator = msg_dialog.header.find('.indicator');
	}

	if(data.message==null) {
		data.message = '';
	}

	if(data.message.search(/<br>|<p>|<li>/)==-1) {
		msg = replace_newlines(data.message);
	}

	var msg_exists = false;
	if(data.clear) {
		msg_dialog.msg_area.empty();
	} else {
		msg_exists = msg_dialog.msg_area.html();
	}

	if(data.title || !msg_exists) {
		// set title only if it is explicitly given
		// and no existing title exists
		msg_dialog.set_title(data.title || __('Message'));
	}

	// show / hide indicator
	if(data.indicator) {
		msg_dialog.indicator.removeClass().addClass('indicator ' + data.indicator);
	} else {
		msg_dialog.indicator.removeClass().addClass('hidden');
	}

	if(msg_exists) {
		msg_dialog.msg_area.append("<hr>");
	// append a <hr> if another msg already exists
	}

	msg_dialog.msg_area.append(data.message);
	msg_dialog.loading_indicator.addClass("hide");

	msg_dialog.show_loading = function() {
		msg_dialog.loading_indicator.removeClass("hide");
	}

	// make msgprint always appear on top
	msg_dialog.$wrapper.css("z-index", 2000);
	msg_dialog.show();

	return msg_dialog;
}

// Proxy for frappe.msgprint
Object.defineProperty(window, 'msgprint', {
	get: function() {
		console.warn('Please use `frappe.msgprint` instead of `msgprint`. It will be deprecated soon.');
		return frappe.msgprint;
	}
});

frappe.hide_msgprint = function(instant) {
	// clear msgprint
	if(msg_dialog && msg_dialog.msg_area) {
		msg_dialog.msg_area.empty();
	}
	if(msg_dialog && msg_dialog.$wrapper.is(":visible")) {
		if(instant) {
			msg_dialog.$wrapper.removeClass("fade");
		}
		msg_dialog.hide();
		if(instant) {
			msg_dialog.$wrapper.addClass("fade");
		}
	}
}

// update html in existing msgprint
frappe.update_msgprint = function(html) {
	if(!msg_dialog || (msg_dialog && !msg_dialog.$wrapper.is(":visible"))) {
		frappe.msgprint(html);
	} else {
		msg_dialog.msg_area.html(html);
	}
}

frappe.verify_password = function(callback) {
	frappe.prompt({
		fieldname: "password",
		label: __("Enter your password"),
		fieldtype: "Password",
		reqd: 1
	}, function(data) {
		frappe.call({
			method: "frappe.core.doctype.user.user.verify_password",
			args: {
				password: data.password
			},
			callback: function(r) {
				if(!r.exc) {
					callback();
				}
			}
		});
	}, __("Verify Password"), __("Verify"))
}

frappe.show_progress = function(title, count, total=100, description) {
	if(frappe.cur_progress && frappe.cur_progress.title === title && frappe.cur_progress.is_visible) {
		var dialog = frappe.cur_progress;
	} else {
		var dialog = new frappe.ui.Dialog({
			title: title,
		});
		dialog.progress = $(`<div class="progress">
			<div class="progress-bar"></div>
			<p class="description text-muted small"></p>
		</div>`)
			.appendTo(dialog.body);
		dialog.progress_bar = dialog.progress.css({"margin-top": "10px"})
			.find(".progress-bar");
		dialog.$wrapper.removeClass("fade");
		dialog.show();
		frappe.cur_progress = dialog;
	}
	if (description) {
		dialog.progress.find('.description').text(description);
	}
	dialog.percent = cint(flt(count) * 100 / total);
	dialog.progress_bar.css({"width": dialog.percent + "%" });
	return dialog;
}

frappe.hide_progress = function() {
	if(frappe.cur_progress) {
		frappe.cur_progress.hide();
		frappe.cur_progress = null;
	}
}

// Floating Message
frappe.show_alert = function(message, seconds=7) {
	if(typeof message==='string') {
		message = {
			message: message
		}
	}
	if(!$('#dialog-container').length) {
		$('<div id="dialog-container"><div id="alert-container"></div></div>').appendTo('body');
	}

	var message_html;
	if(message.indicator) {
		message_html = $('<span class="indicator ' + message.indicator + '"></span>').append(message.message);
	} else {
		message_html = message.message;
	}

	var div = $(`
		<div class="alert desk-alert">
			<span class="alert-message"></span><a class="close">&times;</a>
		</div>`);

	div.find('.alert-message').append(message_html);

	div.hide()
		.appendTo("#alert-container")
		.fadeIn(300);

	div.find('.close').click(function() {
		$(this).parent().remove();
		return false;
	});

	div.delay(seconds * 1000).fadeOut(300);
	return div;
}

// Proxy for frappe.show_alert
Object.defineProperty(window, 'show_alert', {
	get: function() {
		console.warn('Please use `frappe.show_alert` instead of `show_alert`. It will be deprecated soon.');
		return frappe.show_alert;
	}
});

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/keyboard.js
 */
frappe.provide('frappe.ui.keys.handlers');

frappe.ui.keys.setup = function() {
	$(window).on('keydown', function(e) {
		var key = frappe.ui.keys.get_key(e);
		if(frappe.ui.keys.handlers[key]) {
			var out = null;
			for(var i=0, l = frappe.ui.keys.handlers[key].length; i<l; i++) {
				var handler = frappe.ui.keys.handlers[key][i];
				var _out = handler.apply(this, [e]);
				if(_out===false) {
					out = _out;
				}
			}
			return out;
		}
	});
}

frappe.ui.keys.get_key = function(e) {
	var keycode = e.keyCode || e.which;
	var key = frappe.ui.keys.key_map[keycode] || String.fromCharCode(keycode);

	if(e.ctrlKey || e.metaKey) {
		// add ctrl+ the key
		key = 'ctrl+' + key;
	}
	if(e.shiftKey) {
		// add ctrl+ the key
		key = 'shift+' + key;
	}
	return key.toLowerCase();
}

frappe.ui.keys.on = function(key, handler) {
	if(!frappe.ui.keys.handlers[key]) {
		frappe.ui.keys.handlers[key] = [];
	}
	frappe.ui.keys.handlers[key].push(handler);
}

frappe.ui.keys.on('ctrl+s', function(e) {
	frappe.app.trigger_primary_action();
	e.preventDefault();
	return false;
});

frappe.ui.keys.on('ctrl+g', function(e) {
	$("#navbar-search").focus();
	e.preventDefault();
	return false;
});

frappe.ui.keys.on('ctrl+b', function(e) {
	var route = frappe.get_route();
	if(route[0]==='Form' || route[0]==='List') {
		frappe.new_doc(route[1], true);
		e.preventDefault();
		return false;
	}
});

frappe.ui.keys.on('escape', function(e) {
	close_grid_and_dialog();
});

frappe.ui.keys.on('esc', function(e) {
	close_grid_and_dialog();
});

frappe.ui.keys.on('enter', function(e) {
	if(cur_dialog && cur_dialog.confirm_dialog) {
		cur_dialog.get_primary_btn().trigger('click');
	}
});

frappe.ui.keys.on('ctrl+down', function(e) {
	var grid_row = frappe.ui.form.get_open_grid_form();
	grid_row && grid_row.toggle_view(false, function() { grid_row.open_next() });
});

frappe.ui.keys.on('ctrl+up', function(e) {
	var grid_row = frappe.ui.form.get_open_grid_form();
	grid_row && grid_row.toggle_view(false, function() { grid_row.open_prev() });
});

frappe.ui.keys.on('shift+ctrl+r', function(e) {
	frappe.ui.toolbar.clear_cache();
});

frappe.ui.keys.key_map = {
	8: 'backspace',
	9: 'tab',
	13: 'enter',
	16: 'shift',
	17: 'ctrl',
	91: 'meta',
	18: 'alt',
	27: 'escape',
	37: 'left',
	39: 'right',
	38: 'up',
	40: 'down',
	32: 'space'
}

// keyCode map
frappe.ui.keyCode = {
	ESCAPE: 27,
	LEFT: 37,
	RIGHT: 39,
	UP: 38,
	DOWN: 40,
	ENTER: 13,
	TAB: 9,
	SPACE: 32
}

function close_grid_and_dialog() {
	// close open grid row
	var open_row = $(".grid-row-open");
	if (open_row.length) {
		var grid_row = open_row.data("grid_row");
		grid_row.toggle_view(false);
		return false;
	}

	// close open dialog
	if (cur_dialog && !cur_dialog.no_cancel_flag) {
		cur_dialog.cancel();
		return false;
	}
}
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/emoji.js
 */
frappe.ui.get_emoji = function(keyword) {
	if (!keyword.includes(':'))
		keyword = ':' + keyword + ':';
	return frappe.ui.emoji_map[keyword];
};

frappe.ui.emojis = [
	"🀄",
	"🃏",
	"🅰",
	"🅱",
	"🅾",
	"🅿",
	"🆎",
	"🆑",
	"🆒",
	"🆓",
	"🆔",
	"🆕",
	"🆖",
	"🆗",
	"🆘",
	"🆙",
	"🆚",
	"🇦🇨",
	"🇦🇩",
	"🇦🇪",
	"🇦🇫",
	"🇦🇬",
	"🇦🇮",
	"🇦🇱",
	"🇦🇲",
	"🇦🇴",
	"🇦🇶",
	"🇦🇷",
	"🇦🇸",
	"🇦🇹",
	"🇦🇺",
	"🇦🇼",
	"🇦🇽",
	"🇦🇿",
	"🇦",
	"🇧🇦",
	"🇧🇧",
	"🇧🇩",
	"🇧🇪",
	"🇧🇫",
	"🇧🇬",
	"🇧🇭",
	"🇧🇮",
	"🇧🇯",
	"🇧🇱",
	"🇧🇲",
	"🇧🇳",
	"🇧🇴",
	"🇧🇶",
	"🇧🇷",
	"🇧🇸",
	"🇧🇹",
	"🇧🇻",
	"🇧🇼",
	"🇧🇾",
	"🇧🇿",
	"🇧",
	"🇨🇦",
	"🇨🇨",
	"🇨🇩",
	"🇨🇫",
	"🇨🇬",
	"🇨🇭",
	"🇨🇮",
	"🇨🇰",
	"🇨🇱",
	"🇨🇲",
	"🇨🇳",
	"🇨🇴",
	"🇨🇵",
	"🇨🇷",
	"🇨🇺",
	"🇨🇻",
	"🇨🇼",
	"🇨🇽",
	"🇨🇾",
	"🇨🇿",
	"🇨",
	"🇩🇪",
	"🇩🇬",
	"🇩🇯",
	"🇩🇰",
	"🇩🇲",
	"🇩🇴",
	"🇩🇿",
	"🇩",
	"🇪🇦",
	"🇪🇨",
	"🇪🇪",
	"🇪🇬",
	"🇪🇭",
	"🇪🇷",
	"🇪🇸",
	"🇪🇹",
	"🇪🇺",
	"🇪",
	"🇫🇮",
	"🇫🇯",
	"🇫🇰",
	"🇫🇲",
	"🇫🇴",
	"🇫🇷",
	"🇫",
	"🇬🇦",
	"🇬🇧",
	"🇬🇩",
	"🇬🇪",
	"🇬🇫",
	"🇬🇬",
	"🇬🇭",
	"🇬🇮",
	"🇬🇱",
	"🇬🇲",
	"🇬🇳",
	"🇬🇵",
	"🇬🇶",
	"🇬🇷",
	"🇬🇸",
	"🇬🇹",
	"🇬🇺",
	"🇬🇼",
	"🇬🇾",
	"🇬",
	"🇭🇰",
	"🇭🇲",
	"🇭🇳",
	"🇭🇷",
	"🇭🇹",
	"🇭🇺",
	"🇭",
	"🇮🇨",
	"🇮🇩",
	"🇮🇪",
	"🇮🇱",
	"🇮🇲",
	"🇮🇳",
	"🇮🇴",
	"🇮🇶",
	"🇮🇷",
	"🇮🇸",
	"🇮🇹",
	"🇮",
	"🇯🇪",
	"🇯🇲",
	"🇯🇴",
	"🇯🇵",
	"🇯",
	"🇰🇪",
	"🇰🇬",
	"🇰🇭",
	"🇰🇮",
	"🇰🇲",
	"🇰🇳",
	"🇰🇵",
	"🇰🇷",
	"🇰🇼",
	"🇰🇾",
	"🇰🇿",
	"🇰",
	"🇱🇦",
	"🇱🇧",
	"🇱🇨",
	"🇱🇮",
	"🇱🇰",
	"🇱🇷",
	"🇱🇸",
	"🇱🇹",
	"🇱🇺",
	"🇱🇻",
	"🇱🇾",
	"🇱",
	"🇲🇦",
	"🇲🇨",
	"🇲🇩",
	"🇲🇪",
	"🇲🇫",
	"🇲🇬",
	"🇲🇭",
	"🇲🇰",
	"🇲🇱",
	"🇲🇲",
	"🇲🇳",
	"🇲🇴",
	"🇲🇵",
	"🇲🇶",
	"🇲🇷",
	"🇲🇸",
	"🇲🇹",
	"🇲🇺",
	"🇲🇻",
	"🇲🇼",
	"🇲🇽",
	"🇲🇾",
	"🇲🇿",
	"🇲",
	"🇳🇦",
	"🇳🇨",
	"🇳🇪",
	"🇳🇫",
	"🇳🇬",
	"🇳🇮",
	"🇳🇱",
	"🇳🇴",
	"🇳🇵",
	"🇳🇷",
	"🇳🇺",
	"🇳🇿",
	"🇳",
	"🇴🇲",
	"🇴",
	"🇵🇦",
	"🇵🇪",
	"🇵🇫",
	"🇵🇬",
	"🇵🇭",
	"🇵🇰",
	"🇵🇱",
	"🇵🇲",
	"🇵🇳",
	"🇵🇷",
	"🇵🇸",
	"🇵🇹",
	"🇵🇼",
	"🇵🇾",
	"🇵",
	"🇶🇦",
	"🇶",
	"🇷🇪",
	"🇷🇴",
	"🇷🇸",
	"🇷🇺",
	"🇷🇼",
	"🇷",
	"🇸🇦",
	"🇸🇧",
	"🇸🇨",
	"🇸🇩",
	"🇸🇪",
	"🇸🇬",
	"🇸🇭",
	"🇸🇮",
	"🇸🇯",
	"🇸🇰",
	"🇸🇱",
	"🇸🇲",
	"🇸🇳",
	"🇸🇴",
	"🇸🇷",
	"🇸🇸",
	"🇸🇹",
	"🇸🇻",
	"🇸🇽",
	"🇸🇾",
	"🇸🇿",
	"🇸",
	"🇹🇦",
	"🇹🇨",
	"🇹🇩",
	"🇹🇫",
	"🇹🇬",
	"🇹🇭",
	"🇹🇯",
	"🇹🇰",
	"🇹🇱",
	"🇹🇲",
	"🇹🇳",
	"🇹🇴",
	"🇹🇷",
	"🇹🇹",
	"🇹🇻",
	"🇹🇼",
	"🇹🇿",
	"🇹",
	"🇺🇦",
	"🇺🇬",
	"🇺🇲",
	"🇺🇳",
	"🇺🇸",
	"🇺🇾",
	"🇺🇿",
	"🇺",
	"🇻🇦",
	"🇻🇨",
	"🇻🇪",
	"🇻🇬",
	"🇻🇮",
	"🇻🇳",
	"🇻🇺",
	"🇻",
	"🇼🇫",
	"🇼🇸",
	"🇼",
	"🇽🇰",
	"🇽",
	"🇾🇪",
	"🇾🇹",
	"🇾",
	"🇿🇦",
	"🇿🇲",
	"🇿🇼",
	"🇿",
	"🈁",
	"🈂",
	"🈚",
	"🈯",
	"🈲",
	"🈳",
	"🈴",
	"🈵",
	"🈶",
	"🈷",
	"🈸",
	"🈹",
	"🈺",
	"🉐",
	"🉑",
	"🌀",
	"🌁",
	"🌂",
	"🌃",
	"🌄",
	"🌅",
	"🌆",
	"🌇",
	"🌈",
	"🌉",
	"🌊",
	"🌋",
	"🌌",
	"🌍",
	"🌎",
	"🌏",
	"🌐",
	"🌑",
	"🌒",
	"🌓",
	"🌔",
	"🌕",
	"🌖",
	"🌗",
	"🌘",
	"🌙",
	"🌚",
	"🌛",
	"🌜",
	"🌝",
	"🌞",
	"🌟",
	"🌠",
	"🌡",
	"🌤",
	"🌥",
	"🌦",
	"🌧",
	"🌨",
	"🌩",
	"🌪",
	"🌫",
	"🌬",
	"🌭",
	"🌮",
	"🌯",
	"🌰",
	"🌱",
	"🌲",
	"🌳",
	"🌴",
	"🌵",
	"🌶",
	"🌷",
	"🌸",
	"🌹",
	"🌺",
	"🌻",
	"🌼",
	"🌽",
	"🌾",
	"🌿",
	"🍀",
	"🍁",
	"🍂",
	"🍃",
	"🍄",
	"🍅",
	"🍆",
	"🍇",
	"🍈",
	"🍉",
	"🍊",
	"🍋",
	"🍌",
	"🍍",
	"🍎",
	"🍏",
	"🍐",
	"🍑",
	"🍒",
	"🍓",
	"🍔",
	"🍕",
	"🍖",
	"🍗",
	"🍘",
	"🍙",
	"🍚",
	"🍛",
	"🍜",
	"🍝",
	"🍞",
	"🍟",
	"🍠",
	"🍡",
	"🍢",
	"🍣",
	"🍤",
	"🍥",
	"🍦",
	"🍧",
	"🍨",
	"🍩",
	"🍪",
	"🍫",
	"🍬",
	"🍭",
	"🍮",
	"🍯",
	"🍰",
	"🍱",
	"🍲",
	"🍳",
	"🍴",
	"🍵",
	"🍶",
	"🍷",
	"🍸",
	"🍹",
	"🍺",
	"🍻",
	"🍼",
	"🍽",
	"🍾",
	"🍿",
	"🎀",
	"🎁",
	"🎂",
	"🎃",
	"🎄",
	"🎅🏻",
	"🎅🏼",
	"🎅🏽",
	"🎅🏾",
	"🎅🏿",
	"🎅",
	"🎆",
	"🎇",
	"🎈",
	"🎉",
	"🎊",
	"🎋",
	"🎌",
	"🎍",
	"🎎",
	"🎏",
	"🎐",
	"🎑",
	"🎒",
	"🎓",
	"🎖",
	"🎗",
	"🎙",
	"🎚",
	"🎛",
	"🎞",
	"🎟",
	"🎠",
	"🎡",
	"🎢",
	"🎣",
	"🎤",
	"🎥",
	"🎦",
	"🎧",
	"🎨",
	"🎩",
	"🎪",
	"🎫",
	"🎬",
	"🎭",
	"🎮",
	"🎯",
	"🎰",
	"🎱",
	"🎲",
	"🎳",
	"🎴",
	"🎵",
	"🎶",
	"🎷",
	"🎸",
	"🎹",
	"🎺",
	"🎻",
	"🎼",
	"🎽",
	"🎾",
	"🎿",
	"🏀",
	"🏁",
	"🏂🏻",
	"🏂🏼",
	"🏂🏽",
	"🏂🏾",
	"🏂🏿",
	"🏂",
	"🏃🏻‍♀️",
	"🏃🏻‍♂️",
	"🏃🏻",
	"🏃🏼‍♀️",
	"🏃🏼‍♂️",
	"🏃🏼",
	"🏃🏽‍♀️",
	"🏃🏽‍♂️",
	"🏃🏽",
	"🏃🏾‍♀️",
	"🏃🏾‍♂️",
	"🏃🏾",
	"🏃🏿‍♀️",
	"🏃🏿‍♂️",
	"🏃🏿",
	"🏃‍♀️",
	"🏃‍♂️",
	"🏃",
	"🏄🏻‍♀️",
	"🏄🏻‍♂️",
	"🏄🏻",
	"🏄🏼‍♀️",
	"🏄🏼‍♂️",
	"🏄🏼",
	"🏄🏽‍♀️",
	"🏄🏽‍♂️",
	"🏄🏽",
	"🏄🏾‍♀️",
	"🏄🏾‍♂️",
	"🏄🏾",
	"🏄🏿‍♀️",
	"🏄🏿‍♂️",
	"🏄🏿",
	"🏄‍♀️",
	"🏄‍♂️",
	"🏄",
	"🏅",
	"🏆",
	"🏇🏻",
	"🏇🏼",
	"🏇🏽",
	"🏇🏾",
	"🏇🏿",
	"🏇",
	"🏈",
	"🏉",
	"🏊🏻‍♀️",
	"🏊🏻‍♂️",
	"🏊🏻",
	"🏊🏼‍♀️",
	"🏊🏼‍♂️",
	"🏊🏼",
	"🏊🏽‍♀️",
	"🏊🏽‍♂️",
	"🏊🏽",
	"🏊🏾‍♀️",
	"🏊🏾‍♂️",
	"🏊🏾",
	"🏊🏿‍♀️",
	"🏊🏿‍♂️",
	"🏊🏿",
	"🏊‍♀️",
	"🏊‍♂️",
	"🏊",
	"🏋🏻‍♀️",
	"🏋🏻‍♂️",
	"🏋🏻",
	"🏋🏼‍♀️",
	"🏋🏼‍♂️",
	"🏋🏼",
	"🏋🏽‍♀️",
	"🏋🏽‍♂️",
	"🏋🏽",
	"🏋🏾‍♀️",
	"🏋🏾‍♂️",
	"🏋🏾",
	"🏋🏿‍♀️",
	"🏋🏿‍♂️",
	"🏋🏿",
	"🏋️‍♀️",
	"🏋️‍♂️",
	"🏋",
	"🏌🏻‍♀️",
	"🏌🏻‍♂️",
	"🏌🏻",
	"🏌🏼‍♀️",
	"🏌🏼‍♂️",
	"🏌🏼",
	"🏌🏽‍♀️",
	"🏌🏽‍♂️",
	"🏌🏽",
	"🏌🏾‍♀️",
	"🏌🏾‍♂️",
	"🏌🏾",
	"🏌🏿‍♀️",
	"🏌🏿‍♂️",
	"🏌🏿",
	"🏌️‍♀️",
	"🏌️‍♂️",
	"🏌",
	"🏍",
	"🏎",
	"🏏",
	"🏐",
	"🏑",
	"🏒",
	"🏓",
	"🏔",
	"🏕",
	"🏖",
	"🏗",
	"🏘",
	"🏙",
	"🏚",
	"🏛",
	"🏜",
	"🏝",
	"🏞",
	"🏟",
	"🏠",
	"🏡",
	"🏢",
	"🏣",
	"🏤",
	"🏥",
	"🏦",
	"🏧",
	"🏨",
	"🏩",
	"🏪",
	"🏫",
	"🏬",
	"🏭",
	"🏮",
	"🏯",
	"🏰",
	"🏳️‍🌈",
	"🏳",
	"🏴‍☠️",
	"🏴",
	"🏵",
	"🏷",
	"🏸",
	"🏹",
	"🏺",
	"🏻",
	"🏼",
	"🏽",
	"🏾",
	"🏿",
	"🐀",
	"🐁",
	"🐂",
	"🐃",
	"🐄",
	"🐅",
	"🐆",
	"🐇",
	"🐈",
	"🐉",
	"🐊",
	"🐋",
	"🐌",
	"🐍",
	"🐎",
	"🐏",
	"🐐",
	"🐑",
	"🐒",
	"🐓",
	"🐔",
	"🐕",
	"🐖",
	"🐗",
	"🐘",
	"🐙",
	"🐚",
	"🐛",
	"🐜",
	"🐝",
	"🐞",
	"🐟",
	"🐠",
	"🐡",
	"🐢",
	"🐣",
	"🐤",
	"🐥",
	"🐦",
	"🐧",
	"🐨",
	"🐩",
	"🐪",
	"🐫",
	"🐬",
	"🐭",
	"🐮",
	"🐯",
	"🐰",
	"🐱",
	"🐲",
	"🐳",
	"🐴",
	"🐵",
	"🐶",
	"🐷",
	"🐸",
	"🐹",
	"🐺",
	"🐻",
	"🐼",
	"🐽",
	"🐾",
	"🐿",
	"👀",
	"👁‍🗨",
	"👁",
	"👂🏻",
	"👂🏼",
	"👂🏽",
	"👂🏾",
	"👂🏿",
	"👂",
	"👃🏻",
	"👃🏼",
	"👃🏽",
	"👃🏾",
	"👃🏿",
	"👃",
	"👄",
	"👅",
	"👆🏻",
	"👆🏼",
	"👆🏽",
	"👆🏾",
	"👆🏿",
	"👆",
	"👇🏻",
	"👇🏼",
	"👇🏽",
	"👇🏾",
	"👇🏿",
	"👇",
	"👈🏻",
	"👈🏼",
	"👈🏽",
	"👈🏾",
	"👈🏿",
	"👈",
	"👉🏻",
	"👉🏼",
	"👉🏽",
	"👉🏾",
	"👉🏿",
	"👉",
	"👊🏻",
	"👊🏼",
	"👊🏽",
	"👊🏾",
	"👊🏿",
	"👊",
	"👋🏻",
	"👋🏼",
	"👋🏽",
	"👋🏾",
	"👋🏿",
	"👋",
	"👌🏻",
	"👌🏼",
	"👌🏽",
	"👌🏾",
	"👌🏿",
	"👌",
	"👍🏻",
	"👍🏼",
	"👍🏽",
	"👍🏾",
	"👍🏿",
	"👍",
	"👎🏻",
	"👎🏼",
	"👎🏽",
	"👎🏾",
	"👎🏿",
	"👎",
	"👏🏻",
	"👏🏼",
	"👏🏽",
	"👏🏾",
	"👏🏿",
	"👏",
	"👐🏻",
	"👐🏼",
	"👐🏽",
	"👐🏾",
	"👐🏿",
	"👐",
	"👑",
	"👒",
	"👓",
	"👔",
	"👕",
	"👖",
	"👗",
	"👘",
	"👙",
	"👚",
	"👛",
	"👜",
	"👝",
	"👞",
	"👟",
	"👠",
	"👡",
	"👢",
	"👣",
	"👤",
	"👥",
	"👦🏻",
	"👦🏼",
	"👦🏽",
	"👦🏾",
	"👦🏿",
	"👦",
	"👧🏻",
	"👧🏼",
	"👧🏽",
	"👧🏾",
	"👧🏿",
	"👧",
	"👨🏻‍🌾",
	"👨🏻‍🍳",
	"👨🏻‍🎓",
	"👨🏻‍🎤",
	"👨🏻‍🎨",
	"👨🏻‍🏫",
	"👨🏻‍🏭",
	"👨🏻‍💻",
	"👨🏻‍💼",
	"👨🏻‍🔧",
	"👨🏻‍🔬",
	"👨🏻‍🚀",
	"👨🏻‍🚒",
	"👨🏻‍⚕️",
	"👨🏻‍⚖️",
	"👨🏻‍✈️",
	"👨🏻",
	"👨🏼‍🌾",
	"👨🏼‍🍳",
	"👨🏼‍🎓",
	"👨🏼‍🎤",
	"👨🏼‍🎨",
	"👨🏼‍🏫",
	"👨🏼‍🏭",
	"👨🏼‍💻",
	"👨🏼‍💼",
	"👨🏼‍🔧",
	"👨🏼‍🔬",
	"👨🏼‍🚀",
	"👨🏼‍🚒",
	"👨🏼‍⚕️",
	"👨🏼‍⚖️",
	"👨🏼‍✈️",
	"👨🏼",
	"👨🏽‍🌾",
	"👨🏽‍🍳",
	"👨🏽‍🎓",
	"👨🏽‍🎤",
	"👨🏽‍🎨",
	"👨🏽‍🏫",
	"👨🏽‍🏭",
	"👨🏽‍💻",
	"👨🏽‍💼",
	"👨🏽‍🔧",
	"👨🏽‍🔬",
	"👨🏽‍🚀",
	"👨🏽‍🚒",
	"👨🏽‍⚕️",
	"👨🏽‍⚖️",
	"👨🏽‍✈️",
	"👨🏽",
	"👨🏾‍🌾",
	"👨🏾‍🍳",
	"👨🏾‍🎓",
	"👨🏾‍🎤",
	"👨🏾‍🎨",
	"👨🏾‍🏫",
	"👨🏾‍🏭",
	"👨🏾‍💻",
	"👨🏾‍💼",
	"👨🏾‍🔧",
	"👨🏾‍🔬",
	"👨🏾‍🚀",
	"👨🏾‍🚒",
	"👨🏾‍⚕️",
	"👨🏾‍⚖️",
	"👨🏾‍✈️",
	"👨🏾",
	"👨🏿‍🌾",
	"👨🏿‍🍳",
	"👨🏿‍🎓",
	"👨🏿‍🎤",
	"👨🏿‍🎨",
	"👨🏿‍🏫",
	"👨🏿‍🏭",
	"👨🏿‍💻",
	"👨🏿‍💼",
	"👨🏿‍🔧",
	"👨🏿‍🔬",
	"👨🏿‍🚀",
	"👨🏿‍🚒",
	"👨🏿‍⚕️",
	"👨🏿‍⚖️",
	"👨🏿‍✈️",
	"👨🏿",
	"👨‍🌾",
	"👨‍🍳",
	"👨‍🎓",
	"👨‍🎤",
	"👨‍🎨",
	"👨‍🏫",
	"👨‍🏭",
	"👨‍👦‍👦",
	"👨‍👦",
	"👨‍👧‍👦",
	"👨‍👧‍👧",
	"👨‍👧",
	"👨‍👨‍👦‍👦",
	"👨‍👨‍👦",
	"👨‍👨‍👧‍👦",
	"👨‍👨‍👧‍👧",
	"👨‍👨‍👧",
	"👨‍👩‍👦‍👦",
	"👨‍👩‍👦",
	"👨‍👩‍👧‍👦",
	"👨‍👩‍👧‍👧",
	"👨‍👩‍👧",
	"👨‍💻",
	"👨‍💼",
	"👨‍🔧",
	"👨‍🔬",
	"👨‍🚀",
	"👨‍🚒",
	"👨‍⚕️",
	"👨‍⚖️",
	"👨‍✈️",
	"👨‍❤️‍👨",
	"👨‍❤️‍💋‍👨",
	"👨",
	"👩🏻‍🌾",
	"👩🏻‍🍳",
	"👩🏻‍🎓",
	"👩🏻‍🎤",
	"👩🏻‍🎨",
	"👩🏻‍🏫",
	"👩🏻‍🏭",
	"👩🏻‍💻",
	"👩🏻‍💼",
	"👩🏻‍🔧",
	"👩🏻‍🔬",
	"👩🏻‍🚀",
	"👩🏻‍🚒",
	"👩🏻‍⚕️",
	"👩🏻‍⚖️",
	"👩🏻‍✈️",
	"👩🏻",
	"👩🏼‍🌾",
	"👩🏼‍🍳",
	"👩🏼‍🎓",
	"👩🏼‍🎤",
	"👩🏼‍🎨",
	"👩🏼‍🏫",
	"👩🏼‍🏭",
	"👩🏼‍💻",
	"👩🏼‍💼",
	"👩🏼‍🔧",
	"👩🏼‍🔬",
	"👩🏼‍🚀",
	"👩🏼‍🚒",
	"👩🏼‍⚕️",
	"👩🏼‍⚖️",
	"👩🏼‍✈️",
	"👩🏼",
	"👩🏽‍🌾",
	"👩🏽‍🍳",
	"👩🏽‍🎓",
	"👩🏽‍🎤",
	"👩🏽‍🎨",
	"👩🏽‍🏫",
	"👩🏽‍🏭",
	"👩🏽‍💻",
	"👩🏽‍💼",
	"👩🏽‍🔧",
	"👩🏽‍🔬",
	"👩🏽‍🚀",
	"👩🏽‍🚒",
	"👩🏽‍⚕️",
	"👩🏽‍⚖️",
	"👩🏽‍✈️",
	"👩🏽",
	"👩🏾‍🌾",
	"👩🏾‍🍳",
	"👩🏾‍🎓",
	"👩🏾‍🎤",
	"👩🏾‍🎨",
	"👩🏾‍🏫",
	"👩🏾‍🏭",
	"👩🏾‍💻",
	"👩🏾‍💼",
	"👩🏾‍🔧",
	"👩🏾‍🔬",
	"👩🏾‍🚀",
	"👩🏾‍🚒",
	"👩🏾‍⚕️",
	"👩🏾‍⚖️",
	"👩🏾‍✈️",
	"👩🏾",
	"👩🏿‍🌾",
	"👩🏿‍🍳",
	"👩🏿‍🎓",
	"👩🏿‍🎤",
	"👩🏿‍🎨",
	"👩🏿‍🏫",
	"👩🏿‍🏭",
	"👩🏿‍💻",
	"👩🏿‍💼",
	"👩🏿‍🔧",
	"👩🏿‍🔬",
	"👩🏿‍🚀",
	"👩🏿‍🚒",
	"👩🏿‍⚕️",
	"👩🏿‍⚖️",
	"👩🏿‍✈️",
	"👩🏿",
	"👩‍🌾",
	"👩‍🍳",
	"👩‍🎓",
	"👩‍🎤",
	"👩‍🎨",
	"👩‍🏫",
	"👩‍🏭",
	"👩‍👦‍👦",
	"👩‍👦",
	"👩‍👧‍👦",
	"👩‍👧‍👧",
	"👩‍👧",
	"👩‍👩‍👦‍👦",
	"👩‍👩‍👦",
	"👩‍👩‍👧‍👦",
	"👩‍👩‍👧‍👧",
	"👩‍👩‍👧",
	"👩‍💻",
	"👩‍💼",
	"👩‍🔧",
	"👩‍🔬",
	"👩‍🚀",
	"👩‍🚒",
	"👩‍⚕️",
	"👩‍⚖️",
	"👩‍✈️",
	"👩‍❤️‍👨",
	"👩‍❤️‍👩",
	"👩‍❤️‍💋‍👨",
	"👩‍❤️‍💋‍👩",
	"👩",
	"👪🏻",
	"👪🏼",
	"👪🏽",
	"👪🏾",
	"👪🏿",
	"👪",
	"👫🏻",
	"👫🏼",
	"👫🏽",
	"👫🏾",
	"👫🏿",
	"👫",
	"👬🏻",
	"👬🏼",
	"👬🏽",
	"👬🏾",
	"👬🏿",
	"👬",
	"👭🏻",
	"👭🏼",
	"👭🏽",
	"👭🏾",
	"👭🏿",
	"👭",
	"👮🏻‍♀️",
	"👮🏻‍♂️",
	"👮🏻",
	"👮🏼‍♀️",
	"👮🏼‍♂️",
	"👮🏼",
	"👮🏽‍♀️",
	"👮🏽‍♂️",
	"👮🏽",
	"👮🏾‍♀️",
	"👮🏾‍♂️",
	"👮🏾",
	"👮🏿‍♀️",
	"👮🏿‍♂️",
	"👮🏿",
	"👮‍♀️",
	"👮‍♂️",
	"👮",
	"👯🏻‍♀️",
	"👯🏻‍♂️",
	"👯🏻",
	"👯🏼‍♀️",
	"👯🏼‍♂️",
	"👯🏼",
	"👯🏽‍♀️",
	"👯🏽‍♂️",
	"👯🏽",
	"👯🏾‍♀️",
	"👯🏾‍♂️",
	"👯🏾",
	"👯🏿‍♀️",
	"👯🏿‍♂️",
	"👯🏿",
	"👯‍♀️",
	"👯‍♂️",
	"👯",
	"👰🏻",
	"👰🏼",
	"👰🏽",
	"👰🏾",
	"👰🏿",
	"👰",
	"👱🏻‍♀️",
	"👱🏻‍♂️",
	"👱🏻",
	"👱🏼‍♀️",
	"👱🏼‍♂️",
	"👱🏼",
	"👱🏽‍♀️",
	"👱🏽‍♂️",
	"👱🏽",
	"👱🏾‍♀️",
	"👱🏾‍♂️",
	"👱🏾",
	"👱🏿‍♀️",
	"👱🏿‍♂️",
	"👱🏿",
	"👱‍♀️",
	"👱‍♂️",
	"👱",
	"👲🏻",
	"👲🏼",
	"👲🏽",
	"👲🏾",
	"👲🏿",
	"👲",
	"👳🏻‍♀️",
	"👳🏻‍♂️",
	"👳🏻",
	"👳🏼‍♀️",
	"👳🏼‍♂️",
	"👳🏼",
	"👳🏽‍♀️",
	"👳🏽‍♂️",
	"👳🏽",
	"👳🏾‍♀️",
	"👳🏾‍♂️",
	"👳🏾",
	"👳🏿‍♀️",
	"👳🏿‍♂️",
	"👳🏿",
	"👳‍♀️",
	"👳‍♂️",
	"👳",
	"👴🏻",
	"👴🏼",
	"👴🏽",
	"👴🏾",
	"👴🏿",
	"👴",
	"👵🏻",
	"👵🏼",
	"👵🏽",
	"👵🏾",
	"👵🏿",
	"👵",
	"👶🏻",
	"👶🏼",
	"👶🏽",
	"👶🏾",
	"👶🏿",
	"👶",
	"👷🏻‍♀️",
	"👷🏻‍♂️",
	"👷🏻",
	"👷🏼‍♀️",
	"👷🏼‍♂️",
	"👷🏼",
	"👷🏽‍♀️",
	"👷🏽‍♂️",
	"👷🏽",
	"👷🏾‍♀️",
	"👷🏾‍♂️",
	"👷🏾",
	"👷🏿‍♀️",
	"👷🏿‍♂️",
	"👷🏿",
	"👷‍♀️",
	"👷‍♂️",
	"👷",
	"👸🏻",
	"👸🏼",
	"👸🏽",
	"👸🏾",
	"👸🏿",
	"👸",
	"👹",
	"👺",
	"👻",
	"👼🏻",
	"👼🏼",
	"👼🏽",
	"👼🏾",
	"👼🏿",
	"👼",
	"👽",
	"👾",
	"👿",
	"💀",
	"💁🏻‍♀️",
	"💁🏻‍♂️",
	"💁🏻",
	"💁🏼‍♀️",
	"💁🏼‍♂️",
	"💁🏼",
	"💁🏽‍♀️",
	"💁🏽‍♂️",
	"💁🏽",
	"💁🏾‍♀️",
	"💁🏾‍♂️",
	"💁🏾",
	"💁🏿‍♀️",
	"💁🏿‍♂️",
	"💁🏿",
	"💁‍♀️",
	"💁‍♂️",
	"💁",
	"💂🏻‍♀️",
	"💂🏻‍♂️",
	"💂🏻",
	"💂🏼‍♀️",
	"💂🏼‍♂️",
	"💂🏼",
	"💂🏽‍♀️",
	"💂🏽‍♂️",
	"💂🏽",
	"💂🏾‍♀️",
	"💂🏾‍♂️",
	"💂🏾",
	"💂🏿‍♀️",
	"💂🏿‍♂️",
	"💂🏿",
	"💂‍♀️",
	"💂‍♂️",
	"💂",
	"💃🏻",
	"💃🏼",
	"💃🏽",
	"💃🏾",
	"💃🏿",
	"💃",
	"💄",
	"💅🏻",
	"💅🏼",
	"💅🏽",
	"💅🏾",
	"💅🏿",
	"💅",
	"💆🏻‍♀️",
	"💆🏻‍♂️",
	"💆🏻",
	"💆🏼‍♀️",
	"💆🏼‍♂️",
	"💆🏼",
	"💆🏽‍♀️",
	"💆🏽‍♂️",
	"💆🏽",
	"💆🏾‍♀️",
	"💆🏾‍♂️",
	"💆🏾",
	"💆🏿‍♀️",
	"💆🏿‍♂️",
	"💆🏿",
	"💆‍♀️",
	"💆‍♂️",
	"💆",
	"💇🏻‍♀️",
	"💇🏻‍♂️",
	"💇🏻",
	"💇🏼‍♀️",
	"💇🏼‍♂️",
	"💇🏼",
	"💇🏽‍♀️",
	"💇🏽‍♂️",
	"💇🏽",
	"💇🏾‍♀️",
	"💇🏾‍♂️",
	"💇🏾",
	"💇🏿‍♀️",
	"💇🏿‍♂️",
	"💇🏿",
	"💇‍♀️",
	"💇‍♂️",
	"💇",
	"💈",
	"💉",
	"💊",
	"💋",
	"💌",
	"💍",
	"💎",
	"💏",
	"💐",
	"💑",
	"💒",
	"💓",
	"💔",
	"💕",
	"💖",
	"💗",
	"💘",
	"💙",
	"💚",
	"💛",
	"💜",
	"💝",
	"💞",
	"💟",
	"💠",
	"💡",
	"💢",
	"💣",
	"💤",
	"💥",
	"💦",
	"💧",
	"💨",
	"💩",
	"💪🏻",
	"💪🏼",
	"💪🏽",
	"💪🏾",
	"💪🏿",
	"💪",
	"💫",
	"💬",
	"💭",
	"💮",
	"💯",
	"💰",
	"💱",
	"💲",
	"💳",
	"💴",
	"💵",
	"💶",
	"💷",
	"💸",
	"💹",
	"💺",
	"💻",
	"💼",
	"💽",
	"💾",
	"💿",
	"📀",
	"📁",
	"📂",
	"📃",
	"📄",
	"📅",
	"📆",
	"📇",
	"📈",
	"📉",
	"📊",
	"📋",
	"📌",
	"📍",
	"📎",
	"📏",
	"📐",
	"📑",
	"📒",
	"📓",
	"📔",
	"📕",
	"📖",
	"📗",
	"📘",
	"📙",
	"📚",
	"📛",
	"📜",
	"📝",
	"📞",
	"📟",
	"📠",
	"📡",
	"📢",
	"📣",
	"📤",
	"📥",
	"📦",
	"📧",
	"📨",
	"📩",
	"📪",
	"📫",
	"📬",
	"📭",
	"📮",
	"📯",
	"📰",
	"📱",
	"📲",
	"📳",
	"📴",
	"📵",
	"📶",
	"📷",
	"📸",
	"📹",
	"📺",
	"📻",
	"📼",
	"📽",
	"📿",
	"🔀",
	"🔁",
	"🔂",
	"🔃",
	"🔄",
	"🔅",
	"🔆",
	"🔇",
	"🔈",
	"🔉",
	"🔊",
	"🔋",
	"🔌",
	"🔍",
	"🔎",
	"🔏",
	"🔐",
	"🔑",
	"🔒",
	"🔓",
	"🔔",
	"🔕",
	"🔖",
	"🔗",
	"🔘",
	"🔙",
	"🔚",
	"🔛",
	"🔜",
	"🔝",
	"🔞",
	"🔟",
	"🔠",
	"🔡",
	"🔢",
	"🔣",
	"🔤",
	"🔥",
	"🔦",
	"🔧",
	"🔨",
	"🔩",
	"🔪",
	"🔫",
	"🔬",
	"🔭",
	"🔮",
	"🔯",
	"🔰",
	"🔱",
	"🔲",
	"🔳",
	"🔴",
	"🔵",
	"🔶",
	"🔷",
	"🔸",
	"🔹",
	"🔺",
	"🔻",
	"🔼",
	"🔽",
	"🕉",
	"🕊",
	"🕋",
	"🕌",
	"🕍",
	"🕎",
	"🕐",
	"🕑",
	"🕒",
	"🕓",
	"🕔",
	"🕕",
	"🕖",
	"🕗",
	"🕘",
	"🕙",
	"🕚",
	"🕛",
	"🕜",
	"🕝",
	"🕞",
	"🕟",
	"🕠",
	"🕡",
	"🕢",
	"🕣",
	"🕤",
	"🕥",
	"🕦",
	"🕧",
	"🕯",
	"🕰",
	"🕳",
	"🕴🏻",
	"🕴🏼",
	"🕴🏽",
	"🕴🏾",
	"🕴🏿",
	"🕴",
	"🕵🏻‍♀️",
	"🕵🏻‍♂️",
	"🕵🏻",
	"🕵🏼‍♀️",
	"🕵🏼‍♂️",
	"🕵🏼",
	"🕵🏽‍♀️",
	"🕵🏽‍♂️",
	"🕵🏽",
	"🕵🏾‍♀️",
	"🕵🏾‍♂️",
	"🕵🏾",
	"🕵🏿‍♀️",
	"🕵🏿‍♂️",
	"🕵🏿",
	"🕵️‍♀️",
	"🕵️‍♂️",
	"🕵",
	"🕶",
	"🕷",
	"🕸",
	"🕹",
	"🕺🏻",
	"🕺🏼",
	"🕺🏽",
	"🕺🏾",
	"🕺🏿",
	"🕺",
	"🖇",
	"🖊",
	"🖋",
	"🖌",
	"🖍",
	"🖐🏻",
	"🖐🏼",
	"🖐🏽",
	"🖐🏾",
	"🖐🏿",
	"🖐",
	"🖕🏻",
	"🖕🏼",
	"🖕🏽",
	"🖕🏾",
	"🖕🏿",
	"🖕",
	"🖖🏻",
	"🖖🏼",
	"🖖🏽",
	"🖖🏾",
	"🖖🏿",
	"🖖",
	"🖤",
	"🖥",
	"🖨",
	"🖱",
	"🖲",
	"🖼",
	"🗂",
	"🗃",
	"🗄",
	"🗑",
	"🗒",
	"🗓",
	"🗜",
	"🗝",
	"🗞",
	"🗡",
	"🗣",
	"🗨",
	"🗯",
	"🗳",
	"🗺",
	"🗻",
	"🗼",
	"🗽",
	"🗾",
	"🗿",
	"😀",
	"😁",
	"😂",
	"😃",
	"😄",
	"😅",
	"😆",
	"😇",
	"😈",
	"😉",
	"😊",
	"😋",
	"😌",
	"😍",
	"😎",
	"😏",
	"😐",
	"😑",
	"😒",
	"😓",
	"😔",
	"😕",
	"😖",
	"😗",
	"😘",
	"😙",
	"😚",
	"😛",
	"😜",
	"😝",
	"😞",
	"😟",
	"😠",
	"😡",
	"😢",
	"😣",
	"😤",
	"😥",
	"😦",
	"😧",
	"😨",
	"😩",
	"😪",
	"😫",
	"😬",
	"😭",
	"😮",
	"😯",
	"😰",
	"😱",
	"😲",
	"😳",
	"😴",
	"😵",
	"😶",
	"😷",
	"😸",
	"😹",
	"😺",
	"😻",
	"😼",
	"😽",
	"😾",
	"😿",
	"🙀",
	"🙁",
	"🙂",
	"🙃",
	"🙄",
	"🙅🏻‍♀️",
	"🙅🏻‍♂️",
	"🙅🏻",
	"🙅🏼‍♀️",
	"🙅🏼‍♂️",
	"🙅🏼",
	"🙅🏽‍♀️",
	"🙅🏽‍♂️",
	"🙅🏽",
	"🙅🏾‍♀️",
	"🙅🏾‍♂️",
	"🙅🏾",
	"🙅🏿‍♀️",
	"🙅🏿‍♂️",
	"🙅🏿",
	"🙅‍♀️",
	"🙅‍♂️",
	"🙅",
	"🙆🏻‍♀️",
	"🙆🏻‍♂️",
	"🙆🏻",
	"🙆🏼‍♀️",
	"🙆🏼‍♂️",
	"🙆🏼",
	"🙆🏽‍♀️",
	"🙆🏽‍♂️",
	"🙆🏽",
	"🙆🏾‍♀️",
	"🙆🏾‍♂️",
	"🙆🏾",
	"🙆🏿‍♀️",
	"🙆🏿‍♂️",
	"🙆🏿",
	"🙆‍♀️",
	"🙆‍♂️",
	"🙆",
	"🙇🏻‍♀️",
	"🙇🏻‍♂️",
	"🙇🏻",
	"🙇🏼‍♀️",
	"🙇🏼‍♂️",
	"🙇🏼",
	"🙇🏽‍♀️",
	"🙇🏽‍♂️",
	"🙇🏽",
	"🙇🏾‍♀️",
	"🙇🏾‍♂️",
	"🙇🏾",
	"🙇🏿‍♀️",
	"🙇🏿‍♂️",
	"🙇🏿",
	"🙇‍♀️",
	"🙇‍♂️",
	"🙇",
	"🙈",
	"🙉",
	"🙊",
	"🙋🏻‍♀️",
	"🙋🏻‍♂️",
	"🙋🏻",
	"🙋🏼‍♀️",
	"🙋🏼‍♂️",
	"🙋🏼",
	"🙋🏽‍♀️",
	"🙋🏽‍♂️",
	"🙋🏽",
	"🙋🏾‍♀️",
	"🙋🏾‍♂️",
	"🙋🏾",
	"🙋🏿‍♀️",
	"🙋🏿‍♂️",
	"🙋🏿",
	"🙋‍♀️",
	"🙋‍♂️",
	"🙋",
	"🙌🏻",
	"🙌🏼",
	"🙌🏽",
	"🙌🏾",
	"🙌🏿",
	"🙌",
	"🙍🏻‍♀️",
	"🙍🏻‍♂️",
	"🙍🏻",
	"🙍🏼‍♀️",
	"🙍🏼‍♂️",
	"🙍🏼",
	"🙍🏽‍♀️",
	"🙍🏽‍♂️",
	"🙍🏽",
	"🙍🏾‍♀️",
	"🙍🏾‍♂️",
	"🙍🏾",
	"🙍🏿‍♀️",
	"🙍🏿‍♂️",
	"🙍🏿",
	"🙍‍♀️",
	"🙍‍♂️",
	"🙍",
	"🙎🏻‍♀️",
	"🙎🏻‍♂️",
	"🙎🏻",
	"🙎🏼‍♀️",
	"🙎🏼‍♂️",
	"🙎🏼",
	"🙎🏽‍♀️",
	"🙎🏽‍♂️",
	"🙎🏽",
	"🙎🏾‍♀️",
	"🙎🏾‍♂️",
	"🙎🏾",
	"🙎🏿‍♀️",
	"🙎🏿‍♂️",
	"🙎🏿",
	"🙎‍♀️",
	"🙎‍♂️",
	"🙎",
	"🙏🏻",
	"🙏🏼",
	"🙏🏽",
	"🙏🏾",
	"🙏🏿",
	"🙏",
	"🚀",
	"🚁",
	"🚂",
	"🚃",
	"🚄",
	"🚅",
	"🚆",
	"🚇",
	"🚈",
	"🚉",
	"🚊",
	"🚋",
	"🚌",
	"🚍",
	"🚎",
	"🚏",
	"🚐",
	"🚑",
	"🚒",
	"🚓",
	"🚔",
	"🚕",
	"🚖",
	"🚗",
	"🚘",
	"🚙",
	"🚚",
	"🚛",
	"🚜",
	"🚝",
	"🚞",
	"🚟",
	"🚠",
	"🚡",
	"🚢",
	"🚣🏻‍♀️",
	"🚣🏻‍♂️",
	"🚣🏻",
	"🚣🏼‍♀️",
	"🚣🏼‍♂️",
	"🚣🏼",
	"🚣🏽‍♀️",
	"🚣🏽‍♂️",
	"🚣🏽",
	"🚣🏾‍♀️",
	"🚣🏾‍♂️",
	"🚣🏾",
	"🚣🏿‍♀️",
	"🚣🏿‍♂️",
	"🚣🏿",
	"🚣‍♀️",
	"🚣‍♂️",
	"🚣",
	"🚤",
	"🚥",
	"🚦",
	"🚧",
	"🚨",
	"🚩",
	"🚪",
	"🚫",
	"🚬",
	"🚭",
	"🚮",
	"🚯",
	"🚰",
	"🚱",
	"🚲",
	"🚳",
	"🚴🏻‍♀️",
	"🚴🏻‍♂️",
	"🚴🏻",
	"🚴🏼‍♀️",
	"🚴🏼‍♂️",
	"🚴🏼",
	"🚴🏽‍♀️",
	"🚴🏽‍♂️",
	"🚴🏽",
	"🚴🏾‍♀️",
	"🚴🏾‍♂️",
	"🚴🏾",
	"🚴🏿‍♀️",
	"🚴🏿‍♂️",
	"🚴🏿",
	"🚴‍♀️",
	"🚴‍♂️",
	"🚴",
	"🚵🏻‍♀️",
	"🚵🏻‍♂️",
	"🚵🏻",
	"🚵🏼‍♀️",
	"🚵🏼‍♂️",
	"🚵🏼",
	"🚵🏽‍♀️",
	"🚵🏽‍♂️",
	"🚵🏽",
	"🚵🏾‍♀️",
	"🚵🏾‍♂️",
	"🚵🏾",
	"🚵🏿‍♀️",
	"🚵🏿‍♂️",
	"🚵🏿",
	"🚵‍♀️",
	"🚵‍♂️",
	"🚵",
	"🚶🏻‍♀️",
	"🚶🏻‍♂️",
	"🚶🏻",
	"🚶🏼‍♀️",
	"🚶🏼‍♂️",
	"🚶🏼",
	"🚶🏽‍♀️",
	"🚶🏽‍♂️",
	"🚶🏽",
	"🚶🏾‍♀️",
	"🚶🏾‍♂️",
	"🚶🏾",
	"🚶🏿‍♀️",
	"🚶🏿‍♂️",
	"🚶🏿",
	"🚶‍♀️",
	"🚶‍♂️",
	"🚶",
	"🚷",
	"🚸",
	"🚹",
	"🚺",
	"🚻",
	"🚼",
	"🚽",
	"🚾",
	"🚿",
	"🛀🏻",
	"🛀🏼",
	"🛀🏽",
	"🛀🏾",
	"🛀🏿",
	"🛀",
	"🛁",
	"🛂",
	"🛃",
	"🛄",
	"🛅",
	"🛋",
	"🛌🏻",
	"🛌🏼",
	"🛌🏽",
	"🛌🏾",
	"🛌🏿",
	"🛌",
	"🛍",
	"🛎",
	"🛏",
	"🛐",
	"🛑",
	"🛒",
	"🛠",
	"🛡",
	"🛢",
	"🛣",
	"🛤",
	"🛥",
	"🛩",
	"🛫",
	"🛬",
	"🛰",
	"🛳",
	"🛴",
	"🛵",
	"🛶",
	"🤐",
	"🤑",
	"🤒",
	"🤓",
	"🤔",
	"🤕",
	"🤖",
	"🤗",
	"🤘🏻",
	"🤘🏼",
	"🤘🏽",
	"🤘🏾",
	"🤘🏿",
	"🤘",
	"🤙🏻",
	"🤙🏼",
	"🤙🏽",
	"🤙🏾",
	"🤙🏿",
	"🤙",
	"🤚🏻",
	"🤚🏼",
	"🤚🏽",
	"🤚🏾",
	"🤚🏿",
	"🤚",
	"🤛🏻",
	"🤛🏼",
	"🤛🏽",
	"🤛🏾",
	"🤛🏿",
	"🤛",
	"🤜🏻",
	"🤜🏼",
	"🤜🏽",
	"🤜🏾",
	"🤜🏿",
	"🤜",
	"🤝🏻",
	"🤝🏼",
	"🤝🏽",
	"🤝🏾",
	"🤝🏿",
	"🤝",
	"🤞🏻",
	"🤞🏼",
	"🤞🏽",
	"🤞🏾",
	"🤞🏿",
	"🤞",
	"🤠",
	"🤡",
	"🤢",
	"🤣",
	"🤤",
	"🤥",
	"🤦🏻‍♀️",
	"🤦🏻‍♂️",
	"🤦🏻",
	"🤦🏼‍♀️",
	"🤦🏼‍♂️",
	"🤦🏼",
	"🤦🏽‍♀️",
	"🤦🏽‍♂️",
	"🤦🏽",
	"🤦🏾‍♀️",
	"🤦🏾‍♂️",
	"🤦🏾",
	"🤦🏿‍♀️",
	"🤦🏿‍♂️",
	"🤦🏿",
	"🤦‍♀️",
	"🤦‍♂️",
	"🤦",
	"🤧",
	"🤰🏻",
	"🤰🏼",
	"🤰🏽",
	"🤰🏾",
	"🤰🏿",
	"🤰",
	"🤳🏻",
	"🤳🏼",
	"🤳🏽",
	"🤳🏾",
	"🤳🏿",
	"🤳",
	"🤴🏻",
	"🤴🏼",
	"🤴🏽",
	"🤴🏾",
	"🤴🏿",
	"🤴",
	"🤵🏻",
	"🤵🏼",
	"🤵🏽",
	"🤵🏾",
	"🤵🏿",
	"🤵",
	"🤶🏻",
	"🤶🏼",
	"🤶🏽",
	"🤶🏾",
	"🤶🏿",
	"🤶",
	"🤷🏻‍♀️",
	"🤷🏻‍♂️",
	"🤷🏻",
	"🤷🏼‍♀️",
	"🤷🏼‍♂️",
	"🤷🏼",
	"🤷🏽‍♀️",
	"🤷🏽‍♂️",
	"🤷🏽",
	"🤷🏾‍♀️",
	"🤷🏾‍♂️",
	"🤷🏾",
	"🤷🏿‍♀️",
	"🤷🏿‍♂️",
	"🤷🏿",
	"🤷‍♀️",
	"🤷‍♂️",
	"🤷",
	"🤸🏻‍♀️",
	"🤸🏻‍♂️",
	"🤸🏻",
	"🤸🏼‍♀️",
	"🤸🏼‍♂️",
	"🤸🏼",
	"🤸🏽‍♀️",
	"🤸🏽‍♂️",
	"🤸🏽",
	"🤸🏾‍♀️",
	"🤸🏾‍♂️",
	"🤸🏾",
	"🤸🏿‍♀️",
	"🤸🏿‍♂️",
	"🤸🏿",
	"🤸‍♀️",
	"🤸‍♂️",
	"🤸",
	"🤹🏻‍♀️",
	"🤹🏻‍♂️",
	"🤹🏻",
	"🤹🏼‍♀️",
	"🤹🏼‍♂️",
	"🤹🏼",
	"🤹🏽‍♀️",
	"🤹🏽‍♂️",
	"🤹🏽",
	"🤹🏾‍♀️",
	"🤹🏾‍♂️",
	"🤹🏾",
	"🤹🏿‍♀️",
	"🤹🏿‍♂️",
	"🤹🏿",
	"🤹‍♀️",
	"🤹‍♂️",
	"🤹",
	"🤺",
	"🤼🏻‍♀️",
	"🤼🏻‍♂️",
	"🤼🏻",
	"🤼🏼‍♀️",
	"🤼🏼‍♂️",
	"🤼🏼",
	"🤼🏽‍♀️",
	"🤼🏽‍♂️",
	"🤼🏽",
	"🤼🏾‍♀️",
	"🤼🏾‍♂️",
	"🤼🏾",
	"🤼🏿‍♀️",
	"🤼🏿‍♂️",
	"🤼🏿",
	"🤼‍♀️",
	"🤼‍♂️",
	"🤼",
	"🤽🏻‍♀️",
	"🤽🏻‍♂️",
	"🤽🏻",
	"🤽🏼‍♀️",
	"🤽🏼‍♂️",
	"🤽🏼",
	"🤽🏽‍♀️",
	"🤽🏽‍♂️",
	"🤽🏽",
	"🤽🏾‍♀️",
	"🤽🏾‍♂️",
	"🤽🏾",
	"🤽🏿‍♀️",
	"🤽🏿‍♂️",
	"🤽🏿",
	"🤽‍♀️",
	"🤽‍♂️",
	"🤽",
	"🤾🏻‍♀️",
	"🤾🏻‍♂️",
	"🤾🏻",
	"🤾🏼‍♀️",
	"🤾🏼‍♂️",
	"🤾🏼",
	"🤾🏽‍♀️",
	"🤾🏽‍♂️",
	"🤾🏽",
	"🤾🏾‍♀️",
	"🤾🏾‍♂️",
	"🤾🏾",
	"🤾🏿‍♀️",
	"🤾🏿‍♂️",
	"🤾🏿",
	"🤾‍♀️",
	"🤾‍♂️",
	"🤾",
	"🥀",
	"🥁",
	"🥂",
	"🥃",
	"🥄",
	"🥅",
	"🥇",
	"🥈",
	"🥉",
	"🥊",
	"🥋",
	"🥐",
	"🥑",
	"🥒",
	"🥓",
	"🥔",
	"🥕",
	"🥖",
	"🥗",
	"🥘",
	"🥙",
	"🥚",
	"🥛",
	"🥜",
	"🥝",
	"🥞",
	"🦀",
	"🦁",
	"🦂",
	"🦃",
	"🦄",
	"🦅",
	"🦆",
	"🦇",
	"🦈",
	"🦉",
	"🦊",
	"🦋",
	"🦌",
	"🦍",
	"🦎",
	"🦏",
	"🦐",
	"🦑",
	"🧀",
	"‼",
	"⁉",
	"™",
	"ℹ",
	"↔",
	"↕",
	"↖",
	"↗",
	"↘",
	"↙",
	"↩",
	"↪",
	"#⃣",
	"⌚",
	"⌛",
	"⌨",
	"⏏",
	"⏩",
	"⏪",
	"⏫",
	"⏬",
	"⏭",
	"⏮",
	"⏯",
	"⏰",
	"⏱",
	"⏲",
	"⏳",
	"⏸",
	"⏹",
	"⏺",
	"Ⓜ",
	"▪",
	"▫",
	"▶",
	"◀",
	"◻",
	"◼",
	"◽",
	"◾",
	"☀",
	"☁",
	"☂",
	"☃",
	"☄",
	"☎",
	"☑",
	"☔",
	"☕",
	"☘",
	"☝🏻",
	"☝🏼",
	"☝🏽",
	"☝🏾",
	"☝🏿",
	"☝",
	"☠",
	"☢",
	"☣",
	"☦",
	"☪",
	"☮",
	"☯",
	"☸",
	"☹",
	"☺",
	"♀",
	"♂",
	"♈",
	"♉",
	"♊",
	"♋",
	"♌",
	"♍",
	"♎",
	"♏",
	"♐",
	"♑",
	"♒",
	"♓",
	"♠",
	"♣",
	"♥",
	"♦",
	"♨",
	"♻",
	"♿",
	"⚒",
	"⚓",
	"⚔",
	"⚕",
	"⚖",
	"⚗",
	"⚙",
	"⚛",
	"⚜",
	"⚠",
	"⚡",
	"⚪",
	"⚫",
	"⚰",
	"⚱",
	"⚽",
	"⚾",
	"⛄",
	"⛅",
	"⛈",
	"⛎",
	"⛏",
	"⛑",
	"⛓",
	"⛔",
	"⛩",
	"⛪",
	"⛰",
	"⛱",
	"⛲",
	"⛳",
	"⛴",
	"⛵",
	"⛷🏻",
	"⛷🏼",
	"⛷🏽",
	"⛷🏾",
	"⛷🏿",
	"⛷",
	"⛸",
	"⛹🏻‍♀️",
	"⛹🏻‍♂️",
	"⛹🏻",
	"⛹🏼‍♀️",
	"⛹🏼‍♂️",
	"⛹🏼",
	"⛹🏽‍♀️",
	"⛹🏽‍♂️",
	"⛹🏽",
	"⛹🏾‍♀️",
	"⛹🏾‍♂️",
	"⛹🏾",
	"⛹🏿‍♀️",
	"⛹🏿‍♂️",
	"⛹🏿",
	"⛹️‍♀️",
	"⛹️‍♂️",
	"⛹",
	"⛺",
	"⛽",
	"✂",
	"✅",
	"✈",
	"✉",
	"✊🏻",
	"✊🏼",
	"✊🏽",
	"✊🏾",
	"✊🏿",
	"✊",
	"✋🏻",
	"✋🏼",
	"✋🏽",
	"✋🏾",
	"✋🏿",
	"✋",
	"✌🏻",
	"✌🏼",
	"✌🏽",
	"✌🏾",
	"✌🏿",
	"✌",
	"✍🏻",
	"✍🏼",
	"✍🏽",
	"✍🏾",
	"✍🏿",
	"✍",
	"✏",
	"✒",
	"✔",
	"✖",
	"✝",
	"✡",
	"✨",
	"✳",
	"✴",
	"❄",
	"❇",
	"❌",
	"❎",
	"❓",
	"❔",
	"❕",
	"❗",
	"❣",
	"❤",
	"➕",
	"➖",
	"➗",
	"➡",
	"➰",
	"➿",
	"⤴",
	"⤵",
	"*⃣",
	"⬅",
	"⬆",
	"⬇",
	"⬛",
	"⬜",
	"⭐",
	"⭕",
	"0⃣",
	"〰",
	"〽",
	"1⃣",
	"2⃣",
	"㊗",
	"㊙",
	"3⃣",
	"4⃣",
	"5⃣",
	"6⃣",
	"7⃣",
	"8⃣",
	"9⃣",
	"©",
	"®",
	""
];

frappe.ui.emoji_keywords = [
	":mahjong:",
	":black_joker:",
	":a:",
	":b:",
	":o2:",
	":parking:",
	":ab:",
	":cl:",
	":cool:",
	":free:",
	":id:",
	":new:",
	":ng:",
	":ok:",
	":sos:",
	":up:",
	":vs:",
	":flag_ac:",
	":flag_ad:",
	":flag_ae:",
	":flag_af:",
	":flag_ag:",
	":flag_ai:",
	":flag_al:",
	":flag_am:",
	":flag_ao:",
	":flag_aq:",
	":flag_ar:",
	":flag_as:",
	":flag_at:",
	":flag_au:",
	":flag_aw:",
	":flag_ax:",
	":flag_az:",
	":regional_indicator_a:",
	":flag_ba:",
	":flag_bb:",
	":flag_bd:",
	":flag_be:",
	":flag_bf:",
	":flag_bg:",
	":flag_bh:",
	":flag_bi:",
	":flag_bj:",
	":flag_bl:",
	":flag_bm:",
	":flag_bn:",
	":flag_bo:",
	":flag_bq:",
	":flag_br:",
	":flag_bs:",
	":flag_bt:",
	":flag_bv:",
	":flag_bw:",
	":flag_by:",
	":flag_bz:",
	":regional_indicator_b:",
	":flag_ca:",
	":flag_cc:",
	":flag_cd:",
	":flag_cf:",
	":flag_cg:",
	":flag_ch:",
	":flag_ci:",
	":flag_ck:",
	":flag_cl:",
	":flag_cm:",
	":flag_cn:",
	":flag_co:",
	":flag_cp:",
	":flag_cr:",
	":flag_cu:",
	":flag_cv:",
	":flag_cw:",
	":flag_cx:",
	":flag_cy:",
	":flag_cz:",
	":regional_indicator_c:",
	":flag_de:",
	":flag_dg:",
	":flag_dj:",
	":flag_dk:",
	":flag_dm:",
	":flag_do:",
	":flag_dz:",
	":regional_indicator_d:",
	":flag_ea:",
	":flag_ec:",
	":flag_ee:",
	":flag_eg:",
	":flag_eh:",
	":flag_er:",
	":flag_es:",
	":flag_et:",
	":flag_eu:",
	":regional_indicator_e:",
	":flag_fi:",
	":flag_fj:",
	":flag_fk:",
	":flag_fm:",
	":flag_fo:",
	":flag_fr:",
	":regional_indicator_f:",
	":flag_ga:",
	":flag_gb:",
	":flag_gd:",
	":flag_ge:",
	":flag_gf:",
	":flag_gg:",
	":flag_gh:",
	":flag_gi:",
	":flag_gl:",
	":flag_gm:",
	":flag_gn:",
	":flag_gp:",
	":flag_gq:",
	":flag_gr:",
	":flag_gs:",
	":flag_gt:",
	":flag_gu:",
	":flag_gw:",
	":flag_gy:",
	":regional_indicator_g:",
	":flag_hk:",
	":flag_hm:",
	":flag_hn:",
	":flag_hr:",
	":flag_ht:",
	":flag_hu:",
	":regional_indicator_h:",
	":flag_ic:",
	":flag_id:",
	":flag_ie:",
	":flag_il:",
	":flag_im:",
	":flag_in:",
	":flag_io:",
	":flag_iq:",
	":flag_ir:",
	":flag_is:",
	":flag_it:",
	":regional_indicator_i:",
	":flag_je:",
	":flag_jm:",
	":flag_jo:",
	":flag_jp:",
	":regional_indicator_j:",
	":flag_ke:",
	":flag_kg:",
	":flag_kh:",
	":flag_ki:",
	":flag_km:",
	":flag_kn:",
	":flag_kp:",
	":flag_kr:",
	":flag_kw:",
	":flag_ky:",
	":flag_kz:",
	":regional_indicator_k:",
	":flag_la:",
	":flag_lb:",
	":flag_lc:",
	":flag_li:",
	":flag_lk:",
	":flag_lr:",
	":flag_ls:",
	":flag_lt:",
	":flag_lu:",
	":flag_lv:",
	":flag_ly:",
	":regional_indicator_l:",
	":flag_ma:",
	":flag_mc:",
	":flag_md:",
	":flag_me:",
	":flag_mf:",
	":flag_mg:",
	":flag_mh:",
	":flag_mk:",
	":flag_ml:",
	":flag_mm:",
	":flag_mn:",
	":flag_mo:",
	":flag_mp:",
	":flag_mq:",
	":flag_mr:",
	":flag_ms:",
	":flag_mt:",
	":flag_mu:",
	":flag_mv:",
	":flag_mw:",
	":flag_mx:",
	":flag_my:",
	":flag_mz:",
	":regional_indicator_m:",
	":flag_na:",
	":flag_nc:",
	":flag_ne:",
	":flag_nf:",
	":flag_ng:",
	":flag_ni:",
	":flag_nl:",
	":flag_no:",
	":flag_np:",
	":flag_nr:",
	":flag_nu:",
	":flag_nz:",
	":regional_indicator_n:",
	":flag_om:",
	":regional_indicator_o:",
	":flag_pa:",
	":flag_pe:",
	":flag_pf:",
	":flag_pg:",
	":flag_ph:",
	":flag_pk:",
	":flag_pl:",
	":flag_pm:",
	":flag_pn:",
	":flag_pr:",
	":flag_ps:",
	":flag_pt:",
	":flag_pw:",
	":flag_py:",
	":regional_indicator_p:",
	":flag_qa:",
	":regional_indicator_q:",
	":flag_re:",
	":flag_ro:",
	":flag_rs:",
	":flag_ru:",
	":flag_rw:",
	":regional_indicator_r:",
	":flag_sa:",
	":flag_sb:",
	":flag_sc:",
	":flag_sd:",
	":flag_se:",
	":flag_sg:",
	":flag_sh:",
	":flag_si:",
	":flag_sj:",
	":flag_sk:",
	":flag_sl:",
	":flag_sm:",
	":flag_sn:",
	":flag_so:",
	":flag_sr:",
	":flag_ss:",
	":flag_st:",
	":flag_sv:",
	":flag_sx:",
	":flag_sy:",
	":flag_sz:",
	":regional_indicator_s:",
	":flag_ta:",
	":flag_tc:",
	":flag_td:",
	":flag_tf:",
	":flag_tg:",
	":flag_th:",
	":flag_tj:",
	":flag_tk:",
	":flag_tl:",
	":flag_tm:",
	":flag_tn:",
	":flag_to:",
	":flag_tr:",
	":flag_tt:",
	":flag_tv:",
	":flag_tw:",
	":flag_tz:",
	":regional_indicator_t:",
	":flag_ua:",
	":flag_ug:",
	":flag_um:",
	":regional_indicator_u::regional_indicator_n:",
	":flag_us:",
	":flag_uy:",
	":flag_uz:",
	":regional_indicator_u:",
	":flag_va:",
	":flag_vc:",
	":flag_ve:",
	":flag_vg:",
	":flag_vi:",
	":flag_vn:",
	":flag_vu:",
	":regional_indicator_v:",
	":flag_wf:",
	":flag_ws:",
	":regional_indicator_w:",
	":flag_xk:",
	":regional_indicator_x:",
	":flag_ye:",
	":flag_yt:",
	":regional_indicator_y:",
	":flag_za:",
	":flag_zm:",
	":flag_zw:",
	":regional_indicator_z:",
	":koko:",
	":sa:",
	":u7121:",
	":u6307:",
	":u7981:",
	":u7a7a:",
	":u5408:",
	":u6e80:",
	":u6709:",
	":u6708:",
	":u7533:",
	":u5272:",
	":u55b6:",
	":ideograph_advantage:",
	":accept:",
	":cyclone:",
	":foggy:",
	":closed_umbrella:",
	":night_with_stars:",
	":sunrise_over_mountains:",
	":sunrise:",
	":city_dusk:",
	":city_sunset:",
	":rainbow:",
	":bridge_at_night:",
	":ocean:",
	":volcano:",
	":milky_way:",
	":earth_africa:",
	":earth_americas:",
	":earth_asia:",
	":globe_with_meridians:",
	":new_moon:",
	":waxing_crescent_moon:",
	":first_quarter_moon:",
	":waxing_gibbous_moon:",
	":full_moon:",
	":waning_gibbous_moon:",
	":last_quarter_moon:",
	":waning_crescent_moon:",
	":crescent_moon:",
	":new_moon_with_face:",
	":first_quarter_moon_with_face:",
	":last_quarter_moon_with_face:",
	":full_moon_with_face:",
	":sun_with_face:",
	":star2:",
	":stars:",
	":thermometer:",
	":white_sun_small_cloud:",
	":white_sun_cloud:",
	":white_sun_rain_cloud:",
	":cloud_rain:",
	":cloud_snow:",
	":cloud_lightning:",
	":cloud_tornado:",
	":fog:",
	":wind_blowing_face:",
	":hotdog:",
	":taco:",
	":burrito:",
	":chestnut:",
	":seedling:",
	":evergreen_tree:",
	":deciduous_tree:",
	":palm_tree:",
	":cactus:",
	":hot_pepper:",
	":tulip:",
	":cherry_blossom:",
	":rose:",
	":hibiscus:",
	":sunflower:",
	":blossom:",
	":corn:",
	":ear_of_rice:",
	":herb:",
	":four_leaf_clover:",
	":maple_leaf:",
	":fallen_leaf:",
	":leaves:",
	":mushroom:",
	":tomato:",
	":eggplant:",
	":grapes:",
	":melon:",
	":watermelon:",
	":tangerine:",
	":lemon:",
	":banana:",
	":pineapple:",
	":apple:",
	":green_apple:",
	":pear:",
	":peach:",
	":cherries:",
	":strawberry:",
	":hamburger:",
	":pizza:",
	":meat_on_bone:",
	":poultry_leg:",
	":rice_cracker:",
	":rice_ball:",
	":rice:",
	":curry:",
	":ramen:",
	":spaghetti:",
	":bread:",
	":fries:",
	":sweet_potato:",
	":dango:",
	":oden:",
	":sushi:",
	":fried_shrimp:",
	":fish_cake:",
	":icecream:",
	":shaved_ice:",
	":ice_cream:",
	":doughnut:",
	":cookie:",
	":chocolate_bar:",
	":candy:",
	":lollipop:",
	":custard:",
	":honey_pot:",
	":cake:",
	":bento:",
	":stew:",
	":cooking:",
	":fork_and_knife:",
	":tea:",
	":sake:",
	":wine_glass:",
	":cocktail:",
	":tropical_drink:",
	":beer:",
	":beers:",
	":baby_bottle:",
	":fork_knife_plate:",
	":champagne:",
	":popcorn:",
	":ribbon:",
	":gift:",
	":birthday:",
	":jack_o_lantern:",
	":christmas_tree:",
	":santa_tone1:",
	":santa_tone2:",
	":santa_tone3:",
	":santa_tone4:",
	":santa_tone5:",
	":santa:",
	":fireworks:",
	":sparkler:",
	":balloon:",
	":tada:",
	":confetti_ball:",
	":tanabata_tree:",
	":crossed_flags:",
	":bamboo:",
	":dolls:",
	":flags:",
	":wind_chime:",
	":rice_scene:",
	":school_satchel:",
	":mortar_board:",
	":military_medal:",
	":reminder_ribbon:",
	":microphone2:",
	":level_slider:",
	":control_knobs:",
	":film_frames:",
	":tickets:",
	":carousel_horse:",
	":ferris_wheel:",
	":roller_coaster:",
	":fishing_pole_and_fish:",
	":microphone:",
	":movie_camera:",
	":cinema:",
	":headphones:",
	":art:",
	":tophat:",
	":circus_tent:",
	":ticket:",
	":clapper:",
	":performing_arts:",
	":video_game:",
	":dart:",
	":slot_machine:",
	":8ball:",
	":game_die:",
	":bowling:",
	":flower_playing_cards:",
	":musical_note:",
	":notes:",
	":saxophone:",
	":guitar:",
	":musical_keyboard:",
	":trumpet:",
	":violin:",
	":musical_score:",
	":running_shirt_with_sash:",
	":tennis:",
	":ski:",
	":basketball:",
	":checkered_flag:",
	":snowboarder::tone1:",
	":snowboarder::tone2:",
	":snowboarder::tone3:",
	":snowboarder::tone4:",
	":snowboarder::tone5:",
	":snowboarder:",
	":runner_tone1:‍♀️",
	":runner_tone1:‍♂️",
	":runner_tone1:",
	":runner_tone2:‍♀️",
	":runner_tone2:‍♂️",
	":runner_tone2:",
	":runner_tone3:‍♀️",
	":runner_tone3:‍♂️",
	":runner_tone3:",
	":runner_tone4:‍♀️",
	":runner_tone4:‍♂️",
	":runner_tone4:",
	":runner_tone5:‍♀️",
	":runner_tone5:‍♂️",
	":runner_tone5:",
	":runner:‍♀️",
	":runner:‍♂️",
	":runner:",
	":surfer_tone1:‍♀️",
	":surfer_tone1:‍♂️",
	":surfer_tone1:",
	":surfer_tone2:‍♀️",
	":surfer_tone2:‍♂️",
	":surfer_tone2:",
	":surfer_tone3:‍♀️",
	":surfer_tone3:‍♂️",
	":surfer_tone3:",
	":surfer_tone4:‍♀️",
	":surfer_tone4:‍♂️",
	":surfer_tone4:",
	":surfer_tone5:‍♀️",
	":surfer_tone5:‍♂️",
	":surfer_tone5:",
	":surfer:‍♀️",
	":surfer:‍♂️",
	":surfer:",
	":medal:",
	":trophy:",
	":horse_racing_tone1:",
	":horse_racing_tone2:",
	":horse_racing_tone3:",
	":horse_racing_tone4:",
	":horse_racing_tone5:",
	":horse_racing:",
	":football:",
	":rugby_football:",
	":swimmer_tone1:‍♀️",
	":swimmer_tone1:‍♂️",
	":swimmer_tone1:",
	":swimmer_tone2:‍♀️",
	":swimmer_tone2:‍♂️",
	":swimmer_tone2:",
	":swimmer_tone3:‍♀️",
	":swimmer_tone3:‍♂️",
	":swimmer_tone3:",
	":swimmer_tone4:‍♀️",
	":swimmer_tone4:‍♂️",
	":swimmer_tone4:",
	":swimmer_tone5:‍♀️",
	":swimmer_tone5:‍♂️",
	":swimmer_tone5:",
	":swimmer:‍♀️",
	":swimmer:‍♂️",
	":swimmer:",
	":lifter_tone1:‍♀️",
	":lifter_tone1:‍♂️",
	":lifter_tone1:",
	":lifter_tone2:‍♀️",
	":lifter_tone2:‍♂️",
	":lifter_tone2:",
	":lifter_tone3:‍♀️",
	":lifter_tone3:‍♂️",
	":lifter_tone3:",
	":lifter_tone4:‍♀️",
	":lifter_tone4:‍♂️",
	":lifter_tone4:",
	":lifter_tone5:‍♀️",
	":lifter_tone5:‍♂️",
	":lifter_tone5:",
	":lifter:‍♀️",
	":lifter:‍♂️",
	":lifter:",
	":golfer::tone1:‍♀️",
	":golfer::tone1:‍♂️",
	":golfer::tone1:",
	":golfer::tone2:‍♀️",
	":golfer::tone2:‍♂️",
	":golfer::tone2:",
	":golfer::tone3:‍♀️",
	":golfer::tone3:‍♂️",
	":golfer::tone3:",
	":golfer::tone4:‍♀️",
	":golfer::tone4:‍♂️",
	":golfer::tone4:",
	":golfer::tone5:‍♀️",
	":golfer::tone5:‍♂️",
	":golfer::tone5:",
	":golfer:‍♀️",
	":golfer:‍♂️",
	":golfer:",
	":motorcycle:",
	":race_car:",
	":cricket:",
	":volleyball:",
	":field_hockey:",
	":hockey:",
	":ping_pong:",
	":mountain_snow:",
	":camping:",
	":beach:",
	":construction_site:",
	":homes:",
	":cityscape:",
	":house_abandoned:",
	":classical_building:",
	":desert:",
	":island:",
	":park:",
	":stadium:",
	":house:",
	":house_with_garden:",
	":office:",
	":post_office:",
	":european_post_office:",
	":hospital:",
	":bank:",
	":atm:",
	":hotel:",
	":love_hotel:",
	":convenience_store:",
	":school:",
	":department_store:",
	":factory:",
	":izakaya_lantern:",
	":japanese_castle:",
	":european_castle:",
	":flag_white:‍:rainbow:",
	":flag_white:",
	":flag_black:‍:skull_crossbones:",
	":flag_black:",
	":rosette:",
	":label:",
	":badminton:",
	":bow_and_arrow:",
	":amphora:",
	":tone1:",
	":tone2:",
	":tone3:",
	":tone4:",
	":tone5:",
	":rat:",
	":mouse2:",
	":ox:",
	":water_buffalo:",
	":cow2:",
	":tiger2:",
	":leopard:",
	":rabbit2:",
	":cat2:",
	":dragon:",
	":crocodile:",
	":whale2:",
	":snail:",
	":snake:",
	":racehorse:",
	":ram:",
	":goat:",
	":sheep:",
	":monkey:",
	":rooster:",
	":chicken:",
	":dog2:",
	":pig2:",
	":boar:",
	":elephant:",
	":octopus:",
	":shell:",
	":bug:",
	":ant:",
	":bee:",
	":beetle:",
	":fish:",
	":tropical_fish:",
	":blowfish:",
	":turtle:",
	":hatching_chick:",
	":baby_chick:",
	":hatched_chick:",
	":bird:",
	":penguin:",
	":koala:",
	":poodle:",
	":dromedary_camel:",
	":camel:",
	":dolphin:",
	":mouse:",
	":cow:",
	":tiger:",
	":rabbit:",
	":cat:",
	":dragon_face:",
	":whale:",
	":horse:",
	":monkey_face:",
	":dog:",
	":pig:",
	":frog:",
	":hamster:",
	":wolf:",
	":bear:",
	":panda_face:",
	":pig_nose:",
	":feet:",
	":chipmunk:",
	":eyes:",
	":eye_in_speech_bubble:",
	":eye:",
	":ear_tone1:",
	":ear_tone2:",
	":ear_tone3:",
	":ear_tone4:",
	":ear_tone5:",
	":ear:",
	":nose_tone1:",
	":nose_tone2:",
	":nose_tone3:",
	":nose_tone4:",
	":nose_tone5:",
	":nose:",
	":lips:",
	":tongue:",
	":point_up_2_tone1:",
	":point_up_2_tone2:",
	":point_up_2_tone3:",
	":point_up_2_tone4:",
	":point_up_2_tone5:",
	":point_up_2:",
	":point_down_tone1:",
	":point_down_tone2:",
	":point_down_tone3:",
	":point_down_tone4:",
	":point_down_tone5:",
	":point_down:",
	":point_left_tone1:",
	":point_left_tone2:",
	":point_left_tone3:",
	":point_left_tone4:",
	":point_left_tone5:",
	":point_left:",
	":point_right_tone1:",
	":point_right_tone2:",
	":point_right_tone3:",
	":point_right_tone4:",
	":point_right_tone5:",
	":point_right:",
	":punch_tone1:",
	":punch_tone2:",
	":punch_tone3:",
	":punch_tone4:",
	":punch_tone5:",
	":punch:",
	":wave_tone1:",
	":wave_tone2:",
	":wave_tone3:",
	":wave_tone4:",
	":wave_tone5:",
	":wave:",
	":ok_hand_tone1:",
	":ok_hand_tone2:",
	":ok_hand_tone3:",
	":ok_hand_tone4:",
	":ok_hand_tone5:",
	":ok_hand:",
	":thumbsup_tone1:",
	":thumbsup_tone2:",
	":thumbsup_tone3:",
	":thumbsup_tone4:",
	":thumbsup_tone5:",
	":thumbsup:",
	":thumbsdown_tone1:",
	":thumbsdown_tone2:",
	":thumbsdown_tone3:",
	":thumbsdown_tone4:",
	":thumbsdown_tone5:",
	":thumbsdown:",
	":clap_tone1:",
	":clap_tone2:",
	":clap_tone3:",
	":clap_tone4:",
	":clap_tone5:",
	":clap:",
	":open_hands_tone1:",
	":open_hands_tone2:",
	":open_hands_tone3:",
	":open_hands_tone4:",
	":open_hands_tone5:",
	":open_hands:",
	":crown:",
	":womans_hat:",
	":eyeglasses:",
	":necktie:",
	":shirt:",
	":jeans:",
	":dress:",
	":kimono:",
	":bikini:",
	":womans_clothes:",
	":purse:",
	":handbag:",
	":pouch:",
	":mans_shoe:",
	":athletic_shoe:",
	":high_heel:",
	":sandal:",
	":boot:",
	":footprints:",
	":bust_in_silhouette:",
	":busts_in_silhouette:",
	":boy_tone1:",
	":boy_tone2:",
	":boy_tone3:",
	":boy_tone4:",
	":boy_tone5:",
	":boy:",
	":girl_tone1:",
	":girl_tone2:",
	":girl_tone3:",
	":girl_tone4:",
	":girl_tone5:",
	":girl:",
	":man_tone1:‍:ear_of_rice:",
	":man_tone1:‍:cooking:",
	":man_tone1:‍:mortar_board:",
	":man_tone1:‍:microphone:",
	":man_tone1:‍:art:",
	":man_tone1:‍:school:",
	":man_tone1:‍:factory:",
	":man_tone1:‍:computer:",
	":man_tone1:‍:briefcase:",
	":man_tone1:‍:wrench:",
	":man_tone1:‍:microscope:",
	":man_tone1:‍:rocket:",
	":man_tone1:‍:fire_engine:",
	":man_tone1:‍⚕️",
	":man_tone1:‍:scales:",
	":man_tone1:‍:airplane:",
	":man_tone1:",
	":man_tone2:‍:ear_of_rice:",
	":man_tone2:‍:cooking:",
	":man_tone2:‍:mortar_board:",
	":man_tone2:‍:microphone:",
	":man_tone2:‍:art:",
	":man_tone2:‍:school:",
	":man_tone2:‍:factory:",
	":man_tone2:‍:computer:",
	":man_tone2:‍:briefcase:",
	":man_tone2:‍:wrench:",
	":man_tone2:‍:microscope:",
	":man_tone2:‍:rocket:",
	":man_tone2:‍:fire_engine:",
	":man_tone2:‍⚕️",
	":man_tone2:‍:scales:",
	":man_tone2:‍:airplane:",
	":man_tone2:",
	":man_tone3:‍:ear_of_rice:",
	":man_tone3:‍:cooking:",
	":man_tone3:‍:mortar_board:",
	":man_tone3:‍:microphone:",
	":man_tone3:‍:art:",
	":man_tone3:‍:school:",
	":man_tone3:‍:factory:",
	":man_tone3:‍:computer:",
	":man_tone3:‍:briefcase:",
	":man_tone3:‍:wrench:",
	":man_tone3:‍:microscope:",
	":man_tone3:‍:rocket:",
	":man_tone3:‍:fire_engine:",
	":man_tone3:‍⚕️",
	":man_tone3:‍:scales:",
	":man_tone3:‍:airplane:",
	":man_tone3:",
	":man_tone4:‍:ear_of_rice:",
	":man_tone4:‍:cooking:",
	":man_tone4:‍:mortar_board:",
	":man_tone4:‍:microphone:",
	":man_tone4:‍:art:",
	":man_tone4:‍:school:",
	":man_tone4:‍:factory:",
	":man_tone4:‍:computer:",
	":man_tone4:‍:briefcase:",
	":man_tone4:‍:wrench:",
	":man_tone4:‍:microscope:",
	":man_tone4:‍:rocket:",
	":man_tone4:‍:fire_engine:",
	":man_tone4:‍⚕️",
	":man_tone4:‍:scales:",
	":man_tone4:‍:airplane:",
	":man_tone4:",
	":man_tone5:‍:ear_of_rice:",
	":man_tone5:‍:cooking:",
	":man_tone5:‍:mortar_board:",
	":man_tone5:‍:microphone:",
	":man_tone5:‍:art:",
	":man_tone5:‍:school:",
	":man_tone5:‍:factory:",
	":man_tone5:‍:computer:",
	":man_tone5:‍:briefcase:",
	":man_tone5:‍:wrench:",
	":man_tone5:‍:microscope:",
	":man_tone5:‍:rocket:",
	":man_tone5:‍:fire_engine:",
	":man_tone5:‍⚕️",
	":man_tone5:‍:scales:",
	":man_tone5:‍:airplane:",
	":man_tone5:",
	":man:‍:ear_of_rice:",
	":man:‍:cooking:",
	":man:‍:mortar_board:",
	":man:‍:microphone:",
	":man:‍:art:",
	":man:‍:school:",
	":man:‍:factory:",
	":man:‍:boy:‍:boy:",
	":man:‍:boy:",
	":man:‍:girl:‍:boy:",
	":man:‍:girl:‍:girl:",
	":man:‍:girl:",
	":family_mmbb:",
	":family_mmb:",
	":family_mmgb:",
	":family_mmgg:",
	":family_mmg:",
	":family_mwbb:",
	":man:‍:woman:‍:boy:",
	":family_mwgb:",
	":family_mwgg:",
	":family_mwg:",
	":man:‍:computer:",
	":man:‍:briefcase:",
	":man:‍:wrench:",
	":man:‍:microscope:",
	":man:‍:rocket:",
	":man:‍:fire_engine:",
	":man:‍⚕️",
	":man:‍:scales:",
	":man:‍:airplane:",
	":couple_mm:",
	":kiss_mm:",
	":man:",
	":woman_tone1:‍:ear_of_rice:",
	":woman_tone1:‍:cooking:",
	":woman_tone1:‍:mortar_board:",
	":woman_tone1:‍:microphone:",
	":woman_tone1:‍:art:",
	":woman_tone1:‍:school:",
	":woman_tone1:‍:factory:",
	":woman_tone1:‍:computer:",
	":woman_tone1:‍:briefcase:",
	":woman_tone1:‍:wrench:",
	":woman_tone1:‍:microscope:",
	":woman_tone1:‍:rocket:",
	":woman_tone1:‍:fire_engine:",
	":woman_tone1:‍⚕️",
	":woman_tone1:‍:scales:",
	":woman_tone1:‍:airplane:",
	":woman_tone1:",
	":woman_tone2:‍:ear_of_rice:",
	":woman_tone2:‍:cooking:",
	":woman_tone2:‍:mortar_board:",
	":woman_tone2:‍:microphone:",
	":woman_tone2:‍:art:",
	":woman_tone2:‍:school:",
	":woman_tone2:‍:factory:",
	":woman_tone2:‍:computer:",
	":woman_tone2:‍:briefcase:",
	":woman_tone2:‍:wrench:",
	":woman_tone2:‍:microscope:",
	":woman_tone2:‍:rocket:",
	":woman_tone2:‍:fire_engine:",
	":woman_tone2:‍⚕️",
	":woman_tone2:‍:scales:",
	":woman_tone2:‍:airplane:",
	":woman_tone2:",
	":woman_tone3:‍:ear_of_rice:",
	":woman_tone3:‍:cooking:",
	":woman_tone3:‍:mortar_board:",
	":woman_tone3:‍:microphone:",
	":woman_tone3:‍:art:",
	":woman_tone3:‍:school:",
	":woman_tone3:‍:factory:",
	":woman_tone3:‍:computer:",
	":woman_tone3:‍:briefcase:",
	":woman_tone3:‍:wrench:",
	":woman_tone3:‍:microscope:",
	":woman_tone3:‍:rocket:",
	":woman_tone3:‍:fire_engine:",
	":woman_tone3:‍⚕️",
	":woman_tone3:‍:scales:",
	":woman_tone3:‍:airplane:",
	":woman_tone3:",
	":woman_tone4:‍:ear_of_rice:",
	":woman_tone4:‍:cooking:",
	":woman_tone4:‍:mortar_board:",
	":woman_tone4:‍:microphone:",
	":woman_tone4:‍:art:",
	":woman_tone4:‍:school:",
	":woman_tone4:‍:factory:",
	":woman_tone4:‍:computer:",
	":woman_tone4:‍:briefcase:",
	":woman_tone4:‍:wrench:",
	":woman_tone4:‍:microscope:",
	":woman_tone4:‍:rocket:",
	":woman_tone4:‍:fire_engine:",
	":woman_tone4:‍⚕️",
	":woman_tone4:‍:scales:",
	":woman_tone4:‍:airplane:",
	":woman_tone4:",
	":woman_tone5:‍:ear_of_rice:",
	":woman_tone5:‍:cooking:",
	":woman_tone5:‍:mortar_board:",
	":woman_tone5:‍:microphone:",
	":woman_tone5:‍:art:",
	":woman_tone5:‍:school:",
	":woman_tone5:‍:factory:",
	":woman_tone5:‍:computer:",
	":woman_tone5:‍:briefcase:",
	":woman_tone5:‍:wrench:",
	":woman_tone5:‍:microscope:",
	":woman_tone5:‍:rocket:",
	":woman_tone5:‍:fire_engine:",
	":woman_tone5:‍⚕️",
	":woman_tone5:‍:scales:",
	":woman_tone5:‍:airplane:",
	":woman_tone5:",
	":woman:‍:ear_of_rice:",
	":woman:‍:cooking:",
	":woman:‍:mortar_board:",
	":woman:‍:microphone:",
	":woman:‍:art:",
	":woman:‍:school:",
	":woman:‍:factory:",
	":woman:‍:boy:‍:boy:",
	":woman:‍:boy:",
	":woman:‍:girl:‍:boy:",
	":woman:‍:girl:‍:girl:",
	":woman:‍:girl:",
	":family_wwbb:",
	":family_wwb:",
	":family_wwgb:",
	":family_wwgg:",
	":family_wwg:",
	":woman:‍:computer:",
	":woman:‍:briefcase:",
	":woman:‍:wrench:",
	":woman:‍:microscope:",
	":woman:‍:rocket:",
	":woman:‍:fire_engine:",
	":woman:‍⚕️",
	":woman:‍:scales:",
	":woman:‍:airplane:",
	":woman:‍:heart:‍:man:",
	":couple_ww:",
	":woman:‍:heart:‍:kiss:‍:man:",
	":kiss_ww:",
	":woman:",
	":family::tone1:",
	":family::tone2:",
	":family::tone3:",
	":family::tone4:",
	":family::tone5:",
	":family:",
	":couple::tone1:",
	":couple::tone2:",
	":couple::tone3:",
	":couple::tone4:",
	":couple::tone5:",
	":couple:",
	":two_men_holding_hands::tone1:",
	":two_men_holding_hands::tone2:",
	":two_men_holding_hands::tone3:",
	":two_men_holding_hands::tone4:",
	":two_men_holding_hands::tone5:",
	":two_men_holding_hands:",
	":two_women_holding_hands::tone1:",
	":two_women_holding_hands::tone2:",
	":two_women_holding_hands::tone3:",
	":two_women_holding_hands::tone4:",
	":two_women_holding_hands::tone5:",
	":two_women_holding_hands:",
	":cop_tone1:‍♀️",
	":cop_tone1:‍♂️",
	":cop_tone1:",
	":cop_tone2:‍♀️",
	":cop_tone2:‍♂️",
	":cop_tone2:",
	":cop_tone3:‍♀️",
	":cop_tone3:‍♂️",
	":cop_tone3:",
	":cop_tone4:‍♀️",
	":cop_tone4:‍♂️",
	":cop_tone4:",
	":cop_tone5:‍♀️",
	":cop_tone5:‍♂️",
	":cop_tone5:",
	":cop:‍♀️",
	":cop:‍♂️",
	":cop:",
	":dancers::tone1:‍♀️",
	":dancers::tone1:‍♂️",
	":dancers::tone1:",
	":dancers::tone2:‍♀️",
	":dancers::tone2:‍♂️",
	":dancers::tone2:",
	":dancers::tone3:‍♀️",
	":dancers::tone3:‍♂️",
	":dancers::tone3:",
	":dancers::tone4:‍♀️",
	":dancers::tone4:‍♂️",
	":dancers::tone4:",
	":dancers::tone5:‍♀️",
	":dancers::tone5:‍♂️",
	":dancers::tone5:",
	":dancers:‍♀️",
	":dancers:‍♂️",
	":dancers:",
	":bride_with_veil_tone1:",
	":bride_with_veil_tone2:",
	":bride_with_veil_tone3:",
	":bride_with_veil_tone4:",
	":bride_with_veil_tone5:",
	":bride_with_veil:",
	":person_with_blond_hair_tone1:‍♀️",
	":person_with_blond_hair_tone1:‍♂️",
	":person_with_blond_hair_tone1:",
	":person_with_blond_hair_tone2:‍♀️",
	":person_with_blond_hair_tone2:‍♂️",
	":person_with_blond_hair_tone2:",
	":person_with_blond_hair_tone3:‍♀️",
	":person_with_blond_hair_tone3:‍♂️",
	":person_with_blond_hair_tone3:",
	":person_with_blond_hair_tone4:‍♀️",
	":person_with_blond_hair_tone4:‍♂️",
	":person_with_blond_hair_tone4:",
	":person_with_blond_hair_tone5:‍♀️",
	":person_with_blond_hair_tone5:‍♂️",
	":person_with_blond_hair_tone5:",
	":person_with_blond_hair:‍♀️",
	":person_with_blond_hair:‍♂️",
	":person_with_blond_hair:",
	":man_with_gua_pi_mao_tone1:",
	":man_with_gua_pi_mao_tone2:",
	":man_with_gua_pi_mao_tone3:",
	":man_with_gua_pi_mao_tone4:",
	":man_with_gua_pi_mao_tone5:",
	":man_with_gua_pi_mao:",
	":man_with_turban_tone1:‍♀️",
	":man_with_turban_tone1:‍♂️",
	":man_with_turban_tone1:",
	":man_with_turban_tone2:‍♀️",
	":man_with_turban_tone2:‍♂️",
	":man_with_turban_tone2:",
	":man_with_turban_tone3:‍♀️",
	":man_with_turban_tone3:‍♂️",
	":man_with_turban_tone3:",
	":man_with_turban_tone4:‍♀️",
	":man_with_turban_tone4:‍♂️",
	":man_with_turban_tone4:",
	":man_with_turban_tone5:‍♀️",
	":man_with_turban_tone5:‍♂️",
	":man_with_turban_tone5:",
	":man_with_turban:‍♀️",
	":man_with_turban:‍♂️",
	":man_with_turban:",
	":older_man_tone1:",
	":older_man_tone2:",
	":older_man_tone3:",
	":older_man_tone4:",
	":older_man_tone5:",
	":older_man:",
	":older_woman_tone1:",
	":older_woman_tone2:",
	":older_woman_tone3:",
	":older_woman_tone4:",
	":older_woman_tone5:",
	":older_woman:",
	":baby_tone1:",
	":baby_tone2:",
	":baby_tone3:",
	":baby_tone4:",
	":baby_tone5:",
	":baby:",
	":construction_worker_tone1:‍♀️",
	":construction_worker_tone1:‍♂️",
	":construction_worker_tone1:",
	":construction_worker_tone2:‍♀️",
	":construction_worker_tone2:‍♂️",
	":construction_worker_tone2:",
	":construction_worker_tone3:‍♀️",
	":construction_worker_tone3:‍♂️",
	":construction_worker_tone3:",
	":construction_worker_tone4:‍♀️",
	":construction_worker_tone4:‍♂️",
	":construction_worker_tone4:",
	":construction_worker_tone5:‍♀️",
	":construction_worker_tone5:‍♂️",
	":construction_worker_tone5:",
	":construction_worker:‍♀️",
	":construction_worker:‍♂️",
	":construction_worker:",
	":princess_tone1:",
	":princess_tone2:",
	":princess_tone3:",
	":princess_tone4:",
	":princess_tone5:",
	":princess:",
	":japanese_ogre:",
	":japanese_goblin:",
	":ghost:",
	":angel_tone1:",
	":angel_tone2:",
	":angel_tone3:",
	":angel_tone4:",
	":angel_tone5:",
	":angel:",
	":alien:",
	":space_invader:",
	":imp:",
	":skull:",
	":information_desk_person_tone1:‍♀️",
	":information_desk_person_tone1:‍♂️",
	":information_desk_person_tone1:",
	":information_desk_person_tone2:‍♀️",
	":information_desk_person_tone2:‍♂️",
	":information_desk_person_tone2:",
	":information_desk_person_tone3:‍♀️",
	":information_desk_person_tone3:‍♂️",
	":information_desk_person_tone3:",
	":information_desk_person_tone4:‍♀️",
	":information_desk_person_tone4:‍♂️",
	":information_desk_person_tone4:",
	":information_desk_person_tone5:‍♀️",
	":information_desk_person_tone5:‍♂️",
	":information_desk_person_tone5:",
	":information_desk_person:‍♀️",
	":information_desk_person:‍♂️",
	":information_desk_person:",
	":guardsman_tone1:‍♀️",
	":guardsman_tone1:‍♂️",
	":guardsman_tone1:",
	":guardsman_tone2:‍♀️",
	":guardsman_tone2:‍♂️",
	":guardsman_tone2:",
	":guardsman_tone3:‍♀️",
	":guardsman_tone3:‍♂️",
	":guardsman_tone3:",
	":guardsman_tone4:‍♀️",
	":guardsman_tone4:‍♂️",
	":guardsman_tone4:",
	":guardsman_tone5:‍♀️",
	":guardsman_tone5:‍♂️",
	":guardsman_tone5:",
	":guardsman:‍♀️",
	":guardsman:‍♂️",
	":guardsman:",
	":dancer_tone1:",
	":dancer_tone2:",
	":dancer_tone3:",
	":dancer_tone4:",
	":dancer_tone5:",
	":dancer:",
	":lipstick:",
	":nail_care_tone1:",
	":nail_care_tone2:",
	":nail_care_tone3:",
	":nail_care_tone4:",
	":nail_care_tone5:",
	":nail_care:",
	":massage_tone1:‍♀️",
	":massage_tone1:‍♂️",
	":massage_tone1:",
	":massage_tone2:‍♀️",
	":massage_tone2:‍♂️",
	":massage_tone2:",
	":massage_tone3:‍♀️",
	":massage_tone3:‍♂️",
	":massage_tone3:",
	":massage_tone4:‍♀️",
	":massage_tone4:‍♂️",
	":massage_tone4:",
	":massage_tone5:‍♀️",
	":massage_tone5:‍♂️",
	":massage_tone5:",
	":massage:‍♀️",
	":massage:‍♂️",
	":massage:",
	":haircut_tone1:‍♀️",
	":haircut_tone1:‍♂️",
	":haircut_tone1:",
	":haircut_tone2:‍♀️",
	":haircut_tone2:‍♂️",
	":haircut_tone2:",
	":haircut_tone3:‍♀️",
	":haircut_tone3:‍♂️",
	":haircut_tone3:",
	":haircut_tone4:‍♀️",
	":haircut_tone4:‍♂️",
	":haircut_tone4:",
	":haircut_tone5:‍♀️",
	":haircut_tone5:‍♂️",
	":haircut_tone5:",
	":haircut:‍♀️",
	":haircut:‍♂️",
	":haircut:",
	":barber:",
	":syringe:",
	":pill:",
	":kiss:",
	":love_letter:",
	":ring:",
	":gem:",
	":couplekiss:",
	":bouquet:",
	":couple_with_heart:",
	":wedding:",
	":heartbeat:",
	":broken_heart:",
	":two_hearts:",
	":sparkling_heart:",
	":heartpulse:",
	":cupid:",
	":blue_heart:",
	":green_heart:",
	":yellow_heart:",
	":purple_heart:",
	":gift_heart:",
	":revolving_hearts:",
	":heart_decoration:",
	":diamond_shape_with_a_dot_inside:",
	":bulb:",
	":anger:",
	":bomb:",
	":zzz:",
	":boom:",
	":sweat_drops:",
	":droplet:",
	":dash:",
	":poop:",
	":muscle_tone1:",
	":muscle_tone2:",
	":muscle_tone3:",
	":muscle_tone4:",
	":muscle_tone5:",
	":muscle:",
	":dizzy:",
	":speech_balloon:",
	":thought_balloon:",
	":white_flower:",
	":100:",
	":moneybag:",
	":currency_exchange:",
	":heavy_dollar_sign:",
	":credit_card:",
	":yen:",
	":dollar:",
	":euro:",
	":pound:",
	":money_with_wings:",
	":chart:",
	":seat:",
	":computer:",
	":briefcase:",
	":minidisc:",
	":floppy_disk:",
	":cd:",
	":dvd:",
	":file_folder:",
	":open_file_folder:",
	":page_with_curl:",
	":page_facing_up:",
	":date:",
	":calendar:",
	":card_index:",
	":chart_with_upwards_trend:",
	":chart_with_downwards_trend:",
	":bar_chart:",
	":clipboard:",
	":pushpin:",
	":round_pushpin:",
	":paperclip:",
	":straight_ruler:",
	":triangular_ruler:",
	":bookmark_tabs:",
	":ledger:",
	":notebook:",
	":notebook_with_decorative_cover:",
	":closed_book:",
	":book:",
	":green_book:",
	":blue_book:",
	":orange_book:",
	":books:",
	":name_badge:",
	":scroll:",
	":pencil:",
	":telephone_receiver:",
	":pager:",
	":fax:",
	":satellite:",
	":loudspeaker:",
	":mega:",
	":outbox_tray:",
	":inbox_tray:",
	":package:",
	":e-mail:",
	":incoming_envelope:",
	":envelope_with_arrow:",
	":mailbox_closed:",
	":mailbox:",
	":mailbox_with_mail:",
	":mailbox_with_no_mail:",
	":postbox:",
	":postal_horn:",
	":newspaper:",
	":iphone:",
	":calling:",
	":vibration_mode:",
	":mobile_phone_off:",
	":no_mobile_phones:",
	":signal_strength:",
	":camera:",
	":camera_with_flash:",
	":video_camera:",
	":tv:",
	":radio:",
	":vhs:",
	":projector:",
	":prayer_beads:",
	":twisted_rightwards_arrows:",
	":repeat:",
	":repeat_one:",
	":arrows_clockwise:",
	":arrows_counterclockwise:",
	":low_brightness:",
	":high_brightness:",
	":mute:",
	":speaker:",
	":sound:",
	":loud_sound:",
	":battery:",
	":electric_plug:",
	":mag:",
	":mag_right:",
	":lock_with_ink_pen:",
	":closed_lock_with_key:",
	":key:",
	":lock:",
	":unlock:",
	":bell:",
	":no_bell:",
	":bookmark:",
	":link:",
	":radio_button:",
	":back:",
	":end:",
	":on:",
	":soon:",
	":top:",
	":underage:",
	":keycap_ten:",
	":capital_abcd:",
	":abcd:",
	":1234:",
	":symbols:",
	":abc:",
	":fire:",
	":flashlight:",
	":wrench:",
	":hammer:",
	":nut_and_bolt:",
	":knife:",
	":gun:",
	":microscope:",
	":telescope:",
	":crystal_ball:",
	":six_pointed_star:",
	":beginner:",
	":trident:",
	":black_square_button:",
	":white_square_button:",
	":red_circle:",
	":large_blue_circle:",
	":large_orange_diamond:",
	":large_blue_diamond:",
	":small_orange_diamond:",
	":small_blue_diamond:",
	":small_red_triangle:",
	":small_red_triangle_down:",
	":arrow_up_small:",
	":arrow_down_small:",
	":om_symbol:",
	":dove:",
	":kaaba:",
	":mosque:",
	":synagogue:",
	":menorah:",
	":clock1:",
	":clock2:",
	":clock3:",
	":clock4:",
	":clock5:",
	":clock6:",
	":clock7:",
	":clock8:",
	":clock9:",
	":clock10:",
	":clock11:",
	":clock12:",
	":clock130:",
	":clock230:",
	":clock330:",
	":clock430:",
	":clock530:",
	":clock630:",
	":clock730:",
	":clock830:",
	":clock930:",
	":clock1030:",
	":clock1130:",
	":clock1230:",
	":candle:",
	":clock:",
	":hole:",
	":levitate::tone1:",
	":levitate::tone2:",
	":levitate::tone3:",
	":levitate::tone4:",
	":levitate::tone5:",
	":levitate:",
	":spy_tone1:‍♀️",
	":spy_tone1:‍♂️",
	":spy_tone1:",
	":spy_tone2:‍♀️",
	":spy_tone2:‍♂️",
	":spy_tone2:",
	":spy_tone3:‍♀️",
	":spy_tone3:‍♂️",
	":spy_tone3:",
	":spy_tone4:‍♀️",
	":spy_tone4:‍♂️",
	":spy_tone4:",
	":spy_tone5:‍♀️",
	":spy_tone5:‍♂️",
	":spy_tone5:",
	":spy:‍♀️",
	":spy:‍♂️",
	":spy:",
	":dark_sunglasses:",
	":spider:",
	":spider_web:",
	":joystick:",
	":man_dancing_tone1:",
	":man_dancing_tone2:",
	":man_dancing_tone3:",
	":man_dancing_tone4:",
	":man_dancing_tone5:",
	":man_dancing:",
	":paperclips:",
	":pen_ballpoint:",
	":pen_fountain:",
	":paintbrush:",
	":crayon:",
	":hand_splayed_tone1:",
	":hand_splayed_tone2:",
	":hand_splayed_tone3:",
	":hand_splayed_tone4:",
	":hand_splayed_tone5:",
	":hand_splayed:",
	":middle_finger_tone1:",
	":middle_finger_tone2:",
	":middle_finger_tone3:",
	":middle_finger_tone4:",
	":middle_finger_tone5:",
	":middle_finger:",
	":vulcan_tone1:",
	":vulcan_tone2:",
	":vulcan_tone3:",
	":vulcan_tone4:",
	":vulcan_tone5:",
	":vulcan:",
	":black_heart:",
	":desktop:",
	":printer:",
	":mouse_three_button:",
	":trackball:",
	":frame_photo:",
	":dividers:",
	":card_box:",
	":file_cabinet:",
	":wastebasket:",
	":notepad_spiral:",
	":calendar_spiral:",
	":compression:",
	":key2:",
	":newspaper2:",
	":dagger:",
	":speaking_head:",
	":speech_left:",
	":anger_right:",
	":ballot_box:",
	":map:",
	":mount_fuji:",
	":tokyo_tower:",
	":statue_of_liberty:",
	":japan:",
	":moyai:",
	":grinning:",
	":grin:",
	":joy:",
	":smiley:",
	":smile:",
	":sweat_smile:",
	":laughing:",
	":innocent:",
	":smiling_imp:",
	":wink:",
	":blush:",
	":yum:",
	":relieved:",
	":heart_eyes:",
	":sunglasses:",
	":smirk:",
	":neutral_face:",
	":expressionless:",
	":unamused:",
	":sweat:",
	":pensive:",
	":confused:",
	":confounded:",
	":kissing:",
	":kissing_heart:",
	":kissing_smiling_eyes:",
	":kissing_closed_eyes:",
	":stuck_out_tongue:",
	":stuck_out_tongue_winking_eye:",
	":stuck_out_tongue_closed_eyes:",
	":disappointed:",
	":worried:",
	":angry:",
	":rage:",
	":cry:",
	":persevere:",
	":triumph:",
	":disappointed_relieved:",
	":frowning:",
	":anguished:",
	":fearful:",
	":weary:",
	":sleepy:",
	":tired_face:",
	":grimacing:",
	":sob:",
	":open_mouth:",
	":hushed:",
	":cold_sweat:",
	":scream:",
	":astonished:",
	":flushed:",
	":sleeping:",
	":dizzy_face:",
	":no_mouth:",
	":mask:",
	":smile_cat:",
	":joy_cat:",
	":smiley_cat:",
	":heart_eyes_cat:",
	":smirk_cat:",
	":kissing_cat:",
	":pouting_cat:",
	":crying_cat_face:",
	":scream_cat:",
	":slight_frown:",
	":slight_smile:",
	":upside_down:",
	":rolling_eyes:",
	":no_good_tone1:‍♀️",
	":no_good_tone1:‍♂️",
	":no_good_tone1:",
	":no_good_tone2:‍♀️",
	":no_good_tone2:‍♂️",
	":no_good_tone2:",
	":no_good_tone3:‍♀️",
	":no_good_tone3:‍♂️",
	":no_good_tone3:",
	":no_good_tone4:‍♀️",
	":no_good_tone4:‍♂️",
	":no_good_tone4:",
	":no_good_tone5:‍♀️",
	":no_good_tone5:‍♂️",
	":no_good_tone5:",
	":no_good:‍♀️",
	":no_good:‍♂️",
	":no_good:",
	":ok_woman_tone1:‍♀️",
	":ok_woman_tone1:‍♂️",
	":ok_woman_tone1:",
	":ok_woman_tone2:‍♀️",
	":ok_woman_tone2:‍♂️",
	":ok_woman_tone2:",
	":ok_woman_tone3:‍♀️",
	":ok_woman_tone3:‍♂️",
	":ok_woman_tone3:",
	":ok_woman_tone4:‍♀️",
	":ok_woman_tone4:‍♂️",
	":ok_woman_tone4:",
	":ok_woman_tone5:‍♀️",
	":ok_woman_tone5:‍♂️",
	":ok_woman_tone5:",
	":ok_woman:‍♀️",
	":ok_woman:‍♂️",
	":ok_woman:",
	":bow_tone1:‍♀️",
	":bow_tone1:‍♂️",
	":bow_tone1:",
	":bow_tone2:‍♀️",
	":bow_tone2:‍♂️",
	":bow_tone2:",
	":bow_tone3:‍♀️",
	":bow_tone3:‍♂️",
	":bow_tone3:",
	":bow_tone4:‍♀️",
	":bow_tone4:‍♂️",
	":bow_tone4:",
	":bow_tone5:‍♀️",
	":bow_tone5:‍♂️",
	":bow_tone5:",
	":bow:‍♀️",
	":bow:‍♂️",
	":bow:",
	":see_no_evil:",
	":hear_no_evil:",
	":speak_no_evil:",
	":raising_hand_tone1:‍♀️",
	":raising_hand_tone1:‍♂️",
	":raising_hand_tone1:",
	":raising_hand_tone2:‍♀️",
	":raising_hand_tone2:‍♂️",
	":raising_hand_tone2:",
	":raising_hand_tone3:‍♀️",
	":raising_hand_tone3:‍♂️",
	":raising_hand_tone3:",
	":raising_hand_tone4:‍♀️",
	":raising_hand_tone4:‍♂️",
	":raising_hand_tone4:",
	":raising_hand_tone5:‍♀️",
	":raising_hand_tone5:‍♂️",
	":raising_hand_tone5:",
	":raising_hand:‍♀️",
	":raising_hand:‍♂️",
	":raising_hand:",
	":raised_hands_tone1:",
	":raised_hands_tone2:",
	":raised_hands_tone3:",
	":raised_hands_tone4:",
	":raised_hands_tone5:",
	":raised_hands:",
	":person_frowning_tone1:‍♀️",
	":person_frowning_tone1:‍♂️",
	":person_frowning_tone1:",
	":person_frowning_tone2:‍♀️",
	":person_frowning_tone2:‍♂️",
	":person_frowning_tone2:",
	":person_frowning_tone3:‍♀️",
	":person_frowning_tone3:‍♂️",
	":person_frowning_tone3:",
	":person_frowning_tone4:‍♀️",
	":person_frowning_tone4:‍♂️",
	":person_frowning_tone4:",
	":person_frowning_tone5:‍♀️",
	":person_frowning_tone5:‍♂️",
	":person_frowning_tone5:",
	":person_frowning:‍♀️",
	":person_frowning:‍♂️",
	":person_frowning:",
	":person_with_pouting_face_tone1:‍♀️",
	":person_with_pouting_face_tone1:‍♂️",
	":person_with_pouting_face_tone1:",
	":person_with_pouting_face_tone2:‍♀️",
	":person_with_pouting_face_tone2:‍♂️",
	":person_with_pouting_face_tone2:",
	":person_with_pouting_face_tone3:‍♀️",
	":person_with_pouting_face_tone3:‍♂️",
	":person_with_pouting_face_tone3:",
	":person_with_pouting_face_tone4:‍♀️",
	":person_with_pouting_face_tone4:‍♂️",
	":person_with_pouting_face_tone4:",
	":person_with_pouting_face_tone5:‍♀️",
	":person_with_pouting_face_tone5:‍♂️",
	":person_with_pouting_face_tone5:",
	":person_with_pouting_face:‍♀️",
	":person_with_pouting_face:‍♂️",
	":person_with_pouting_face:",
	":pray_tone1:",
	":pray_tone2:",
	":pray_tone3:",
	":pray_tone4:",
	":pray_tone5:",
	":pray:",
	":rocket:",
	":helicopter:",
	":steam_locomotive:",
	":railway_car:",
	":bullettrain_side:",
	":bullettrain_front:",
	":train2:",
	":metro:",
	":light_rail:",
	":station:",
	":tram:",
	":train:",
	":bus:",
	":oncoming_bus:",
	":trolleybus:",
	":busstop:",
	":minibus:",
	":ambulance:",
	":fire_engine:",
	":police_car:",
	":oncoming_police_car:",
	":taxi:",
	":oncoming_taxi:",
	":red_car:",
	":oncoming_automobile:",
	":blue_car:",
	":truck:",
	":articulated_lorry:",
	":tractor:",
	":monorail:",
	":mountain_railway:",
	":suspension_railway:",
	":mountain_cableway:",
	":aerial_tramway:",
	":ship:",
	":rowboat_tone1:‍♀️",
	":rowboat_tone1:‍♂️",
	":rowboat_tone1:",
	":rowboat_tone2:‍♀️",
	":rowboat_tone2:‍♂️",
	":rowboat_tone2:",
	":rowboat_tone3:‍♀️",
	":rowboat_tone3:‍♂️",
	":rowboat_tone3:",
	":rowboat_tone4:‍♀️",
	":rowboat_tone4:‍♂️",
	":rowboat_tone4:",
	":rowboat_tone5:‍♀️",
	":rowboat_tone5:‍♂️",
	":rowboat_tone5:",
	":rowboat:‍♀️",
	":rowboat:‍♂️",
	":rowboat:",
	":speedboat:",
	":traffic_light:",
	":vertical_traffic_light:",
	":construction:",
	":rotating_light:",
	":triangular_flag_on_post:",
	":door:",
	":no_entry_sign:",
	":smoking:",
	":no_smoking:",
	":put_litter_in_its_place:",
	":do_not_litter:",
	":potable_water:",
	":non-potable_water:",
	":bike:",
	":no_bicycles:",
	":bicyclist_tone1:‍♀️",
	":bicyclist_tone1:‍♂️",
	":bicyclist_tone1:",
	":bicyclist_tone2:‍♀️",
	":bicyclist_tone2:‍♂️",
	":bicyclist_tone2:",
	":bicyclist_tone3:‍♀️",
	":bicyclist_tone3:‍♂️",
	":bicyclist_tone3:",
	":bicyclist_tone4:‍♀️",
	":bicyclist_tone4:‍♂️",
	":bicyclist_tone4:",
	":bicyclist_tone5:‍♀️",
	":bicyclist_tone5:‍♂️",
	":bicyclist_tone5:",
	":bicyclist:‍♀️",
	":bicyclist:‍♂️",
	":bicyclist:",
	":mountain_bicyclist_tone1:‍♀️",
	":mountain_bicyclist_tone1:‍♂️",
	":mountain_bicyclist_tone1:",
	":mountain_bicyclist_tone2:‍♀️",
	":mountain_bicyclist_tone2:‍♂️",
	":mountain_bicyclist_tone2:",
	":mountain_bicyclist_tone3:‍♀️",
	":mountain_bicyclist_tone3:‍♂️",
	":mountain_bicyclist_tone3:",
	":mountain_bicyclist_tone4:‍♀️",
	":mountain_bicyclist_tone4:‍♂️",
	":mountain_bicyclist_tone4:",
	":mountain_bicyclist_tone5:‍♀️",
	":mountain_bicyclist_tone5:‍♂️",
	":mountain_bicyclist_tone5:",
	":mountain_bicyclist:‍♀️",
	":mountain_bicyclist:‍♂️",
	":mountain_bicyclist:",
	":walking_tone1:‍♀️",
	":walking_tone1:‍♂️",
	":walking_tone1:",
	":walking_tone2:‍♀️",
	":walking_tone2:‍♂️",
	":walking_tone2:",
	":walking_tone3:‍♀️",
	":walking_tone3:‍♂️",
	":walking_tone3:",
	":walking_tone4:‍♀️",
	":walking_tone4:‍♂️",
	":walking_tone4:",
	":walking_tone5:‍♀️",
	":walking_tone5:‍♂️",
	":walking_tone5:",
	":walking:‍♀️",
	":walking:‍♂️",
	":walking:",
	":no_pedestrians:",
	":children_crossing:",
	":mens:",
	":womens:",
	":restroom:",
	":baby_symbol:",
	":toilet:",
	":wc:",
	":shower:",
	":bath_tone1:",
	":bath_tone2:",
	":bath_tone3:",
	":bath_tone4:",
	":bath_tone5:",
	":bath:",
	":bathtub:",
	":passport_control:",
	":customs:",
	":baggage_claim:",
	":left_luggage:",
	":couch:",
	":sleeping_accommodation::tone1:",
	":sleeping_accommodation::tone2:",
	":sleeping_accommodation::tone3:",
	":sleeping_accommodation::tone4:",
	":sleeping_accommodation::tone5:",
	":sleeping_accommodation:",
	":shopping_bags:",
	":bellhop:",
	":bed:",
	":place_of_worship:",
	":octagonal_sign:",
	":shopping_cart:",
	":tools:",
	":shield:",
	":oil:",
	":motorway:",
	":railway_track:",
	":motorboat:",
	":airplane_small:",
	":airplane_departure:",
	":airplane_arriving:",
	":satellite_orbital:",
	":cruise_ship:",
	":scooter:",
	":motor_scooter:",
	":canoe:",
	":zipper_mouth:",
	":money_mouth:",
	":thermometer_face:",
	":nerd:",
	":thinking:",
	":head_bandage:",
	":robot:",
	":hugging:",
	":metal_tone1:",
	":metal_tone2:",
	":metal_tone3:",
	":metal_tone4:",
	":metal_tone5:",
	":metal:",
	":call_me_tone1:",
	":call_me_tone2:",
	":call_me_tone3:",
	":call_me_tone4:",
	":call_me_tone5:",
	":call_me:",
	":raised_back_of_hand_tone1:",
	":raised_back_of_hand_tone2:",
	":raised_back_of_hand_tone3:",
	":raised_back_of_hand_tone4:",
	":raised_back_of_hand_tone5:",
	":raised_back_of_hand:",
	":left_facing_fist_tone1:",
	":left_facing_fist_tone2:",
	":left_facing_fist_tone3:",
	":left_facing_fist_tone4:",
	":left_facing_fist_tone5:",
	":left_facing_fist:",
	":right_facing_fist_tone1:",
	":right_facing_fist_tone2:",
	":right_facing_fist_tone3:",
	":right_facing_fist_tone4:",
	":right_facing_fist_tone5:",
	":right_facing_fist:",
	":handshake_tone1:",
	":handshake_tone2:",
	":handshake_tone3:",
	":handshake_tone4:",
	":handshake_tone5:",
	":handshake:",
	":fingers_crossed_tone1:",
	":fingers_crossed_tone2:",
	":fingers_crossed_tone3:",
	":fingers_crossed_tone4:",
	":fingers_crossed_tone5:",
	":fingers_crossed:",
	":cowboy:",
	":clown:",
	":nauseated_face:",
	":rofl:",
	":drooling_face:",
	":lying_face:",
	":face_palm_tone1:‍♀️",
	":face_palm_tone1:‍♂️",
	":face_palm_tone1:",
	":face_palm_tone2:‍♀️",
	":face_palm_tone2:‍♂️",
	":face_palm_tone2:",
	":face_palm_tone3:‍♀️",
	":face_palm_tone3:‍♂️",
	":face_palm_tone3:",
	":face_palm_tone4:‍♀️",
	":face_palm_tone4:‍♂️",
	":face_palm_tone4:",
	":face_palm_tone5:‍♀️",
	":face_palm_tone5:‍♂️",
	":face_palm_tone5:",
	":face_palm:‍♀️",
	":face_palm:‍♂️",
	":face_palm:",
	":sneezing_face:",
	":pregnant_woman_tone1:",
	":pregnant_woman_tone2:",
	":pregnant_woman_tone3:",
	":pregnant_woman_tone4:",
	":pregnant_woman_tone5:",
	":pregnant_woman:",
	":selfie_tone1:",
	":selfie_tone2:",
	":selfie_tone3:",
	":selfie_tone4:",
	":selfie_tone5:",
	":selfie:",
	":prince_tone1:",
	":prince_tone2:",
	":prince_tone3:",
	":prince_tone4:",
	":prince_tone5:",
	":prince:",
	":man_in_tuxedo_tone1:",
	":man_in_tuxedo_tone2:",
	":man_in_tuxedo_tone3:",
	":man_in_tuxedo_tone4:",
	":man_in_tuxedo_tone5:",
	":man_in_tuxedo:",
	":mrs_claus_tone1:",
	":mrs_claus_tone2:",
	":mrs_claus_tone3:",
	":mrs_claus_tone4:",
	":mrs_claus_tone5:",
	":mrs_claus:",
	":shrug_tone1:‍♀️",
	":shrug_tone1:‍♂️",
	":shrug_tone1:",
	":shrug_tone2:‍♀️",
	":shrug_tone2:‍♂️",
	":shrug_tone2:",
	":shrug_tone3:‍♀️",
	":shrug_tone3:‍♂️",
	":shrug_tone3:",
	":shrug_tone4:‍♀️",
	":shrug_tone4:‍♂️",
	":shrug_tone4:",
	":shrug_tone5:‍♀️",
	":shrug_tone5:‍♂️",
	":shrug_tone5:",
	":shrug:‍♀️",
	":shrug:‍♂️",
	":shrug:",
	":cartwheel_tone1:‍♀️",
	":cartwheel_tone1:‍♂️",
	":cartwheel_tone1:",
	":cartwheel_tone2:‍♀️",
	":cartwheel_tone2:‍♂️",
	":cartwheel_tone2:",
	":cartwheel_tone3:‍♀️",
	":cartwheel_tone3:‍♂️",
	":cartwheel_tone3:",
	":cartwheel_tone4:‍♀️",
	":cartwheel_tone4:‍♂️",
	":cartwheel_tone4:",
	":cartwheel_tone5:‍♀️",
	":cartwheel_tone5:‍♂️",
	":cartwheel_tone5:",
	":cartwheel:‍♀️",
	":cartwheel:‍♂️",
	":cartwheel:",
	":juggling_tone1:‍♀️",
	":juggling_tone1:‍♂️",
	":juggling_tone1:",
	":juggling_tone2:‍♀️",
	":juggling_tone2:‍♂️",
	":juggling_tone2:",
	":juggling_tone3:‍♀️",
	":juggling_tone3:‍♂️",
	":juggling_tone3:",
	":juggling_tone4:‍♀️",
	":juggling_tone4:‍♂️",
	":juggling_tone4:",
	":juggling_tone5:‍♀️",
	":juggling_tone5:‍♂️",
	":juggling_tone5:",
	":juggling:‍♀️",
	":juggling:‍♂️",
	":juggling:",
	":fencer:",
	":wrestlers_tone1:‍♀️",
	":wrestlers_tone1:‍♂️",
	":wrestlers_tone1:",
	":wrestlers_tone2:‍♀️",
	":wrestlers_tone2:‍♂️",
	":wrestlers_tone2:",
	":wrestlers_tone3:‍♀️",
	":wrestlers_tone3:‍♂️",
	":wrestlers_tone3:",
	":wrestlers_tone4:‍♀️",
	":wrestlers_tone4:‍♂️",
	":wrestlers_tone4:",
	":wrestlers_tone5:‍♀️",
	":wrestlers_tone5:‍♂️",
	":wrestlers_tone5:",
	":wrestlers:‍♀️",
	":wrestlers:‍♂️",
	":wrestlers:",
	":water_polo_tone1:‍♀️",
	":water_polo_tone1:‍♂️",
	":water_polo_tone1:",
	":water_polo_tone2:‍♀️",
	":water_polo_tone2:‍♂️",
	":water_polo_tone2:",
	":water_polo_tone3:‍♀️",
	":water_polo_tone3:‍♂️",
	":water_polo_tone3:",
	":water_polo_tone4:‍♀️",
	":water_polo_tone4:‍♂️",
	":water_polo_tone4:",
	":water_polo_tone5:‍♀️",
	":water_polo_tone5:‍♂️",
	":water_polo_tone5:",
	":water_polo:‍♀️",
	":water_polo:‍♂️",
	":water_polo:",
	":handball_tone1:‍♀️",
	":handball_tone1:‍♂️",
	":handball_tone1:",
	":handball_tone2:‍♀️",
	":handball_tone2:‍♂️",
	":handball_tone2:",
	":handball_tone3:‍♀️",
	":handball_tone3:‍♂️",
	":handball_tone3:",
	":handball_tone4:‍♀️",
	":handball_tone4:‍♂️",
	":handball_tone4:",
	":handball_tone5:‍♀️",
	":handball_tone5:‍♂️",
	":handball_tone5:",
	":handball:‍♀️",
	":handball:‍♂️",
	":handball:",
	":wilted_rose:",
	":drum:",
	":champagne_glass:",
	":tumbler_glass:",
	":spoon:",
	":goal:",
	":first_place:",
	":second_place:",
	":third_place:",
	":boxing_glove:",
	":martial_arts_uniform:",
	":croissant:",
	":avocado:",
	":cucumber:",
	":bacon:",
	":potato:",
	":carrot:",
	":french_bread:",
	":salad:",
	":shallow_pan_of_food:",
	":stuffed_flatbread:",
	":egg:",
	":milk:",
	":peanuts:",
	":kiwi:",
	":pancakes:",
	":crab:",
	":lion_face:",
	":scorpion:",
	":turkey:",
	":unicorn:",
	":eagle:",
	":duck:",
	":bat:",
	":shark:",
	":owl:",
	":fox:",
	":butterfly:",
	":deer:",
	":gorilla:",
	":lizard:",
	":rhino:",
	":shrimp:",
	":squid:",
	":cheese:",
	":bangbang:",
	":interrobang:",
	":tm:",
	":information_source:",
	":left_right_arrow:",
	":arrow_up_down:",
	":arrow_upper_left:",
	":arrow_upper_right:",
	":arrow_lower_right:",
	":arrow_lower_left:",
	":leftwards_arrow_with_hook:",
	":arrow_right_hook:",
	":hash:",
	":watch:",
	":hourglass:",
	":keyboard:",
	":eject:",
	":fast_forward:",
	":rewind:",
	":arrow_double_up:",
	":arrow_double_down:",
	":track_next:",
	":track_previous:",
	":play_pause:",
	":alarm_clock:",
	":stopwatch:",
	":timer:",
	":hourglass_flowing_sand:",
	":pause_button:",
	":stop_button:",
	":record_button:",
	":m:",
	":black_small_square:",
	":white_small_square:",
	":arrow_forward:",
	":arrow_backward:",
	":white_medium_square:",
	":black_medium_square:",
	":white_medium_small_square:",
	":black_medium_small_square:",
	":sunny:",
	":cloud:",
	":umbrella2:",
	":snowman2:",
	":comet:",
	":telephone:",
	":ballot_box_with_check:",
	":umbrella:",
	":coffee:",
	":shamrock:",
	":point_up_tone1:",
	":point_up_tone2:",
	":point_up_tone3:",
	":point_up_tone4:",
	":point_up_tone5:",
	":point_up:",
	":skull_crossbones:",
	":radioactive:",
	":biohazard:",
	":orthodox_cross:",
	":star_and_crescent:",
	":peace:",
	":yin_yang:",
	":wheel_of_dharma:",
	":frowning2:",
	":relaxed:",
	"♀",
	"♂",
	":aries:",
	":taurus:",
	":gemini:",
	":cancer:",
	":leo:",
	":virgo:",
	":libra:",
	":scorpius:",
	":sagittarius:",
	":capricorn:",
	":aquarius:",
	":pisces:",
	":spades:",
	":clubs:",
	":hearts:",
	":diamonds:",
	":hotsprings:",
	":recycle:",
	":wheelchair:",
	":hammer_pick:",
	":anchor:",
	":crossed_swords:",
	"⚕",
	":scales:",
	":alembic:",
	":gear:",
	":atom:",
	":fleur-de-lis:",
	":warning:",
	":zap:",
	":white_circle:",
	":black_circle:",
	":coffin:",
	":urn:",
	":soccer:",
	":baseball:",
	":snowman:",
	":partly_sunny:",
	":thunder_cloud_rain:",
	":ophiuchus:",
	":pick:",
	":helmet_with_cross:",
	":chains:",
	":no_entry:",
	":shinto_shrine:",
	":church:",
	":mountain:",
	":beach_umbrella:",
	":fountain:",
	":golf:",
	":ferry:",
	":sailboat:",
	":skier::tone1:",
	":skier::tone2:",
	":skier::tone3:",
	":skier::tone4:",
	":skier::tone5:",
	":skier:",
	":ice_skate:",
	":basketball_player_tone1:‍♀️",
	":basketball_player_tone1:‍♂️",
	":basketball_player_tone1:",
	":basketball_player_tone2:‍♀️",
	":basketball_player_tone2:‍♂️",
	":basketball_player_tone2:",
	":basketball_player_tone3:‍♀️",
	":basketball_player_tone3:‍♂️",
	":basketball_player_tone3:",
	":basketball_player_tone4:‍♀️",
	":basketball_player_tone4:‍♂️",
	":basketball_player_tone4:",
	":basketball_player_tone5:‍♀️",
	":basketball_player_tone5:‍♂️",
	":basketball_player_tone5:",
	":basketball_player:‍♀️",
	":basketball_player:‍♂️",
	":basketball_player:",
	":tent:",
	":fuelpump:",
	":scissors:",
	":white_check_mark:",
	":airplane:",
	":envelope:",
	":fist_tone1:",
	":fist_tone2:",
	":fist_tone3:",
	":fist_tone4:",
	":fist_tone5:",
	":fist:",
	":raised_hand_tone1:",
	":raised_hand_tone2:",
	":raised_hand_tone3:",
	":raised_hand_tone4:",
	":raised_hand_tone5:",
	":raised_hand:",
	":v_tone1:",
	":v_tone2:",
	":v_tone3:",
	":v_tone4:",
	":v_tone5:",
	":v:",
	":writing_hand_tone1:",
	":writing_hand_tone2:",
	":writing_hand_tone3:",
	":writing_hand_tone4:",
	":writing_hand_tone5:",
	":writing_hand:",
	":pencil2:",
	":black_nib:",
	":heavy_check_mark:",
	":heavy_multiplication_x:",
	":cross:",
	":star_of_david:",
	":sparkles:",
	":eight_spoked_asterisk:",
	":eight_pointed_black_star:",
	":snowflake:",
	":sparkle:",
	":x:",
	":negative_squared_cross_mark:",
	":question:",
	":grey_question:",
	":grey_exclamation:",
	":exclamation:",
	":heart_exclamation:",
	":heart:",
	":heavy_plus_sign:",
	":heavy_minus_sign:",
	":heavy_division_sign:",
	":arrow_right:",
	":curly_loop:",
	":loop:",
	":arrow_heading_up:",
	":arrow_heading_down:",
	":asterisk:",
	":arrow_left:",
	":arrow_up:",
	":arrow_down:",
	":black_large_square:",
	":white_large_square:",
	":star:",
	":o:",
	":zero:",
	":wavy_dash:",
	":part_alternation_mark:",
	":one:",
	":two:",
	":congratulations:",
	":secret:",
	":three:",
	":four:",
	":five:",
	":six:",
	":seven:",
	":eight:",
	":nine:",
	":copyright:",
	":registered:",
	""
];

frappe.ui.emoji_map = (function() {
	const map = {};
	for(let i = 0; i < frappe.ui.emojis.length; i++) {
		map[frappe.ui.emoji_keywords[i]] = frappe.ui.emojis[i];
	}
	return map;
})();
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/colors.js
 */
// Copyright (c) 2017, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.ui");

frappe.ui.color_map = {
	red: ["#ffc4c4", "#ff8989", "#ff4d4d", "#a83333"],
	brown: ["#ffe8cd", "#ffd19c", "#ffb868", "#a87945"],
	orange: ["#ffd2c2", "#ffa685", "#ff7846", "#a85b5b"],
	peach: ["#ffd7d7", "#ffb1b1", "#ff8989", "#a84f2e"],
	yellow: ["#fffacd", "#fff168", "#fff69c", "#a89f45"],
	yellowgreen: ["#ebf8cc", "#d9f399", "#c5ec63", "#7b933d"],
	green: ["#cef6d1", "#9deca2", "#6be273", "#428b46"],
	cyan: ["#d2f8ed", "#a4f3dd", "#77ecca", "#49937e"],
	skyblue: ["#d2f1ff", "#a6e4ff", "#78d6ff", "#4f8ea8"],
	blue: ["#d2d2ff", "#a3a3ff", "#7575ff", "#4d4da8"],
	purple: ["#dac7ff", "#b592ff", "#8e58ff", "#5e3aa8"],
	pink: ["#f8d4f8", "#f3aaf0", "#ec7dea", "#934f92"],
	white: ["#d1d8dd", "#fafbfc", "#ffffff", ""],
	black: ["#8D99A6", "#6c7680", "#36414c", "#212a33"]
};

frappe.ui.color = {
	get: function(color_name, shade) {
		if(color_name && shade) return this.get_color_shade(color_name, shade);
		if(color_name) return this.get_color_shade(color_name, 'default');
		return frappe.ui.color_map;
	},
	get_color: function(color_name) {
		const color_names = Object.keys(frappe.ui.color_map);
		if(color_names.includes(color_name)) {
			return frappe.ui.color_map[color_name];
		} else {
			// eslint-disable-next-line
			console.warn(`'color_name' can be one of ${color_names} and not ${color_name}`);
		}
	},
	get_color_shade: function(color_name, shade) {
		const shades = {
			'default': 2,
			'light': 1,
			'extra-light': 0,
			'dark': 3
		};

		if(Object.keys(shades).includes(shade)) {
			return frappe.ui.color_map[color_name][shades[shade]];
		} else {
			// eslint-disable-next-line
			console.warn(`'shade' can be one of ${Object.keys(shades)} and not ${shade}`);
		}
	},
	all: function() {
		return Object.values(frappe.ui.color_map)
			.reduce((acc, curr) => acc.concat(curr) , []);
	},
	names: function() {
		return Object.keys(frappe.ui.color_map);
	},
	is_standard: function(color_name) {
		if(!color_name) return false;
		if(color_name.startsWith('#')) {
			return this.all().includes(color_name);
		}
		return this.names().includes(color_name);
	},
	get_color_name: function(hex) {
		for (const key in frappe.ui.color_map) {
			const colors = frappe.ui.color_map[key];
			if (colors.includes(hex)) return key;
		}
	},
	get_contrast_color: function(hex) {
		if(!this.validate_hex(hex)) {
			return;
		}
		if(!this.is_standard(hex)) {
			const brightness = this.brightness(hex);
			if(brightness < 128) {
				return this.lighten(hex, 0.5);
			}
			return this.lighten(hex, -0.5);
		}

		const color_name = this.get_color_name(hex);
		const colors = this.get_color(color_name);
		const shade_value = colors.indexOf(hex);
		if(shade_value <= 1) {
			return this.get(color_name, 'dark');
		}
		return this.get(color_name, 'extra-light');
	},

	validate_hex: function(hex) {
		// https://stackoverflow.com/a/8027444/5353542
		return /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(hex);
	},

	lighten(color, percent) {
		// https://stackoverflow.com/a/13542669/5353542
		var f = parseInt(color.slice(1), 16),
			t = percent < 0 ? 0 : 255,
			p = percent < 0 ? percent * -1 : percent,
			R = f >> 16,
			G = f >> 8 & 0x00FF,
			B = f & 0x0000FF;
		return "#" +
			(0x1000000 +
				(Math.round((t - R) * p) + R) *
				0x10000 +
				(Math.round((t - G) * p) + G) *
				0x100 + (Math.round((t - B) * p) + B)
			).toString(16).slice(1);
	},

	hex_to_rgb(hex) {
		if(hex.startsWith('#')) {
			hex = hex.substring(1);
		}
		const r = parseInt(hex.substring(0, 2), 16);
		const g = parseInt(hex.substring(2, 4), 16);
		const b = parseInt(hex.substring(4, 6), 16);
		return {r, g, b};
	},

	brightness(hex) {
		const rgb = this.hex_to_rgb(hex);
		// https://www.w3.org/TR/AERT#color-contrast
		// 255 - brightest (#fff)
		// 0 - darkest (#000)
		return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;
	}
};

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/sidebar.js
 */
frappe.provide('frappe.ui');

frappe.ui.Sidebar = class Sidebar {
	constructor({ wrapper, css_class }) {
		this.wrapper = wrapper;
		this.css_class = css_class;
		this.make_dom();
	}

	make_dom() {
		this.wrapper.html(`
			<div class="${this.css_class} overlay-sidebar hidden-xs hidden-sm">
			</div>
		`);

		this.$sidebar = this.wrapper.find('.' + this.css_class);
	}

	add_item(item, section) {
		let $section;
		if(!section && this.wrapper.find('.sidebar-menu').length === 0) {
			// if no section, add section with no heading
			$section = this.get_section();
		} else {
			$section = this.get_section(section);
		}

		const $li_item = $(`
			<li><a ${item.href ? `href="${item.href}"` : ''}>${item.label}</a></li>
		`).click(
			() => item.on_click && item.on_click()
		);

		$section.append($li_item);
	}

	get_section(section_heading="") {
		let $section = $(this.wrapper.find(
			`[data-section-heading="${section_heading}"]`));
		if($section.length) {
			return $section;
		}

		const $section_heading = section_heading ?
			`<li class="h6">${section_heading}</li>` : '';

		$section = $(`
			<ul class="list-unstyled sidebar-menu" data-section-heading="${section_heading || 'default'}">
				${$section_heading}
			</ul>
		`);

		this.$sidebar.append($section);
		return $section;
	}
};

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/request.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

// My HTTP Request

frappe.provide('frappe.request');
frappe.request.url = '/';
frappe.request.ajax_count = 0;
frappe.request.waiting_for_ajax = [];

// generic server call (call page, object)
frappe.call = function(opts) {
	if (typeof arguments[0]==='string') {
		opts = {
			method: arguments[0],
			args: arguments[1],
			callback: arguments[2]
		}
	}

	if(opts.quiet) {
		opts.no_spinner = true;
	}
	var args = $.extend({}, opts.args);

	// cmd
	if(opts.module && opts.page) {
		args.cmd = opts.module+'.page.'+opts.page+'.'+opts.page+'.'+opts.method;
	} else if(opts.doc) {
		$.extend(args, {
			cmd: "runserverobj",
			docs: frappe.get_doc(opts.doc.doctype, opts.doc.name),
			method: opts.method,
			args: opts.args,
		});
	} else if(opts.method) {
		args.cmd = opts.method;
	}

	var callback = function(data, response_text) {
		if(data.task_id) {
			// async call, subscribe
			frappe.socketio.subscribe(data.task_id, opts);

			if(opts.queued) {
				opts.queued(data);
			}
		}
		else if (opts.callback) {
			// ajax
			return opts.callback(data, response_text);
		}
	}

	return frappe.request.call({
		type: opts.type || "POST",
		args: args,
		success: callback,
		error: opts.error,
		always: opts.always,
		btn: opts.btn,
		freeze: opts.freeze,
		freeze_message: opts.freeze_message,
		// show_spinner: !opts.no_spinner,
		async: opts.async,
		url: opts.url || frappe.request.url,
	});
}


frappe.request.call = function(opts) {
	frappe.request.prepare(opts);

	var statusCode = {
		200: function(data, xhr) {
			opts.success_callback && opts.success_callback(data, xhr.responseText);
		},
		401: function(xhr) {
			if(frappe.app.session_expired_dialog && frappe.app.session_expired_dialog.display) {
				frappe.app.redirect_to_login();
			} else {
				frappe.app.handle_session_expired();
			}
		},
		404: function(xhr) {
			frappe.msgprint({title:__("Not found"), indicator:'red',
				message: __('The resource you are looking for is not available')});
		},
		403: function(xhr) {
			if (frappe.get_cookie('sid')==='Guest') {
				// session expired
				frappe.app.handle_session_expired();
			}
			else if(xhr.responseJSON && xhr.responseJSON._error_message) {
				frappe.msgprint({
					title:__("Not permitted"), indicator:'red',
					message: xhr.responseJSON._error_message
				});

				xhr.responseJSON._server_messages = null;
			}
			else if (xhr.responseJSON && xhr.responseJSON._server_messages) {
				var _server_messages = JSON.parse(xhr.responseJSON._server_messages);

				// avoid double messages
				if (_server_messages.indexOf(__("Not permitted"))!==-1) {
					return;
				}
			}
			else {
				frappe.msgprint({
					title:__("Not permitted"), indicator:'red',
					message: __('You do not have enough permissions to access this resource. Please contact your manager to get access.')});
			}


		},
		508: function(xhr) {
			frappe.utils.play_sound("error");
			frappe.msgprint({title:__('Please try again'), indicator:'red',
				message:__("Another transaction is blocking this one. Please try again in a few seconds.")});
		},
		413: function(data, xhr) {
			frappe.msgprint({indicator:'red', title:__('File too big'), message:__("File size exceeded the maximum allowed size of {0} MB",
				[(frappe.boot.max_file_size || 5242880) / 1048576])});
		},
		417: function(xhr) {
			var r = xhr.responseJSON;
			if (!r) {
				try {
					r = JSON.parse(xhr.responseText);
				} catch (e) {
					r = xhr.responseText;
				}
			}

			opts.error_callback && opts.error_callback(r);
		},
		501: function(data, xhr) {
			if(typeof data === "string") data = JSON.parse(data);
			opts.error_callback && opts.error_callback(data, xhr.responseText);
		},
		500: function(xhr) {
			frappe.utils.play_sound("error");
			frappe.msgprint({message:__("Server Error: Please check your server logs or contact tech support."), title:__('Something went wrong'), indicator: 'red'});
			try {
				opts.error_callback && opts.error_callback();
				frappe.request.report_error(xhr, opts);
			} catch (e) {
				frappe.request.report_error(xhr, opts);
			}
		},
		504: function(xhr) {
			frappe.msgprint(__("Request Timed Out"))
			opts.error_callback && opts.error_callback();
		}
	};

	var ajax_args = {
		url: opts.url || frappe.request.url,
		data: opts.args,
		type: opts.type,
		dataType: opts.dataType || 'json',
		async: opts.async,
		headers: { "X-Frappe-CSRF-Token": frappe.csrf_token },
		cache: false
	};

	frappe.last_request = ajax_args.data;

	return $.ajax(ajax_args)
		.done(function(data, textStatus, xhr) {
			try {
				if(typeof data === "string") data = JSON.parse(data);

				// sync attached docs
				if(data.docs || data.docinfo) {
					frappe.model.sync(data);
				}

				// sync translated messages
				if(data.__messages) {
					$.extend(frappe._messages, data.__messages);
				}

				// callbacks
				var status_code_handler = statusCode[xhr.statusCode().status];
				if (status_code_handler) {
					status_code_handler(data, xhr);
				}
			} catch(e) {
				console.log("Unable to handle success response"); // eslint-disable-line
				console.trace(e); // eslint-disable-line
			}

		})
		.always(function(data, textStatus, xhr) {
			try {
				if(typeof data==="string") {
					data = JSON.parse(data);
				}
				if(data.responseText) {
					var xhr = data;
					data = JSON.parse(data.responseText);
				}
			} catch(e) {
				data = null;
				// pass
			}
			frappe.request.cleanup(opts, data);
			if(opts.always) {
				opts.always(data);
			}
		})
		.fail(function(xhr, textStatus) {
			try {
				var status_code_handler = statusCode[xhr.statusCode().status];
				if (status_code_handler) {
					status_code_handler(xhr);
				} else {
					// if not handled by error handler!
					opts.error_callback && opts.error_callback(xhr);
				}
			} catch(e) {
				console.log("Unable to handle failed response"); // eslint-disable-line
				console.trace(e); // eslint-disable-line
			}
		});
}

// call execute serverside request
frappe.request.prepare = function(opts) {
	$("body").attr("data-ajax-state", "triggered");

	// btn indicator
	if(opts.btn) $(opts.btn).prop("disabled", true);

	// freeze page
	if(opts.freeze) frappe.dom.freeze(opts.freeze_message);

	// stringify args if required
	for(var key in opts.args) {
		if(opts.args[key] && ($.isPlainObject(opts.args[key]) || $.isArray(opts.args[key]))) {
			opts.args[key] = JSON.stringify(opts.args[key]);
		}
	}

	// no cmd?
	if(!opts.args.cmd && !opts.url) {
		console.log(opts)
		throw "Incomplete Request";
	}

	opts.success_callback = opts.success;
	opts.error_callback = opts.error;
	delete opts.success;
	delete opts.error;

}

frappe.request.cleanup = function(opts, r) {
	// stop button indicator
	if(opts.btn) {
		$(opts.btn).prop("disabled", false);
	}

	$("body").attr("data-ajax-state", "complete");

	// un-freeze page
	if(opts.freeze) frappe.dom.unfreeze();

	if(r) {

		// session expired? - Guest has no business here!
		if(r.session_expired || frappe.get_cookie("sid")==="Guest") {
			frappe.app.handle_session_expired();
			return;
		}

		// show messages
		if(r._server_messages && !opts.silent) {
			r._server_messages = JSON.parse(r._server_messages);
			frappe.hide_msgprint();
			frappe.msgprint(r._server_messages);
		}

		// show errors
		if(r.exc) {
			r.exc = JSON.parse(r.exc);
			if(r.exc instanceof Array) {
				$.each(r.exc, function(i, v) {
					if(v) {
						console.log(v);
					}
				})
			} else {
				console.log(r.exc);
			}
		}

		// debug messages
		if(r._debug_messages) {
			if(opts.args) {
				console.log("======== arguments ========");
				console.log(opts.args);
				console.log("========")
			}
			$.each(JSON.parse(r._debug_messages), function(i, v) { console.log(v); });
			console.log("======== response ========");
			delete r._debug_messages;
			console.log(r);
			console.log("========");
		}
	}

	frappe.last_response = r;
}

frappe.after_server_call = () => {
	if(frappe.request.ajax_count) {
		return new Promise(resolve => {
			frappe.request.waiting_for_ajax.push(() => {
				resolve();
			});
		});
	} else {
		return null;
	}
};

frappe.after_ajax = function(fn) {
	return new Promise(resolve => {
		if(frappe.request.ajax_count) {
			frappe.request.waiting_for_ajax.push(() => {
				if(fn) fn();
				resolve();
			});
		} else {
			if(fn) fn();
			resolve();
		}
	});
};

frappe.request.report_error = function(xhr, request_opts) {
	var data = JSON.parse(xhr.responseText);
	if (data.exc) {
		var exc = (JSON.parse(data.exc) || []).join("\n");
		delete data.exc;
	} else {
		var exc = "";
	}

	if (exc) {
		var error_report_email = (frappe.boot.error_report_email || []).join(", ");
		var error_message = '<div>\
			<pre style="max-height: 300px; margin-top: 7px;">'
				+ exc.replace(/</g, '&lt;').replace(/>/g, '&gt;') + '</pre>'
			+'<p class="text-right"><a class="btn btn-primary btn-sm report-btn">'
			+ __("Report this issue") + '</a></p>'
			+'</div>';

		request_opts = frappe.request.cleanup_request_opts(request_opts);

		msg_dialog = frappe.msgprint({message:error_message, indicator:'red'});

		msg_dialog.msg_area.find(".report-btn")
			.toggle(error_report_email ? true : false)
			.on("click", function() {
				var error_report_message = [
					'<h5>Please type some additional information that could help us reproduce this issue:</h5>',
					'<div style="min-height: 100px; border: 1px solid #bbb; \
						border-radius: 5px; padding: 15px; margin-bottom: 15px;"></div>',
					'<hr>',
					'<h5>App Versions</h5>',
					'<pre>' + JSON.stringify(frappe.boot.versions, null, "\t") + '</pre>',
					'<h5>Route</h5>',
					'<pre>' + frappe.get_route_str() + '</pre>',
					'<hr>',
					'<h5>Error Report</h5>',
					'<pre>' + exc + '</pre>',
					'<hr>',
					'<h5>Request Data</h5>',
					'<pre>' + JSON.stringify(request_opts, null, "\t") + '</pre>',
					'<hr>',
					'<h5>Response JSON</h5>',
					'<pre>' + JSON.stringify(data, null, '\t')+ '</pre>'
				].join("\n");

				var communication_composer = new frappe.views.CommunicationComposer({
					subject: 'Error Report [' + frappe.datetime.nowdate() + ']',
					recipients: error_report_email,
					message: error_report_message,
					doc: {
						doctype: "User",
						name: frappe.session.user
					}
				});
				communication_composer.dialog.$wrapper.css("z-index", cint(msg_dialog.$wrapper.css("z-index")) + 1);
			});
	}
};

frappe.request.cleanup_request_opts = function(request_opts) {
	var doc = (request_opts.args || {}).doc;
	if (doc) {
		doc = JSON.parse(doc);
		$.each(Object.keys(doc), function(i, key) {
			if (key.indexOf("password")!==-1 && doc[key]) {
				// mask the password
				doc[key] = "*****";
			}
		});
		request_opts.args.doc = JSON.stringify(doc);
	}
	return request_opts;
};

$(document).ajaxSend(function() {
	frappe.request.ajax_count++;
});

$(document).ajaxComplete(function() {
	frappe.request.ajax_count--;
	if(!frappe.request.ajax_count) {
		$.each(frappe.request.waiting_for_ajax || [], function(i, fn) {
			fn();
		});
		frappe.request.waiting_for_ajax = [];
	}
});
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/socketio_client.js
 */
frappe.socketio = {
	open_tasks: {},
	open_docs: [],
	emit_queue: [],
	init: function() {
		if (frappe.boot.disable_async) {
			return;
		}

		if (frappe.socketio.socket) {
			return;
		}

		if (frappe.boot.developer_mode) {
			// File watchers for development
			frappe.socketio.setup_file_watchers();
		}

		//Enable secure option when using HTTPS
		if (window.location.protocol == "https:") {
			frappe.socketio.socket = io.connect(frappe.socketio.get_host(), {secure: true});
		}
		else if (window.location.protocol == "http:") {
			frappe.socketio.socket = io.connect(frappe.socketio.get_host());
		}
		else if (window.location.protocol == "file:") {
			frappe.socketio.socket = io.connect(window.localStorage.server);
		}

		if (!frappe.socketio.socket) {
			console.log("Unable to connect to " + frappe.socketio.get_host());
			return;
		}

		frappe.socketio.socket.on('msgprint', function(message) {
			frappe.msgprint(message);
		});

		frappe.socketio.socket.on('eval_js', function(message) {
			eval(message);
		});

		frappe.socketio.socket.on('progress', function(data) {
			if(data.progress) {
				data.percent = flt(data.progress[0]) / data.progress[1] * 100;
			}
			if(data.percent) {
				if(data.percent==100) {
					frappe.hide_progress();
				} else {
					frappe.show_progress(data.title || __("Progress"), data.percent, 100);
				}
			}
		});

		frappe.socketio.setup_listeners();
		frappe.socketio.setup_reconnect();
		frappe.socketio.uploader = new frappe.socketio.SocketIOUploader();

		$(document).on('form-load form-rename', function(e, frm) {
			if (frm.is_new()) {
				return;
			}

			for (var i=0, l=frappe.socketio.open_docs.length; i<l; i++) {
				var d = frappe.socketio.open_docs[i];
				if (frm.doctype==d.doctype && frm.docname==d.name) {
					// already subscribed
					return false;
				}
			}

			frappe.socketio.doc_subscribe(frm.doctype, frm.docname);
		});

		$(document).on("form-refresh", function(e, frm) {
			if (frm.is_new()) {
				return;
			}

			frappe.socketio.doc_open(frm.doctype, frm.docname);
		});

		$(document).on('form-unload', function(e, frm) {
			if (frm.is_new()) {
				return;
			}

			// frappe.socketio.doc_unsubscribe(frm.doctype, frm.docname);
			frappe.socketio.doc_close(frm.doctype, frm.docname);
		});

		window.onbeforeunload = function() {
			if (!cur_frm || cur_frm.is_new()) {
				return;
			}

			// if tab/window is closed, notify other users
			if (cur_frm.doc) {
				frappe.socketio.doc_close(cur_frm.doctype, cur_frm.docname);
			}
		}
	},
	get_host: function() {
		var host = window.location.origin;
		if(window.dev_server) {
			var parts = host.split(":");
			var port = frappe.boot.socketio_port || '3000';
			if(parts.length > 2) {
				host = parts[0] + ":" + parts[1];
			}
			host = host + ":" + port;
		}
		return host;
	},
	subscribe: function(task_id, opts) {
		// TODO DEPRECATE

		frappe.socketio.socket.emit('task_subscribe', task_id);
		frappe.socketio.socket.emit('progress_subscribe', task_id);

		frappe.socketio.open_tasks[task_id] = opts;
	},
	task_subscribe: function(task_id) {
		frappe.socketio.socket.emit('task_subscribe', task_id);
	},
	task_unsubscribe: function(task_id) {
		frappe.socketio.socket.emit('task_unsubscribe', task_id);
	},
	doc_subscribe: function(doctype, docname) {
		if (frappe.flags.doc_subscribe) {
			console.log('throttled');
			return;
		}

		frappe.flags.doc_subscribe = true;

		// throttle to 1 per sec
		setTimeout(function() { frappe.flags.doc_subscribe = false }, 1000);

		frappe.socketio.socket.emit('doc_subscribe', doctype, docname);
		frappe.socketio.open_docs.push({doctype: doctype, docname: docname});
	},
	doc_unsubscribe: function(doctype, docname) {
		frappe.socketio.socket.emit('doc_unsubscribe', doctype, docname);
		frappe.socketio.open_docs = $.filter(frappe.socketio.open_docs, function(d) {
			if(d.doctype===doctype && d.name===docname) {
				return null;
			} else {
				return d;
			}
		})
	},
	doc_open: function(doctype, docname) {
		// notify that the user has opened this doc, if not already notified
		if(!frappe.socketio.last_doc
			|| (frappe.socketio.last_doc[0]!=doctype && frappe.socketio.last_doc[0]!=docname)) {
			frappe.socketio.socket.emit('doc_open', doctype, docname);
		}
		frappe.socketio.last_doc = [doctype, docname];
	},
	doc_close: function(doctype, docname) {
		// notify that the user has closed this doc
		frappe.socketio.socket.emit('doc_close', doctype, docname);
	},
	setup_listeners: function() {
		frappe.socketio.socket.on('task_status_change', function(data) {
			frappe.socketio.process_response(data, data.status.toLowerCase());
		});
		frappe.socketio.socket.on('task_progress', function(data) {
			frappe.socketio.process_response(data, "progress");
		});
	},
	setup_reconnect: function() {
		// subscribe again to open_tasks
		frappe.socketio.socket.on("connect", function() {
			// wait for 5 seconds before subscribing again
			// because it takes more time to start python server than nodejs server
			// and we use validation requests to python server for subscribing
			setTimeout(function() {
				$.each(frappe.socketio.open_tasks, function(task_id, opts) {
					frappe.socketio.subscribe(task_id, opts);
				});

				// re-connect open docs
				$.each(frappe.socketio.open_docs, function(d) {
					if(locals[d.doctype] && locals[d.doctype][d.name]) {
						frappe.socketio.doc_subscribe(d.doctype, d.name);
					}
				});

				if (cur_frm && cur_frm.doc) {
					frappe.socketio.doc_open(cur_frm.doc.doctype, cur_frm.doc.name);
				}
			}, 5000);
		});
	},
	setup_file_watchers: function() {
		var host = window.location.origin;
		if(!window.dev_server) {
			return;
		}

		var port = frappe.boot.file_watcher_port || 6787;
		var parts = host.split(":");
		// remove the port number from string if exists
		if (parts.length > 2) {
			host = host.split(':').slice(0, -1).join(":");
		}
		host = host + ':' + port;

		frappe.socketio.file_watcher = io.connect(host);
		// css files auto reload
		frappe.socketio.file_watcher.on('reload_css', function(filename) {
			let abs_file_path = "assets/" + filename;
			const link = $(`link[href*="${abs_file_path}"]`);
			abs_file_path = abs_file_path.split('?')[0] + '?v='+ moment();
			link.attr('href', abs_file_path);
			frappe.show_alert({
				indicator: 'orange',
				message: filename + ' reloaded'
			}, 5);
		});
		// js files show alert

		// commenting as this kills a branch change
		// frappe.socketio.file_watcher.on('reload_js', function(filename) {
		// 	filename = "assets/" + filename;
		// 	var msg = $(`
		// 		<span>${filename} changed <a data-action="reload">Click to Reload</a></span>
		// 	`)
		// 	msg.find('a').click(frappe.ui.toolbar.clear_cache);
		// 	frappe.show_alert({
		// 		indicator: 'orange',
		// 		message: msg
		// 	}, 5);
		// });
	},
	process_response: function(data, method) {
		if(!data) {
			return;
		}

		// success
		var opts = frappe.socketio.open_tasks[data.task_id];
		if(opts[method]) {
			opts[method](data);
		}

		// "callback" is std frappe term
		if(method==="success") {
			if(opts.callback) opts.callback(data);
		}

		// always
		frappe.request.cleanup(opts, data);
		if(opts.always) {
			opts.always(data);
		}

		// error
		if(data.status_code && data.status_code > 400 && opts.error) {
			opts.error(data);
		}
	}
}

frappe.provide("frappe.realtime");
frappe.realtime.on = function(event, callback) {
	frappe.socketio.socket && frappe.socketio.socket.on(event, callback);
};

frappe.realtime.off = function(event, callback) {
	frappe.socketio.socket && frappe.socketio.socket.off(event, callback);
}

frappe.realtime.publish = function(event, message) {
	if(frappe.socketio.socket) {
		frappe.socketio.socket.emit(event, message);
	}
}

frappe.socketio.SocketIOUploader = class SocketIOUploader {
	constructor() {
		frappe.socketio.socket.on('upload-request-slice', (data) => {
			var place = data.currentSlice * this.chunk_size,
				slice = this.file.slice(place,
					place + Math.min(this.chunk_size, this.file.size - place));

			if (this.on_progress) {
				// update progress
				this.on_progress(place / this.file.size * 100);
			}

			this.reader.readAsArrayBuffer(slice);
			this.started = true;
			this.keep_alive();
		});

		frappe.socketio.socket.on('upload-end', (data) => {
			this.reader = null;
			this.file = null;
			if (data.file_url.substr(0, 7)==='/public') {
				data.file_url = data.file_url.substr(7);
			}
			this.callback(data);
		});

		frappe.socketio.socket.on('upload-error', (data) => {
			this.disconnect(false);
			frappe.msgprint({
				title: __('Upload Failed'),
				message: data.error,
				indicator: 'red'
			});
		});

		frappe.socketio.socket.on('disconnect', () => {
			this.disconnect();
		});
	}

	start({file=null, is_private=0, filename='', callback=null, on_progress=null,
		chunk_size=24576, fallback=null} = {}) {

		if (this.reader) {
			frappe.throw(__('File Upload in Progress. Please try again in a few moments.'));
		}

		if (!frappe.socketio.socket.connected) {
			if (fallback) {
				fallback();
				return;
			} else {
				frappe.throw(__('Socketio is not connected. Cannot upload'));
			}
		}

		this.reader = new FileReader();
		this.file = file;
		this.chunk_size = chunk_size;
		this.callback = callback;
		this.on_progress = on_progress;
		this.fallback = fallback;
		this.started = false;

		this.reader.onload = () => {
			frappe.socketio.socket.emit('upload-accept-slice', {
				is_private: is_private,
				name: filename,
				type: this.file.type,
				size: this.file.size,
				data: this.reader.result
			});
			this.keep_alive();
		};

		var slice = file.slice(0, this.chunk_size);
		this.reader.readAsArrayBuffer(slice);
	}

	keep_alive() {
		if (this.next_check) {
			clearTimeout (this.next_check);
		}
		this.next_check = setTimeout (() => {
			if (!this.started) {
				// upload never started, so try fallback
				if (this.fallback) {
					this.fallback();
				} else {
					this.disconnect();
				}
			}
			this.disconnect();
		}, 3000);
	}

	disconnect(with_message = true) {
		if (this.reader) {
			this.reader = null;
			this.file = null;
			frappe.hide_progress();
			if (with_message) {
				frappe.msgprint({
					title: __('File Upload'),
					message: __('File Upload Disconnected. Please try again.'),
					indicator: 'red'
				});
			}
		}
	}

}
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/router.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

// route urls to their virtual pages

// re-route map (for rename)
frappe.re_route = {"#login": ""};
frappe.route_titles = {};
frappe.route_flags = {};
frappe.route_history = [];
frappe.view_factory = {};
frappe.view_factories = [];
frappe.route_options = null;

frappe.route = function() {
	if(frappe.re_route[window.location.hash] !== undefined) {
		// after saving a doc, for example,
		// "New DocType 1" and the renamed "TestDocType", both exist in history
		// now if we try to go back,
		// it doesn't allow us to go back to the one prior to "New DocType 1"
		// Hence if this check is true, instead of changing location hash,
		// we just do a back to go to the doc previous to the "New DocType 1"
		var re_route_val = frappe.get_route_str(frappe.re_route[window.location.hash]);
		var cur_route_val = frappe.get_route_str(frappe._cur_route);
		if (decodeURIComponent(re_route_val) === decodeURIComponent(cur_route_val)) {
			window.history.back();
			return;
		} else {
			window.location.hash = frappe.re_route[window.location.hash];
		}
	}

	frappe._cur_route = window.location.hash;

	var route = frappe.get_route();
	if (route === false) {
		return;
	}

	frappe.route_history.push(route);

	if(route[0] && route[1] && frappe.views[route[0] + "Factory"]) {
		// has a view generator, generate!
		if(!frappe.view_factory[route[0]]) {
			frappe.view_factory[route[0]] = new frappe.views[route[0] + "Factory"]();
		}

		frappe.view_factory[route[0]].show();
	} else {
		// show page
		frappe.views.pageview.show(route[0]);
	}


	if(frappe.route_titles[window.location.hash]) {
		frappe.utils.set_title(frappe.route_titles[window.location.hash]);
	} else {
		setTimeout(function() {
			frappe.route_titles[frappe.get_route_str()] = frappe._original_title || document.title;
		}, 1000);
	}

	if(window.mixpanel) {
		window.mixpanel.track(route.slice(0, 2).join(' '));
	}
}

frappe.get_route = function(route) {
	// for app
	var route = frappe.get_raw_route_str(route).split('/');
	route = $.map(route, frappe._decode_str);
	var parts = route[route.length - 1].split("?");
	route[route.length - 1] = frappe._decode_str(parts[0]);
	if (parts.length > 1) {
		var query_params = get_query_params(parts[1]);
		frappe.route_options = $.extend(frappe.route_options || {}, query_params);
	}

	// backward compatibility
	if (route && route[0]==='Module') {
		frappe.set_route('modules', route[1]);
		return false;
	}

	return route;
}

frappe.get_prev_route = function() {
	if(frappe.route_history && frappe.route_history.length > 1) {
		return frappe.route_history[frappe.route_history.length - 2];
	} else {
		return [];
	}
}

frappe._decode_str = function(r) {
	try {
		return decodeURIComponent(r);
	} catch(e) {
		if (e instanceof URIError) {
			return r;
		} else {
			throw e;
		}
	}
}

frappe.get_raw_route_str = function(route) {
	if(!route)
		route = window.location.hash;

	if(route.substr(0,1)=='#') route = route.substr(1);
	if(route.substr(0,1)=='!') route = route.substr(1);

	return route;
}

frappe.get_route_str = function(route) {
	var rawRoute = frappe.get_raw_route_str()
	route = $.map(rawRoute.split('/'), frappe._decode_str).join('/');

	return route;
}

frappe.set_route = function() {
	return new Promise(resolve => {
		var params = arguments;
		if(params.length===1 && $.isArray(params[0])) {
			params = params[0];
		}
		var route = $.map(params, function(a) {
			if($.isPlainObject(a)) {
				frappe.route_options = a;
				return null;
			} else {
				return a;
				// return a ? encodeURIComponent(a) : null;
			}
		}).join('/');

		window.location.hash = route;

		// Set favicon (app.js)
		frappe.app.set_favicon && frappe.app.set_favicon();
		setTimeout(() => {
			frappe.after_ajax(() => {
				resolve();
			});
		}, 100);
	});
}

frappe.set_re_route = function() {
	var tmp = window.location.hash;
	frappe.set_route.apply(null, arguments);
	frappe.re_route[tmp] = window.location.hash;
};


frappe._cur_route = null;

$(window).on('hashchange', function() {
	// save the title
	frappe.route_titles[frappe._cur_route] = frappe._original_title || document.title;

	if(window.location.hash==frappe._cur_route)
		return;

	// hide open dialog
	if(cur_dialog && cur_dialog.hide_on_page_refresh) {
		cur_dialog.hide();
	}

	frappe.route();

});

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/defaults.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.defaults = {
	get_user_default: function(key) {
		var defaults = frappe.boot.user.defaults;
		var d = defaults[key];
		if(!d && frappe.defaults.is_a_user_permission_key(key))
			d = defaults[frappe.model.scrub(key)];
		if($.isArray(d)) d = d[0];
		return d;
	},
	get_user_defaults: function(key) {
		var defaults = frappe.boot.user.defaults;
		var d = defaults[key];

		if (frappe.defaults.is_a_user_permission_key(key)) {
			if (d && $.isArray(d) && d.length===1) {
				// Use User Permission value when only when it has a single value
				d = d[0];
			} else {
				d = defaults[key] || defaults[frappe.model.scrub(key)];
			}
		}
		if(!$.isArray(d)) d = [d];
		return d;
	},
	get_global_default: function(key) {
		var d = frappe.sys_defaults[key];
		if($.isArray(d)) d = d[0];
		return d;
	},
	get_global_defaults: function(key) {
		var d = frappe.sys_defaults[key];
		if(!$.isArray(d)) d = [d];
		return d;
	},
	set_default: function(key, value, callback) {
		if(typeof value!=="string")
			value = JSON.stringify(value);

		frappe.boot.user.defaults[key] = value;
		return frappe.call({
			method: "frappe.client.set_default",
			args: {
				key: key,
				value: value
			},
			callback: callback || function(r) {}
		});
	},
	set_user_default_local: function(key, value) {
		frappe.boot.user.defaults[key] = value;
	},
	get_default: function(key) {
		var defaults = frappe.boot.user.defaults;
		var value = defaults[key];
		if (frappe.defaults.is_a_user_permission_key(key)) {
			if (value && $.isArray(value) && value.length===1) {
				value = value[0];
			} else {
				value = defaults[frappe.model.scrub(key)];
			}
		}

		if(value) {
			try {
				return JSON.parse(value)
			} catch(e) {
				return value;
			}
		}
	},

	is_a_user_permission_key: function(key) {
		return key.indexOf(":")===-1 && key !== frappe.model.scrub(key);
	},

	get_user_permissions: function() {
		return frappe.boot.user_permissions;
	},
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/roles_editor.js
 */
frappe.RoleEditor = Class.extend({
	init: function(wrapper, frm, disable) {
		var me = this;
		this.frm = frm;
		this.wrapper = wrapper;
		this.disable = disable;
		$(wrapper).html('<div class="help">' + __("Loading") + '...</div>');
		return frappe.call({
			method: 'frappe.core.doctype.user.user.get_all_roles',
			callback: function(r) {
				me.roles = r.message;
				me.show_roles();

				// refresh call could've already happened
				// when all role checkboxes weren't created
				if(me.frm.doc) {
					me.frm.roles_editor.show();
				}
			}
		});
	},
	show_roles: function() {
		var me = this;
		$(this.wrapper).empty();
		if(me.frm.doctype != 'User') {
			var role_toolbar = $('<p><button class="btn btn-default btn-add btn-sm" style="margin-right: 5px;"></button>\
				<button class="btn btn-sm btn-default btn-remove"></button></p>').appendTo($(this.wrapper));

			role_toolbar.find(".btn-add")
				.html(__('Add all roles'))
				.on("click", function () {
					$(me.wrapper).find('input[type="checkbox"]').each(function (i, check) {
						if (!$(check).is(":checked")) {
							check.checked = true;
						}
					});
				});

			role_toolbar.find(".btn-remove")
				.html(__('Clear all roles'))
				.on("click", function() {
					$(me.wrapper).find('input[type="checkbox"]').each(function(i, check) {
						if($(check).is(":checked")) {
							check.checked = false;
						}
					});
				});
		}

		$.each(this.roles, function(i, role) {
			$(me.wrapper).append(repl('<div class="user-role" \
				data-user-role="%(role_value)s">\
				<input type="checkbox" style="margin-top:0px;" class="box"> \
				<a href="#" class="grey role">%(role_display)s</a>\
			</div>', {role_value: role,role_display:__(role)}));
		});

		$(this.wrapper).find('input[type="checkbox"]').change(function() {
			me.set_roles_in_table();
			me.frm.dirty();
		});
		$(this.wrapper).find('.user-role a').click(function() {
			me.show_permissions($(this).parent().attr('data-user-role'));
			return false;
		});
	},
	show: function() {
		var me = this;
		$('.box').attr('disabled', this.disable);

		// uncheck all roles
		$(this.wrapper).find('input[type="checkbox"]')
			.each(function(i, checkbox) { checkbox.checked = false; });

		// set user roles as checked
		$.each((me.frm.doc.roles || []), function(i, user_role) {
			var checkbox = $(me.wrapper)
				.find('[data-user-role="'+user_role.role+'"] input[type="checkbox"]').get(0);
			if(checkbox) checkbox.checked = true;
		});

		this.set_enable_disable();
	},
	set_enable_disable: function() {
		$('.box').attr('disabled', this.disable ? true : false);
	},
	set_roles_in_table: function() {
		var opts = this.get_roles();
		var existing_roles_map = {};
		var existing_roles_list = [];
		var me = this;

		$.each((me.frm.doc.roles || []), function(i, user_role) {
			existing_roles_map[user_role.role] = user_role.name;
			existing_roles_list.push(user_role.role);
		});

		// remove unchecked roles
		$.each(opts.unchecked_roles, function(i, role) {
			if(existing_roles_list.indexOf(role)!=-1) {
				frappe.model.clear_doc("Has Role", existing_roles_map[role]);
			}
		});

		// add new roles that are checked
		$.each(opts.checked_roles, function(i, role) {
			if(existing_roles_list.indexOf(role)==-1) {
				var user_role = frappe.model.add_child(me.frm.doc, "Has Role", "roles");
				user_role.role = role;
			}
		});

		refresh_field("roles");
	},
	get_roles: function() {
		var checked_roles = [];
		var unchecked_roles = [];
		$(this.wrapper).find('[data-user-role]').each(function() {
			if($(this).find('input[type="checkbox"]:checked').length) {
				checked_roles.push($(this).attr('data-user-role'));
			} else {
				unchecked_roles.push($(this).attr('data-user-role'));
			}
		});

		return {
			checked_roles: checked_roles,
			unchecked_roles: unchecked_roles
		};
	},
	show_permissions: function(role) {
		// show permissions for a role
		var me = this;
		if(!this.perm_dialog)
			this.make_perm_dialog();
		$(this.perm_dialog.body).empty();
		return frappe.call({
			method: 'frappe.core.doctype.user.user.get_perm_info',
			args: {role: role},
			callback: function(r) {
				var $body = $(me.perm_dialog.body);
				// TODO fix the overflow issue and also display perms like report, import, etc.

				$body.append('<table class="user-perm"><thead><tr>'
					+ '<th style="text-align: left">' + __('Document Type') + '</th>'
					+ '<th>' + __('Level') + '</th>'
					+ '<th>' + __('Apply User Permissions') + '</th>'
					+ '<th>' + __('Read') + '</th>'
					+ '<th>' + __('Write') + '</th>'
					+ '<th>' + __('Create') + '</th>'
					+ '<th>' + __('Delete') + '</th>'
					+ '<th>' + __('Submit') + '</th>'
					+ '<th>' + __('Cancel') + '</th>'
					+ '<th>' + __('Amend') + '</th>'
					// + '<th>' + __('Report') + '</th>'
					// + '<th>' + __('Import') + '</th>'
					// + '<th>' + __('Export') + '</th>'
					// + '<th>' + __('Print') + '</th>'
					// + '<th>' + __('Email') + '</th>'
					+ '<th>' + __('Set User Permissions') + '</th>'
					+ '</tr></thead><tbody></tbody></table>');

				for(var i=0, l=r.message.length; i<l; i++) {
					var perm = r.message[i];

					// if permission -> icon
					for(var key in perm) {
						if(key!='parent' && key!='permlevel') {
							if(perm[key]) {
								perm[key] = '<i class="fa fa-check"></i>';
							} else {
								perm[key] = '';
							}
						}
					}

					$body.find('tbody').append(repl('<tr>\
						<td style="text-align: left">%(parent)s</td>\
						<td>%(permlevel)s</td>\
						<td>%(apply_user_permissions)s</td>\
						<td>%(read)s</td>\
						<td>%(write)s</td>\
						<td>%(create)s</td>\
						<td>%(delete)s</td>\
						<td>%(submit)s</td>\
						<td>%(cancel)s</td>\
						<td>%(amend)s</td>'
						// + '<td>%(report)s</td>\
						// <td>%(import)s</td>\
						// <td>%(export)s</td>\
						// <td>%(print)s</td>\
						// <td>%(email)s</td>'
						+ '<td>%(set_user_permissions)s</td>\
						</tr>', perm));
				}

				me.perm_dialog.show();
			}
		});

	},
	make_perm_dialog: function() {
		this.perm_dialog = new frappe.ui.Dialog({
			title:__('Role Permissions')
		});

		this.perm_dialog.$wrapper.find('.modal-dialog').css("width", "800px");
	}
});
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/lib/microtemplate.js
 */
// Simple JavaScript Templating
// Adapted from John Resig - http://ejohn.org/ - MIT Licensed

frappe.template = {compiled: {}, debug:{}};
frappe.template.compile = function(str, name) {
	var key = name || str;

	if(!frappe.template.compiled[key]) {
		if(str.indexOf("'")!==-1) {
			str.replace(/'/g, "\\'");
			//console.warn("Warning: Single quotes (') may not work in templates");
		}

		// replace jinja style tags
		str = str.replace(/{{/g, "{%=").replace(/}}/g, "%}");

		// {% if not test %} --> {% if (!test) { %}
		str = str.replace(/{%\s?if\s?\s?not\s?([^\(][^%{]+)\s?%}/g, "{% if (! $1) { %}")

		// {% if test %} --> {% if (test) { %}
		str = str.replace(/{%\s?if\s?([^\(][^%{]+)\s?%}/g, "{% if ($1) { %}");

		// {% for item in list %}
		//       --> {% for (var i=0, len=list.length; i<len; i++) {  var item = list[i]; %}
		function replacer(match, p1, p2, offset, string) {
			var i = frappe.utils.get_random(3);
			var len = frappe.utils.get_random(3);
			return "{% for (var "+i+"=0, "+len+"="+p2+".length; "+i+"<"+len+"; "+i+"++) { var "
				+p1+" = "+p2+"["+i+"]; "+p1+"._index = "+i+"; %}";
		}
		str = str.replace(/{%\s?for\s([a-z._]+)\sin\s([a-z._]+)\s?%}/g, replacer);

		// {% endfor %} --> {% } %}
		str = str.replace(/{%\s?endif\s?%}/g, "{% }; %}");

		// {% else %} --> {% } else { %}
		str = str.replace(/{%\s?else\s?%}/g, "{% } else { %}");

		// {% endif %} --> {% } %}
		str = str.replace(/{%\s?endfor\s?%}/g, "{% }; %}");

		fn_str = "var _p=[],print=function(){_p.push.apply(_p,arguments)};" +

	        // Introduce the data as local variables using with(){}
	        "with(obj){\n_p.push('" +

	        // Convert the template into pure JavaScript
	        str
	          .replace(/[\r\t\n]/g, " ")
	          .split("{%").join("\t")
	          .replace(/((^|%})[^\t]*)'/g, "$1\r")
	          .replace(/\t=(.*?)%}/g, "',$1,'")
	          .split("\t").join("');\n")
	          .split("%}").join("\n_p.push('")
	          .split("\r").join("\\'")
	      + "');}return _p.join('');";

		  frappe.template.debug[name] = fn_str;
		try {
			frappe.template.compiled[key] = new Function("obj", fn_str);
		} catch (e) {
			console.log("Error in Template:");
			console.log(fn_str);
			if(e.lineNumber) {
				console.log("Error in Line "+e.lineNumber+", Col "+e.columnNumber+":");
				console.log(fn_str.split("\n")[e.lineNumber - 1]);
			}
		}
    }

	return frappe.template.compiled[key];
};
frappe.render = function(str, data, name) {
	return frappe.template.compile(str, name)(data);
};
frappe.render_template = function(name, data) {
	if(name.indexOf(' ')!==-1) {
		var template = name;
	} else {
		var template = frappe.templates[name];
	}
	if(data===undefined) {
		data = {};
	}
	return frappe.render(template, data, name);
}
frappe.render_grid = function(opts) {
	// build context
	if(opts.grid) {
		opts.columns = opts.grid.getColumns();
		if(opts.report) {
			opts.data = frappe.slickgrid_tools.get_filtered_items(opts.report.dataView);
		} else if(opts.grid) {
			opts.data = opts.grid.getData().getItems();
		}
	} else {
		opts.columns = [];
	}

	// show landscape view if columns more than 10
	if (opts.columns && opts.columns.length > 10) {
		opts.landscape = true;
	} else {
		opts.landscape = false;
	}

	// render content
	if(!opts.content) {
		opts.content = frappe.render_template("print_grid", opts);
	}

	// render HTML wrapper page
	opts.base_url = frappe.urllib.get_base_url();
	opts.print_css = frappe.boot.print_css;
	var html = frappe.render_template("print_template", opts);

	var w = window.open();

	if(!w) {
		frappe.msgprint(__("Please enable pop-ups in your browser"))
	}

	w.document.write(html);
	w.document.close();
},
frappe.render_tree = function(opts) {
	opts.base_url = frappe.urllib.get_base_url();
	opts.landscape = false;
	opts.print_css = frappe.boot.print_css;
	var tree = frappe.render_template("print_tree", opts);
	var w = window.open();

	if(!w) {
		frappe.msgprint(__("Please enable pop-ups in your browser"))
	}

	w.document.write(tree);
	w.document.close();
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/legacy/globals.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.desk.form');
frappe.provide('frappe.desk.report');
frappe.provide('frappe.utils');
frappe.provide('frappe.model');
frappe.provide('frappe.user');
frappe.provide('frappe.session');
frappe.provide('locals');
frappe.provide('locals.DocType');

// for listviews
frappe.provide("frappe.listview_settings");
frappe.provide("frappe.listview_parent_route");

// setup custom binding for history
frappe.settings.no_history = 1;

// constants
var NEWLINE = '\n';
var TAB = 9;
var UP_ARROW = 38;
var DOWN_ARROW = 40;

// proxy for user globals defined in desk.js

// Name Spaces
// ============

// form
var _f = {};
var _p = {};
var _r = {};

// API globals
var frms={};
var cur_frm=null;

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/legacy/datatype.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.utils.full_name = function(fn, ln) {
	return fn + (ln ? ' ' : '') + (ln ? ln : '')
}

function fmt_money(v, format){
	// deprecated!
	// for backward compatibility
	return format_currency(v, format);
}


// to title case
function toTitle(str){
	var word_in = str.split(" ");
	var word_out = [];

	for(var w in word_in){
		word_out[w] = word_in[w].charAt(0).toUpperCase() + word_in[w].slice(1);
	}

	return word_out.join(" ");
}

function is_null(v) {
	if(v===null || v===undefined || cstr(v).trim()==="") return true;
}

function set_value_in(ele, v, ftype, fopt, doc) {
	$(ele).html(frappe.format(v, {fieldtype:ftype, options:fopt}, null, doc));
	return;
}
var $s = set_value_in; // used in print formats

function copy_dict(d) {
	var n = {};
	for(var k in d) n[k] = d[k];
	return n;
}

function replace_newlines(t) {
	return t?t.replace(/\n/g, '<br>'):'';
}

function validate_email(txt) {
	return frappe.utils.validate_type(txt, "email");
}
function validate_spl_chars(txt) {
	return frappe.utils.validate_type(txt, "alphanum")
}
function cstr(s) {
	if(s==null)return '';
	return s+'';
}
function nth(number) {
	number = cint(number);
	var s = 'th';
	if((number+'').substr(-1)=='1') s = 'st';
	if((number+'').substr(-1)=='2') s = 'nd';
	if((number+'').substr(-1)=='3') s = 'rd';
	return number+s;
}

function esc_quotes(s) {
	if(s==null)s='';
	return s.replace(/'/, "\'");
}

var crop = function(s, len) {
	if(s.length>len)
		return s.substr(0, len-3) + '...';
	else
		return s;
}


function has_words(list, item) {
	if(!item) return true;
	if(!list) return false;
	for(var i=0, j=list.length; i<j; i++) {
		if(item.indexOf(list[i])!=-1)
			return true;
	}
	return false;
}

function has_common(list1, list2) {
	if(!list1 || !list2) return false;
	for(var i=0, j=list1.length; i<j; i++) {
		if(in_list(list2, list1[i]))return true;
	}
	return false;
}

function add_lists(l1, l2) {
	return [].concat(l1).concat(l2);
}

function docstring(obj)  {
	return JSON.stringify(obj);
}

function remove_from_list(list, val) {
	if(list.indexOf(val)!==-1) {
		list.splice(list.indexOf(val), 1);
	}
	return list
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/legacy/dom.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

function empty_select(s) {
	if(s.custom_select) { s.empty(); return; }
	if(s.inp)s = s.inp;
	if(s) {
		var tmplen = s.length; for(var i=0;i<tmplen; i++) s.options[0] = null;
	}
}

function sel_val(s) {
	if(s.custom_select) {
		return s.inp.value ? s.inp.value : '';
	}
	if(s.inp)s = s.inp;
	try {
		if(s.selectedIndex<s.options.length) return s.options[s.selectedIndex].value;
		else return '';
	} catch(err) { return ''; /* IE fix */ }
}

var $n = '\n';

function $a(parent, newtag, className, cs, innerHTML, onclick) {
	if(parent && parent.substr)parent = $i(parent);
	var c = document.createElement(newtag);
	if(parent)
		parent.appendChild(c);

	// if image, 3rd parameter is source
	if(className) {
		if(newtag.toLowerCase()=='img')
			c.src = className
		else
			c.className = className;
	}
	if(cs)$y(c,cs);
	if(innerHTML) c.innerHTML = innerHTML;
	if(onclick) c.onclick = onclick;
	return c;
}

function $dh(d) {
	if(d && d.substr)d=$i(d);
	if(d && d.style.display.toLowerCase() != 'none') d.style.display = 'none';
}
function $ds(d) {
	if(d && d.substr)d=$i(d);
	var t = 'block';
	if(d && in_list(['span','img','button'], d.tagName.toLowerCase()))
		t = 'inline'
	if(d && d.style.display.toLowerCase() != t)
		d.style.display = t;
}
function $di(d) { if(d && d.substr)d=$i(d); if(d)d.style.display = 'inline'; }
function $i(id) {
	if(!id) return null;
	if(id && id.appendChild)return id; // already an element
	return document.getElementById(id);
}
function $w(e,w) { if(e && e.style && w)e.style.width = w; }
function $h(e,h) { if(e && e.style && h)e.style.height = h; }
function $bg(e,w) { if(e && e.style && w)e.style.backgroundColor = w; }

function $y(ele, s) {
	if(ele && s) {
		for(var i in s) ele.style[i]=s[i];
	}
	return ele;
}

// Make table

function make_table(parent, nr, nc, table_width, widths, cell_style, table_style) {
	var t = $a(parent, 'table');
	t.style.borderCollapse = 'collapse';
	if(table_width) t.style.width = table_width;
	if(cell_style) t.cell_style=cell_style;
	for(var ri=0;ri<nr;ri++) {
		var r = t.insertRow(ri);
		for(var ci=0;ci<nc;ci++) {
			var c = r.insertCell(ci);
			if(ri==0 && widths && widths[ci]) {
				// set widths
				c.style.width = widths[ci];
			}
			if(cell_style) {
				for(var s in cell_style) c.style[s] = cell_style[s];
			}
		}
	}
	t.append_row = function() { return append_row(this); }
	if(table_style) $y(t, table_style);
	return t;
}

function append_row(t, at, style) {
	var r = t.insertRow(at ? at : t.rows.length);
	if(t.rows.length>1) {
		for(var i=0;i<t.rows[0].cells.length;i++) {
			var c = r.insertCell(i);
			if(style) $y(c, style);
		}
	}
	return r
}

function $td(t,r,c) {
	if(r<0)r=t.rows.length+r;
	if(c<0)c=t.rows[0].cells.length+c;
	return t.rows[r].cells[c];
}

// URL utilities

frappe.urllib = {

	// get argument from url
	get_arg: function(name) {
		name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
		var regexS = "[\\?&]"+name+"=([^&#]*)";
		var regex = new RegExp( regexS );
		var results = regex.exec( window.location.href );
		if( results == null )
			return "";
		else
			return decodeURIComponent(results[1]);
	},

	// returns url dictionary
	get_dict: function() {
		var d = {}
		var t = window.location.href.split('?')[1];
		if(!t) return d;

		if(t.indexOf('#')!=-1) t = t.split('#')[0];
		if(!t) return d;

		t = t.split('&');
		for(var i=0; i<t.length; i++) {
			var a = t[i].split('=');
			d[decodeURIComponent(a[0])] = decodeURIComponent(a[1]);
		}
		return d;
	},

	// returns the base url with http + domain + path (-index.cgi or # or ?)
	get_base_url: function() {
		// var url= (frappe.base_url || window.location.href).split('#')[0].split('?')[0].split('desk')[0];
		var url = (frappe.base_url || window.location.origin)
		if(url.substr(url.length-1, 1)=='/') url = url.substr(0, url.length-1)
		return url
	},

	// returns absolute url
	get_full_url: function(url) {
		if(url.indexOf("http://")===0 || url.indexOf("https://")===0) {
			return url;
		}
		return url.substr(0,1)==="/" ?
			(frappe.urllib.get_base_url() + url) :
			(frappe.urllib.get_base_url() + "/" + url);
	}
}

window.get_url_arg = frappe.urllib.get_arg;
window.get_url_dict = frappe.urllib.get_dict;

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/legacy/handler.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

function $c(command, args, callback, error, no_spinner, freeze_msg, btn) {
	console.warn("This function '$c' has been deprecated and will be removed soon.");
	return frappe.request.call({
		type: "POST",
		args: $.extend(args, {cmd: command}),
		success: callback,
		error: error,
		btn: btn,
		freeze: freeze_msg,
		show_spinner: !no_spinner
	})
}

// For calling an object
function $c_obj(doc, method, arg, callback, no_spinner, freeze_msg, btn) {
	console.warn("This function '$c_obj' has been deprecated and will be removed soon.");

	if(arg && typeof arg!='string') arg = JSON.stringify(arg);

	var args = {
		cmd:'runserverobj',
		args: arg,
		method: method
	};

	if(typeof doc=='string') {
		args.doctype = doc;
	} else {
		args.docs = doc
	}

	return frappe.request.call({
		type: "POST",
		args: args,
		success: callback,
		btn: btn,
		freeze: freeze_msg,
		show_spinner: !no_spinner
	});
}

// For calling an for output as csv
function $c_obj_csv(doc, method, arg) {
	console.warn("This function '$c_obj_csv' has been deprecated and will be removed soon.");
	// single

	var args = {}
	args.cmd = 'runserverobj';
	args.as_csv = 1;
	args.method = method;
	args.arg = arg;

	if(doc.substr)
		args.doctype = doc;
	else
		args.docs = doc;

	// open
	open_url_post(frappe.request.url, args);
}

function open_url_post(URL, PARAMS, new_window) {
	if (window.cordova) {
		let url = URL + 'api/method/' + PARAMS.cmd + frappe.utils.make_query_string(PARAMS, false);
		window.location.href = url;
	} else {
		// call a url as POST
		_open_url_post(URL, PARAMS, new_window);
	}
}

function _open_url_post(URL, PARAMS, new_window) {
	var temp=document.createElement("form");
	temp.action=URL;
	temp.method="POST";
	temp.style.display="none";
	if(new_window){
		temp.target = '_blank';
	}
	PARAMS["csrf_token"] = frappe.csrf_token;
	for(var x in PARAMS) {
		var opt=document.createElement("textarea");
		opt.name=x;
		var val = PARAMS[x];
		if(typeof val!='string')
			val = JSON.stringify(val);
		opt.value=val;
		temp.appendChild(opt);
	}
	document.body.appendChild(temp);
	temp.submit();
	return temp;
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/page.html
 */
frappe.templates['page'] = '<div class="page-head">  <div class="container">   <div class="row">    <div class="col-md-7 col-sm-8 col-xs-6 page-title">          <h1>       <div class="title-image hide hidden-md hidden-lg">       </div>       <div class="ellipsis title-text"></div>       <span class="indicator hide"></span>     </h1>    </div>    <div class="text-right col-md-5 col-sm-4 col-xs-6 page-actions">          <span class="checked-items-status text-ellipsis text-muted small hide hidden-xs hidden-sm" style="margin-right: 20px;">## items selected</span>     <h6 class="ellipsis sub-heading hide text-muted"></h6>     <span class="page-icon-group hide hidden-xs hidden-sm"></span>           <div class="btn-group menu-btn-group hide">       <button type="button" class="btn btn-default btn-sm dropdown-toggle"         data-toggle="dropdown" aria-expanded="false">       <span class="hidden-xs">        <span class="menu-btn-group-label">{%= __("Menu") %}</span>        <span class="caret"></span></span>  <span class="visible-xs"><i class="octicon octicon-triangle-down"></i></span>       </button>       <ul class="dropdown-menu" role="menu">       </ul>     </div>     <button class="btn btn-secondary btn-default btn-sm hide"></button>     <div class="btn-group actions-btn-group hide">       <button type="button" class="btn btn-primary btn-sm dropdown-toggle"         data-toggle="dropdown" aria-expanded="false">         <span class="hidden-xs">          {%= __("Actions") %} <span class="caret"></span>         </span>         <span class="visible-xs octicon octicon-check"></span>       </button>       <ul class="dropdown-menu" role="menu">       </ul>     </div>     <button class="btn btn-primary btn-sm hide primary-action"></button>    </div>   </div>  </div> </div> <div class="container page-body">  <div class="page-toolbar hide">   <div class="container">   </div>  </div>  <div class="page-wrapper">   <div class="page-content">    <div class="workflow-button-area btn-group pull-right hide"></div>    <div class="clearfix"></div>   </div>  </div> </div> ';

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/page.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

/**
 * Make a standard page layout with a toolbar and title
 *
 * @param {Object} opts
 *
 * @param {string} opts.parent [HTMLElement] Parent element
 * @param {boolean} opts.single_column Whether to include sidebar
 * @param {string} [opts.title] Page title
 * @param {Object} [opts.make_page]
 *
 * @returns {frappe.ui.Page}
 */

/**
 * @typedef {Object} frappe.ui.Page
 */


frappe.ui.make_app_page = function(opts) {
	opts.parent.page = new frappe.ui.Page(opts);
	return opts.parent.page;
}

frappe.ui.pages = {};

frappe.ui.Page = Class.extend({
	init: function(opts) {
		$.extend(this, opts);

		this.set_document_title = true;
		this.buttons = {};
		this.fields_dict = {};
		this.views = {};

		this.make();
		frappe.ui.pages[frappe.get_route_str()] = this;
	},

	make: function() {
		this.wrapper = $(this.parent);
		this.add_main_section();
	},

	get_empty_state: function(title, message, primary_action) {
		let $empty_state = $(`<div class="page-card-container">
			<div class="page-card">
				<div class="page-card-head">
					<span class="indicator blue">
						${title}</span>
				</div>
				<p>${message}</p>
				<div>
					<button class="btn btn-primary btn-sm">${primary_action}</button>
				</div>
			</div>
		</div>`);

		return $empty_state;
	},

	load_lib: function (callback) {
		frappe.require(this.required_libs, callback);
	},

	add_main_section: function() {
		$(frappe.render_template("page", {})).appendTo(this.wrapper);
		if(this.single_column) {
			// nesting under col-sm-12 for consistency
			this.add_view("main", '<div class="row layout-main">\
					<div class="col-md-12 layout-main-section-wrapper">\
						<div class="layout-main-section"></div>\
						<div class="layout-footer hide"></div>\
					</div>\
				</div>');
		} else {
			this.add_view("main", '<div class="row layout-main">\
				<div class="col-md-2 layout-side-section"></div>\
				<div class="col-md-10 layout-main-section-wrapper">\
					<div class="layout-main-section"></div>\
					<div class="layout-footer hide"></div>\
				</div>\
			</div>');
		}

		this.setup_page();
	},

	setup_page: function() {
		this.$title_area = this.wrapper.find("h1");

		this.$sub_title_area = this.wrapper.find("h6");

		if(this.set_document_title!==undefined)
			this.set_document_title = this.set_document_title;

		if(this.title)
			this.set_title(this.title);

		if(this.icon)
			this.get_main_icon(this.icon);

		this.body = this.main = this.wrapper.find(".layout-main-section");
		this.sidebar = this.wrapper.find(".layout-side-section");
		this.footer = this.wrapper.find(".layout-footer");
		this.indicator = this.wrapper.find(".indicator");

		this.page_actions = this.wrapper.find(".page-actions");

		this.btn_primary = this.page_actions.find(".primary-action");
		this.btn_secondary = this.page_actions.find(".btn-secondary");

		this.menu = this.page_actions.find(".menu-btn-group .dropdown-menu");
		this.menu_btn_group = this.page_actions.find(".menu-btn-group");

		this.actions = this.page_actions.find(".actions-btn-group .dropdown-menu");
		this.actions_btn_group = this.page_actions.find(".actions-btn-group");

		this.page_form = $('<div class="page-form row hide"></div>').prependTo(this.main);
		this.inner_toolbar = $('<div class="form-inner-toolbar hide"></div>').prependTo(this.main);
		this.icon_group = this.page_actions.find(".page-icon-group");

		if(this.make_page) {
			this.make_page();
		}
	},

	set_indicator: function(label, color) {
		this.clear_indicator().removeClass("hide").html(`<span class='hidden-xs'>${label}</span>`).addClass(color);
	},

	add_action_icon: function(icon, click) {
		return $('<a class="text-muted no-decoration"><i class="'+icon+'"></i></a>')
			.appendTo(this.icon_group.removeClass("hide"))
			.click(click);
	},

	clear_indicator: function() {
		return this.indicator.removeClass().addClass("indicator hide");
	},

	get_icon_label: function(icon, label) {
		return '<i class="visible-xs ' + icon + '"></i><span class="hidden-xs">' + label + '</span>'
	},

	set_action: function(btn, opts) {
		let me = this;
		if (opts.icon) {
			opts.label = this.get_icon_label(opts.icon, opts.label);
		}

		this.clear_action_of(btn);

		btn.removeClass("hide")
			.prop("disabled", false)
			.html(opts.label)
			.on("click", function() {
				let response = opts.click.apply(this);
				me.btn_disable_enable(btn, response);
			});

		if (opts.working_label) {
			btn.attr("data-working-label", opts.working_label);
		}
	},

	set_primary_action: function(label, click, icon, working_label) {
		this.set_action(this.btn_primary, {
			label: label,
			click: click,
			icon: icon,
			working_label: working_label
		});

		return this.btn_primary;
	},

	set_secondary_action: function(label, click, icon, working_label) {
		this.set_action(this.btn_secondary, {
			label: label,
			click: click,
			icon: icon,
			working_label: working_label
		});

		return this.btn_secondary;
	},

	clear_action_of: function(btn) {
		btn.addClass("hide").unbind("click").removeAttr("data-working-label");
	},

	clear_primary_action: function() {
		this.clear_action_of(this.btn_primary);
	},

	clear_secondary_action: function() {
		this.clear_action_of(this.btn_secondary);
	},

	clear_actions: function() {
		this.clear_primary_action();
		this.clear_secondary_action();
	},

	clear_icons: function() {
		this.icon_group.addClass("hide").empty();
	},

	//--- Menu --//

	add_menu_item: function(label, click, standard) {
		return this.add_dropdown_item(label, click, standard, this.menu);
	},

	clear_menu: function() {
		this.clear_btn_group(this.menu);
	},

	show_menu: function() {
		this.menu_btn_group.removeClass("hide");
	},

	hide_menu: function() {
		this.menu_btn_group.addClass("hide");
	},

	show_icon_group: function() {
		this.icon_group.removeClass("hide");
	},

	hide_icon_group: function() {
		this.icon_group.addClass("hide");
	},

	//--- Actions (workflow) --//

	add_action_item: function(label, click, standard) {
		return this.add_dropdown_item(label, click, standard, this.actions);
	},

	clear_actions_menu: function() {
		this.clear_btn_group(this.actions);
	},

	//-- Generic --//

	/*
	* Add label to given drop down menu. If label, is already contained in the drop
	* down menu, it will be ignored.
	* @param {string} label - Text for the drop down menu
	* @param {function} click - function to be called when `label` is clicked
	* @param {Boolean} standard
	* @param {object} parent - DOM object representing the parent of the drop down item lists
	*/
	add_dropdown_item: function(label, click, standard, parent) {
		let item_selector = 'li > a.grey-link';

		parent.parent().removeClass("hide");

		var $li = $('<li><a class="grey-link">'+ label +'</a><li>'),
			$link = $li.find("a").on("click", click);

		if (this.is_in_group_button_dropdown(parent, item_selector, label)) return;

		if(standard===true) {
			$li.appendTo(parent);
		} else {
			this.divider = parent.find(".divider");
			if(!this.divider.length) {
				this.divider = $('<li class="divider user-action"></li>').prependTo(parent);
			}
			$li.addClass("user-action").insertBefore(this.divider);
		}

		return $link;
	},

	/*
	* Check if there already exists a button with a specified label in a specified button group
	* @param {object} parent - This should be the `ul` of the button group.
	* @param {string} selector - CSS Selector of the button to be searched for. By default, it is `li`.
	* @param {string} label - Label of the button
	*/
	is_in_group_button_dropdown: function(parent, selector, label){
		if (!selector) selector = 'li';

		if (!label || !parent) return false;

		const result = $(parent).find(`${selector}:contains('${label}')`)
			.filter(function() {
				return $(this).text() === label;
			});
		return result.length > 0;
	},

	clear_btn_group: function(parent) {
		parent.empty();
		parent.parent().addClass("hide");
	},

	add_divider: function() {
		return $('<li class="divider"></li>').appendTo(this.menu);
	},

	get_or_add_inner_group_button: function(label) {
		var $group = this.inner_toolbar.find('.btn-group[data-label="'+label+'"]');
		if(!$group.length) {
			$group = $('<div class="btn-group" data-label="'+label+'" style="margin-left: 10px;">\
				<button type="button" class="btn btn-default dropdown-toggle btn-xs" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">\
				'+label+' <span class="caret"></span></button>\
				<ul class="dropdown-menu" style="margin-top: -8px;"></ul></div>').appendTo(this.inner_toolbar);
		}
		return $group;
	},

	get_inner_group_button: function(label) {
		return this.inner_toolbar.find('.btn-group[data-label="'+label+'"]');
	},

	set_inner_btn_group_as_primary: function(label) {
		this.get_or_add_inner_group_button(label).find("button").removeClass("btn-default").addClass("btn-primary");
	},

	btn_disable_enable: function(btn, response) {
		if (response && response.then) {
			btn.prop('disabled', true);
			response.then(() => {
				btn.prop('disabled', false);
			})
		} else if (response && response.always) {
			btn.prop('disabled', true);
			response.always(() => {
				btn.prop('disabled', false);
			});
		}
	},

	/*
	* Add button to button group. If there exists another button with the same label,
	* `add_inner_button` will not add the new button to the button group even if the callback
	* function is different.
	*
	* @param {string} label - Label of the button to be added to the group
	* @param {object} action - function to be called when button is clicked
	* @param {string} group - Label of the group button
	*/
	add_inner_button: function(label, action, group) {
		var me = this;
		let _action = function() {
			let btn = $(this);
			let response = action();
			me.btn_disable_enable(btn, response);
		};
		if(group) {
			var $group = this.get_or_add_inner_group_button(group);
			$(this.inner_toolbar).removeClass("hide");

			if (!this.is_in_group_button_dropdown($group.find(".dropdown-menu"), 'li', label)) {
				return $('<li><a>'+label+'</a></li>')
					.on('click', _action)
					.appendTo($group.find(".dropdown-menu"));
			}

		} else {
			return $('<button class="btn btn-default btn-xs" style="margin-left: 10px;">'+__(label)+'</btn>')
				.on("click", _action)
				.appendTo(this.inner_toolbar.removeClass("hide"));
		}
	},

	remove_inner_button: function(label, group) {
		if (typeof label === 'string') {
			label = [label];
		}
		// translate
		label = label.map(l => __(l));

		if (group) {
			var $group = this.get_inner_group_button(__(group));
			if($group.length) {
				$group.find('.dropdown-menu li a')
					.filter((i, btn) => label.includes($(btn).text()))
					.remove();
			}
			if ($group.find('.dropdown-menu li a').length === 0) $group.remove();
		} else {

			this.inner_toolbar.find('button')
				.filter((i, btn) =>  label.includes($(btn).text()))
				.remove();
		}
	},

	clear_inner_toolbar: function() {
		this.inner_toolbar.empty().addClass("hide");
	},

	//-- Sidebar --//

	add_sidebar_item: function(label, action, insert_after, prepend) {
		var parent = this.sidebar.find(".sidebar-menu.standard-actions");
		var li = $('<li>');
		var link = $('<a>').html(label).on("click", action).appendTo(li);

		if(insert_after) {
			li.insertAfter(parent.find(insert_after));
		} else {
			if(prepend) {
				li.prependTo(parent);
			} else {
				li.appendTo(parent);
			}
		}
		return link;
	},

	//---//

	clear_user_actions: function() {
		this.menu.find(".user-action").remove();
	},

	// page::title
	get_title_area: function() {
		return this.$title_area;
	},

	set_title: function(txt, icon) {
		if(!txt) txt = "";

		// strip html
		txt = strip_html(txt);
		this.title = txt;

		frappe.utils.set_title(txt);
		if(icon) {
			txt = '<span class="'+ icon +' text-muted" style="font-size: inherit;"></span> ' + txt;
		}
		this.$title_area.find(".title-text").html(txt);
	},

	set_title_sub: function(txt) {
		// strip icon
		this.$sub_title_area.html(txt).toggleClass("hide", !!!txt);
	},

	get_main_icon: function(icon) {
		return this.$title_area.find(".title-icon")
			.html('<i class="'+icon+' fa-fw"></i> ')
			.toggle(true);
	},

	add_help_button: function(txt) {
		//
	},

	add_button: function(label, click, icon, is_title) {
		//
	},

	add_dropdown_button: function(parent, label, click, icon) {
		frappe.ui.toolbar.add_dropdown_button(parent, label, click, icon);
	},

	// page::form
	add_label: function(label) {
		this.show_form();
		return $("<label class='col-md-1 page-only-label'>"+label+" </label>")
			.appendTo(this.page_form);
	},
	add_select: function(label, options) {
		var field = this.add_field({label:label, fieldtype:"Select"});
		return field.$wrapper.find("select").empty().add_options(options);
	},
	add_data: function(label) {
		var field = this.add_field({label: label, fieldtype: "Data"});
		return field.$wrapper.find("input").attr("placeholder", label);
	},
	add_date: function(label, date) {
		var field = this.add_field({label: label, fieldtype: "Date", "default": date});
		return field.$wrapper.find("input").attr("placeholder", label);
	},
	add_check: function(label) {
		return $("<div class='checkbox'><label><input type='checkbox'>" + label + "</label></div>")
			.appendTo(this.page_form)
			.find("input");
	},
	add_break: function() {
		// add further fields in the next line
		this.page_form.append('<div class="clearfix invisible-xs"></div>');
	},
	add_field: function(df) {
		this.show_form();
		var f = frappe.ui.form.make_control({
			df: df,
			parent: this.page_form,
			only_input: df.fieldtype=="Check" ? false : true,
		})
		f.refresh();
		$(f.wrapper)
			.addClass('col-md-2')
			.attr("title", __(df.label)).tooltip();

		// html fields in toolbar are only for display
		if (df.fieldtype=='HTML') {
			return;
		}

		// hidden fields dont have $input
		if (!f.$input) f.make_input();

		f.$input.addClass("input-sm").attr("placeholder", __(df.label));

		if(df.fieldtype==="Check") {
			$(f.wrapper).find(":first-child")
				.removeClass("col-md-offset-4 col-md-8");
		}

		if(df.fieldtype=="Button") {
			$(f.wrapper).find(".page-control-label").html("&nbsp;")
			f.$input.addClass("btn-sm").css({"width": "100%", "margin-top": "-1px"});
		}

		if(df["default"])
			f.set_input(df["default"])
		this.fields_dict[df.fieldname || df.label] = f;
		return f;
	},
	show_form: function() {
		this.page_form.removeClass("hide");
	},
	get_form_values: function() {
		var values = {};
		this.page_form.fields_dict.forEach(function(field, key) {
			values[key] = field.get_value();
		});
		return values;
	},
	add_view: function(name, html) {
		let element = html;
		if(typeof(html) === "string") {
			element = $(html);
		}
		this.views[name] = element.appendTo($(this.wrapper).find(".page-content"));
		if(!this.current_view) {
			this.current_view = this.views[name];
		} else {
			this.views[name].toggle(false);
		}
		return this.views[name];
	},
	set_view: function(name) {
		if(this.current_view_name===name)
			return;
		this.current_view && this.current_view.toggle(false);
		this.current_view = this.views[name];

		this.previous_view_name = this.current_view_name;
		this.current_view_name = name;

		this.views[name].toggle(true);

		this.wrapper.trigger('view-change');
	},
});

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/slides.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// License: GNU General Public License v3. See license.txt

frappe.provide("frappe.ui");

frappe.ui.Slide = class Slide {
	constructor(slide = null) {
		$.extend(this, slide);
		this.setup();
	}

	setup() {
		this.$wrapper = $('<div class="slide-wrapper hidden"></div>')
			.attr({"data-slide-id": this.id, "data-slide-name": this.name})
			.appendTo(this.parent);
	}

	// Make has to be called manually, to account for on-demand use cases
	make() {
		if(this.before_load) { this.before_load(this); }

		this.$body = $(`<div class="slide-body">
			<div class="content text-center">
				<p class="title lead">${this.title}</p>
			</div>
			<div class="form-wrapper">
				<div class="form"></div>
				<div class="add-more text-center" style="margin-top: 5px;">
					<a class="form-more-btn hide btn btn-default btn-xs">${__("Add More")}</a>
				</div>
			</div>
		</div>`).appendTo(this.$wrapper);

		this.$content = this.$body.find(".content");
		this.$form = this.$body.find(".form");
		this.$primary_btn = this.slides_footer.find('.primary');

		if(this.help) this.$content.append($(`<p class="slide-help">${this.help}</p>`));
		if(this.image_src) this.$content.append(
			$(`<img src="${this.image_src}" style="margin: 20px;">`));

		this.reqd_fields = [];

		this.refresh();
		this.made = true;
	}

	refresh() {
		this.render_parent_dots();
		if(!this.done) {
			this.setup_form();
		} else {
			this.setup_done_state();
		}
	}

	setup_form() {
		this.form = new frappe.ui.FieldGroup({
			fields: this.get_atomic_fields(),
			body: this.$form[0],
			no_submit_on_enter: true
		});
		this.form.make();
		if(this.add_more) this.bind_more_button();

		this.set_reqd_fields();

		if(this.onload) { this.onload(this); }
		this.set_reqd_fields();
	}

	// Form methods
	get_atomic_fields() {
		var fields = JSON.parse(JSON.stringify(this.fields));
		if(this.add_more) {
			this.count = 1;
			fields = fields.map((field, i) => {
				if(field.fieldname) {
					field.fieldname += '_1';
				}
				if(i === 1 && this.mandatory_entry) {
					field.reqd = 1;
				}
				if(!field.static) {
					if(field.label) field.label += ' 1';
				}
				return field;
			});
		}
		return fields;
	}

	set_reqd_fields() {
		var dict = this.form.fields_dict;
		this.reqd_fields = [];
		Object.keys(dict).map(key => {
			if(dict[key].df.reqd) {
				this.reqd_fields.push(dict[key]);
			}
		});
	}

	set_values() {
		this.values = this.form.get_values();
		if(this.values===null) {
			return false;
		}
		if(this.validate && !this.validate()) {
			return false;
		}
		return true;
	}

	bind_more_button() {
		this.$more = this.$body.find('.form-more-btn');
		this.$more.removeClass('hide')
			.on('click', () => {
				this.count++;
				var fields = JSON.parse(JSON.stringify(this.fields));
				this.form.add_fields(fields.map(field => {
					if(field.fieldname) field.fieldname += '_' + this.count;
					if(!field.static) {
						if(field.label) field.label += ' ' + this.count;
					}
					return field;
				}));
				if(this.count === this.max_count) {
					this.$more.addClass('hide');
				}
			});
	}

	// Primary button (outside of slide)
	resetup_primary_button() {
		this.unbind_primary_action();
		this.bind_fields_to_action_btn();
		this.reset_action_button_state();
		this.bind_primary_action();
	}

	bind_fields_to_action_btn() {
		var me = this;
		this.reqd_fields.map((field) => {
			field.$wrapper.on('change input', () => {
				me.reset_action_button_state();
			});
		});
	}

	reset_action_button_state() {
		var empty_fields = this.reqd_fields.filter((field) => {
			return !field.get_value();
		});
		if(empty_fields.length) {
			this.slides_footer.find('.action').addClass('disabled');
		} else {
			this.slides_footer.find('.action').removeClass('disabled');
		}
	}

	unbind_primary_action() {
		this.slides_footer.find(".primary").off();
	}

	bind_primary_action() {
		this.slides_footer.find(".primary").on('click', () => {
			this.primary_action();
		});
	}

	before_show() { }

	show_slide() {
		this.$wrapper.removeClass("hidden");
		this.before_show();
		this.resetup_primary_button();
		if(!this.done) {
			this.$body.find('.form-control').first().focus();
			this.$primary_btn.show();
		} else {
			this.$primary_btn.hide();
		}
	}

	hide_slide() {
		this.$wrapper.addClass("hidden");
	}

	get_input(fieldname) {
		return this.form.get_input(fieldname);
	}

	get_field(fieldname) {
		return this.form.get_field(fieldname);
	}

	get_value(fieldname) {
		return this.form.get_value(fieldname);
	}

	destroy() {
		this.$body.remove();
	}

	primary_action() { }
};

frappe.ui.Slides = class Slides {
	constructor({
		parent = null,
		slides = [],
		slide_class = null,
		unidirectional = 0,
		done_state = 0,
		before_load = null,
		on_update = null
	}) {
		this.parent = parent;
		this.slides = slides;
		this.slide_class = slide_class;
		this.unidirectional = unidirectional;
		this.done_state = done_state;
		this.before_load = before_load;
		this.on_update = on_update;

		this.slide_dict = {};

		//In case of refreshing
		this.made_slide_ids = [];
		this.values = {};
		this.make();
	}

	make() {
		this.container = $('<div>').addClass("slides-wrapper").attr({"tabindex": -1})
			.appendTo(this.parent);
		this.$slide_progress = $(`<div>`).addClass(`slides-progress text-center text-extra-muted`)
			.appendTo(this.container);
		this.$body = $(`<div>`).addClass(`slide-container`)
			.appendTo(this.container);
		this.$footer = $(`<div>`).addClass(`footer`)
			.appendTo(this.container);

		this.render_progress_dots();
		this.make_prev_next_buttons();
		if(this.before_load) { this.before_load(this.$footer); }

		// can be on demand
		this.setup();

		// can be on demand
		this.show_slide(0);
	}

	setup() {
		this.slides.map((slide, id) => {
			if(!this.slide_dict[id]) {
				this.slide_dict[id] = new (this.slide_class)(
					$.extend(this.slides[id], {
						parent: this.$body,
						slides_footer: this.$footer,
						render_parent_dots: this.render_progress_dots.bind(this),
						id: id,
					})
				);
				if(!this.unidirectional) {
					this.slide_dict[id].make();
				}
			} else {
				if(this.made_slide_ids.includes(id+"")) {
					this.slide_dict[id].destroy();
					this.slide_dict[id].make();
				}
			}
		});
	}

	refresh(id) {
		this.render_progress_dots();
		this.show_hide_prev_next(id);
		this.$body.find('.form-control').first().focus();
	}

	render_progress_dots() {
		// Depends on this.unidirectional and this.done_state
		// Can be called by a slide to update states
		this.$slide_progress.empty();

		this.slides.map((slide, id) => {
			let $dot = $(`<i class="fa fa-fw fa-circle"> </i> `)
				.attr({'data-step-id': id});

			if(this.done_state && (this.slide_dict[id] &&
				this.slide_dict[id].done || slide.done)) {
				$dot.addClass('text-success');
			}
			if((this.unidirectional && id <= this.current_id) ||
				id === this.current_id) {
				$dot.addClass('active');
			}
			// Add pointer event for non-unidirectional
			this.$slide_progress.append($dot);
		});

		this.completed = 0;
		this.slides.map((slide, i) => {
			if(this.slide_dict[i]) {
				if(this.slide_dict[i].done) this.completed++;
			} else {
				if(slide.done) this.completed++;
			}
		});
		if(this.on_update) {this.on_update(this.completed, this.slides.length);}

		if(!this.unidirectional) this.bind_progress_dots();
	}

	make_prev_next_buttons() {
		$(`<div class="row">
			<div class="col-sm-4">
				<a class="prev-btn btn btn-default btn-sm" tabindex="0">${__("Previous")}</a>
			</div>
			<div class="col-sm-8 text-right">
				<a class="next-btn btn btn-default btn-sm" tabindex="0">${__("Next")}</a>
			</div>
		</div>`).appendTo(this.$footer);

		this.$prev_btn = this.$footer.find('.prev-btn').attr('tabIndex', 0)
			.on('click', () => { this.show_slide(this.current_id - 1); });

		this.$next_btn = this.$footer.find('.next-btn').attr('tabIndex', 0)
			.on('click', () => {
				if (!this.unidirectional || (this.unidirectional && this.current_slide.set_values())) {
					this.show_slide(this.current_id + 1);
				}
			});
	}

	bind_progress_dots() {
		var me = this;
		this.$slide_progress.find('.fa-circle').addClass('link').on('click', function() {
			let id = $(this).attr('data-step-id');
			me.show_slide(id);
		});
	}

	before_show_slide() {
		return true;
	}

	show_slide(id) {
		id = cint(id);
		if(!this.before_show_slide() ||
			(this.current_slide && this.current_id===id)) {
			return;
		}

		this.update_values();

		if(this.current_slide) this.current_slide.hide_slide();
		if(this.unidirectional && !this.slide_dict[id].made) {
			this.slide_dict[id].make();
		}
		this.current_id = id;
		this.current_slide = this.slide_dict[id];
		this.current_slide.show_slide();
		this.refresh(id);
	}

	destroy_slide(id) {
		if(this.slide_dict[id]) this.slide_dict[id].destroy();
		this.slide_dict[id] = null;
	}

	on_update(completed, total) {}

	show_hide_prev_next(id) {
		(id === 0) ?
			this.$prev_btn.hide() : this.$prev_btn.show();
		(id + 1 === this.slides.length) ?
			this.$next_btn.hide() : this.$next_btn.show();
	}

	get_values() {
		var values = {};
		$.each(this.slide_dict, function(id, slide) {
			if(slide.values) {
				$.extend(values, slide.values);
			}
		});
		return values;
	}

	update_values() {
		this.values = $.extend(this.values, this.get_values());
	}
};
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/find.js
 */
frappe.find = {
	page_primary_action: () => {
		return $('.page-actions:visible .btn-primary');
	},
	field: (fieldname, value) => {
		return new Promise(resolve => {
			let input = $(`[data-fieldname="${fieldname}"] :input`);
			if(value) {
				input.val(value).trigger('change');
				frappe.after_ajax(() => { resolve(input); });
			} else {
				resolve(input);
			}
		});
	}
};
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/iconbar.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.ui.IconBar = Class.extend({
	init: function(parent, n_groups) {
		this.parent = parent;
		this.buttons = {};
		this.make(n_groups);
	},
	make: function(n_groups) {
		this.$wrapper = $('<div class="iconbar-wrapper hide"></div>').appendTo(this.parent);
		for(var i=0; i<n_groups; i++) {
			this.get_group(i+1);
		}
	},
	get_group: function(group) {
		var $ul = this.$wrapper.find(".iconbar-"+group+" ul");
		
		if(!$ul.length)
			$ul = $('<div class="iconbar iconbar-'+group+' hide"><ul></ul></div>')
				.appendTo(this.$wrapper).find("ul");
		
		return $ul;
	},
	add_btn: function(group, icon, label, click) {
		var $ul = this.get_group(group);
		var $li = $('<li><i class="'+icon+'"></i></li>')
			.appendTo($ul)
			.on("click", function() {
				click.apply(this);
				return false;
			});
			
		$li.find("i").attr("title", label).tooltip();

			
		this.$wrapper.find(".iconbar-" + group).removeClass("hide")
		this.show();
		return $li;
	},
	hide: function(group) {
		if(group) {
			this.$wrapper.find(".iconbar-" + group).addClass("hide");
			this.check_if_all_hidden();
		} else {
			this.$wrapper.addClass("hide").trigger("hidden");
		}
	},
	show: function(group) {
		if(group) {
			this.$wrapper.find(".iconbar-" + group).removeClass("hide");
			this.show();
		} else {
			if(this.$wrapper.hasClass("hide"))
				this.$wrapper.removeClass("hide").trigger("shown");
		}
	},
	clear: function(group) {
		var me = this;
		this.$wrapper.find(".iconbar-" + group).addClass("hide").find("ul").empty();
		this.check_if_all_hidden();
	},
	check_if_all_hidden: function() {
		if(!this.$wrapper.find(".iconbar:visible").length) {
			this.hide();
		}
	}
})
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/form/layout.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt
frappe.provide("frappe.ui.form");

// 	- page
//		- section
//			- column
//		- section


frappe.ui.form.Layout = Class.extend({
	init: function(opts) {
		this.views = {};
		this.pages = [];
		this.sections = [];
		this.fields_list = [];
		this.fields_dict = {};

		$.extend(this, opts);
	},
	make: function() {
		if(!this.parent && this.body) {
			this.parent = this.body;
		}
		this.wrapper = $('<div class="form-layout">').appendTo(this.parent);
		this.message = $('<div class="form-message text-muted small hidden"></div>').appendTo(this.wrapper);
		if(!this.fields) {
			this.fields = this.get_doctype_fields();
		}
		this.setup_tabbing();
		this.render();
	},
	show_empty_form_message: function() {
		if(!(this.wrapper.find(".frappe-control:visible").length || this.wrapper.find(".section-head.collapsed").length)) {
			this.show_message(__("This form does not have any input"));
		}
	},
	get_doctype_fields: function() {
		let fields = [
			{
				parent: this.frm.doctype,
				fieldtype: 'Data',
				fieldname: '__newname',
				reqd: 1,
				hidden: 1,
				label: __('Name'),
				get_status: function(field) {
					if (field.frm && field.frm.is_new()
						&& field.frm.meta.autoname
						&& ['prompt', 'name'].includes(field.frm.meta.autoname.toLowerCase())) {
						return 'Write';
					}
					return 'None';
				}
			}
		];
		fields = fields.concat(frappe.meta.sort_docfields(frappe.meta.docfield_map[this.doctype]));
		return fields;
	},
	show_message: function(html) {
		if(html) {
			if(html.substr(0, 1)!=='<') {
				// wrap in a block
				html = '<div>' + html + '</div>';
			}
			$(html).appendTo(this.message.removeClass('hidden'));
		} else {
			this.message.empty().addClass('hidden');
		}
	},
	render: function(new_fields) {
		var me = this;
		var fields = new_fields || this.fields;

		this.section = null;
		this.column = null;

		if (this.with_dashboard) {
			this.setup_dashboard_section();
		}

		if (this.no_opening_section()) {
			this.make_section();
		}
		$.each(fields, function(i, df) {
			switch(df.fieldtype) {
				case "Fold":
					me.make_page(df);
					break;
				case "Section Break":
					me.make_section(df);
					break;
				case "Column Break":
					me.make_column(df);
					break;
				default:
					me.make_field(df);
			}
		});

	},

	no_opening_section: function() {
		return (this.fields[0] && this.fields[0].fieldtype!="Section Break") || !this.fields.length;
	},

	setup_dashboard_section: function() {
		if (this.no_opening_section()) {
			this.fields.unshift({fieldtype: 'Section Break'});
		}

		this.fields.unshift({
			fieldtype: 'Section Break',
			fieldname: '_form_dashboard',
			label: __('Dashboard'),
			cssClass: 'form-dashboard',
			collapsible: 1,
			//hidden: 1
		});
	},

	make_field: function(df, colspan, render = false) {
		!this.section && this.make_section();
		!this.column && this.make_column();

		var fieldobj = frappe.ui.form.make_control({
			df: df,
			doctype: this.doctype,
			parent: this.column.wrapper.get(0),
			frm: this.frm,
			render_input: render
		});

		fieldobj.layout = this;
		this.fields_list.push(fieldobj);
		this.fields_dict[df.fieldname] = fieldobj;
		if(this.frm) {
			fieldobj.perm = this.frm.perm;
		}

		this.section.fields_list.push(fieldobj);
		this.section.fields_dict[df.fieldname] = fieldobj;
	},
	make_page: function(df) {
		var me = this,
			head = $('<div class="form-clickable-section text-center">\
				<a class="btn-fold h6 text-muted">'+__("Show more details")+'</a>\
			</div>').appendTo(this.wrapper);

		this.page = $('<div class="form-page second-page hide"></div>').appendTo(this.wrapper);

		this.fold_btn = head.find(".btn-fold").on("click", function() {
			var page = $(this).parent().next();
			if(page.hasClass("hide")) {
				$(this).removeClass("btn-fold").html(__("Hide details"));
				page.removeClass("hide");
				frappe.utils.scroll_to($(this), true, 30);
				me.folded = false;
			} else {
				$(this).addClass("btn-fold").html(__("Show more details"));
				page.addClass("hide");
				me.folded = true;
			}
		});

		this.section = null;
		this.folded = true;
	},

	unfold: function() {
		this.fold_btn.trigger('click');
	},

	make_section: function(df) {
		this.section = new frappe.ui.form.Section(this, df);

		// append to layout fields
		if(df) {
			this.fields_dict[df.fieldname] = this.section;
			this.fields_list.push(this.section);
		}

		this.column = null;
	},

	make_column: function(df) {
		this.column = new frappe.ui.form.Column(this.section, df);
		if(df && df.fieldname) {
			this.fields_list.push(this.column);
		}
	},

	refresh: function(doc) {
		var me = this;
		if(doc) this.doc = doc;

		if (this.frm) {
			this.wrapper.find(".empty-form-alert").remove();
		}

		// NOTE this might seem redundant at first, but it needs to be executed when frm.refresh_fields is called
		me.attach_doc_and_docfields(true);

		if(this.frm && this.frm.wrapper) {
			$(this.frm.wrapper).trigger("refresh-fields");
		}

		// dependent fields
		this.refresh_dependency();

		// refresh sections
		this.refresh_sections();

		// collapse sections
		if(this.frm) {
			this.refresh_section_collapse();
		}
	},

	refresh_sections: function() {
		var cnt = 0;

		// hide invisible sections and set alternate background color
		this.wrapper.find(".form-section:not(.hide-control)").each(function() {
			var $this = $(this).removeClass("empty-section")
				.removeClass("visible-section")
				.removeClass("shaded-section");
			if(!$this.find(".frappe-control:not(.hide-control)").length
				&& !$this.hasClass('form-dashboard')) {
				// nothing visible, hide the section
				$this.addClass("empty-section");
			} else {
				$this.addClass("visible-section");
				if(cnt % 2) {
					$this.addClass("shaded-section");
				}
				cnt ++;
			}
		});
	},

	refresh_fields: function(fields) {
		let fieldnames = fields.map((field) => {
			if(field.fieldname) return field.fieldname;
		});

		this.fields_list.map(fieldobj => {
			if(fieldnames.includes(fieldobj.df.fieldname)) {
				fieldobj.refresh();
				if(fieldobj.df["default"]) {
					fieldobj.set_input(fieldobj.df["default"]);
				}
			}
		});
	},

	add_fields: function(fields) {
		this.render(fields);
		this.refresh_fields(fields);
	},

	refresh_section_collapse: function() {
		if(!this.doc) return;

		for(var i=0; i<this.sections.length; i++) {
			var section = this.sections[i];
			var df = section.df;
			if(df && df.collapsible) {
				var collapse = true;

				if(df.collapsible_depends_on) {
					collapse = !this.evaluate_depends_on_value(df.collapsible_depends_on);
				}

				if (collapse && section.has_missing_mandatory()) {
					collapse = false;
				}

				if(df.fieldname === '_form_dashboard') {
					collapse = false;
				}

				section.collapse(collapse);
			}
		}
	},

	attach_doc_and_docfields: function(refresh) {
		var me = this;
		for(var i=0, l=this.fields_list.length; i<l; i++) {
			var fieldobj = this.fields_list[i];
			if(me.doc) {
				fieldobj.doc = me.doc;
				fieldobj.doctype = me.doc.doctype;
				fieldobj.docname = me.doc.name;
				fieldobj.df = frappe.meta.get_docfield(me.doc.doctype,
					fieldobj.df.fieldname, me.frm ? me.frm.doc.name : me.doc.name) || fieldobj.df;

				// on form change, permissions can change
				if(me.frm) {
					fieldobj.perm = me.frm.perm;
				}
			}
			refresh && fieldobj.refresh && fieldobj.refresh();
		}
	},

	refresh_section_count: function() {
		this.wrapper.find(".section-count-label:visible").each(function(i) {
			$(this).html(i+1);
		});
	},
	setup_tabbing: function() {
		var me = this;
		this.wrapper.on("keydown", function(ev) {
			if(ev.which==9) {
				var current = $(ev.target),
					doctype = current.attr("data-doctype"),
					fieldname = current.attr("data-fieldname");
				if(doctype)
					return me.handle_tab(doctype, fieldname, ev.shiftKey);
			}
		});
	},
	handle_tab: function(doctype, fieldname, shift) {
		var me = this,
			grid_row = null,
			prev = null,
			fields = me.fields_list,
			in_grid = false,
			focused = false;

		// in grid
		if(doctype != me.doctype) {
			grid_row = me.get_open_grid_row();
			if(!grid_row || !grid_row.layout) {
				return;
			}
			fields = grid_row.layout.fields_list;
		}

		for(var i=0, len=fields.length; i < len; i++) {
			if(fields[i].df.fieldname==fieldname) {
				if(shift) {
					if(prev) {
						this.set_focus(prev);
					} else {
						$(this.primary_button).focus();
					}
					break;
				}
				if(i < len-1) {
					focused = me.focus_on_next_field(i, fields);
				}

				if (focused) {
					break;
				}
			}
			if(this.is_visible(fields[i]))
				prev = fields[i];
		}

		if (!focused) {
			// last field in this group
			if(grid_row) {
				// in grid
				if(grid_row.doc.idx==grid_row.grid.grid_rows.length) {
					// last row, close it and find next field
					grid_row.toggle_view(false, function() {
						grid_row.grid.frm.layout.handle_tab(grid_row.grid.df.parent, grid_row.grid.df.fieldname);
					});
				} else {
					// next row
					grid_row.grid.grid_rows[grid_row.doc.idx].toggle_view(true);
				}
			} else {
				$(this.primary_button).focus();
			}
		}

		return false;
	},
	focus_on_next_field: function(start_idx, fields) {
		// loop to find next eligible fields
		for(var i= start_idx + 1, len = fields.length; i < len; i++) {
			var field = fields[i];
			if(this.is_visible(field)) {
				if(field.df.fieldtype==="Table") {
					// open table grid
					if(!(field.grid.grid_rows && field.grid.grid_rows.length)) {
						// empty grid, add a new row
						field.grid.add_new_row();
					}
					// show grid row (if exists)
					field.grid.grid_rows[0].show_form();
					return true;

				} else if(!in_list(frappe.model.no_value_type, field.df.fieldtype)) {
					this.set_focus(field);
					return true;
				}
			}
		}
	},
	is_visible: function(field) {
		return field.disp_status==="Write" && (field.$wrapper && field.$wrapper.is(":visible"));
	},
	set_focus: function(field) {
		// next is table, show the table
		if(field.df.fieldtype=="Table") {
			if(!field.grid.grid_rows.length) {
				field.grid.add_new_row(1);
			} else {
				field.grid.grid_rows[0].toggle_view(true);
			}
		}
		else if(field.editor) {
			field.editor.set_focus();
		}
		else if(field.$input) {
			field.$input.focus();
		}
	},
	get_open_grid_row: function() {
		return $(".grid-row-open").data("grid_row");
	},
	refresh_dependency: function() {
		// Resolve "depends_on" and show / hide accordingly
		var me = this;

		// build dependants' dictionary
		var has_dep = false;

		for(var fkey in this.fields_list) {
			var f = this.fields_list[fkey];
			f.dependencies_clear = true;
			if(f.df.depends_on) {
				has_dep = true;
			}
		}

		if(!has_dep)return;

		// show / hide based on values
		for(var i=me.fields_list.length-1;i>=0;i--) {
			var f = me.fields_list[i];
			f.guardian_has_value = true;
			if(f.df.depends_on) {
				// evaluate guardian

				f.guardian_has_value = this.evaluate_depends_on_value(f.df.depends_on);

				// show / hide
				if(f.guardian_has_value) {
					if(f.df.hidden_due_to_dependency) {
						f.df.hidden_due_to_dependency = false;
						f.refresh();
					}
				} else {
					if(!f.df.hidden_due_to_dependency) {
						f.df.hidden_due_to_dependency = true;
						f.refresh();
					}
				}
			}
		}

		this.refresh_section_count();
	},
	evaluate_depends_on_value: function(expression) {
		var out = null;
		var doc = this.doc;

		if (!doc && this.get_values) {
			var doc = this.get_values(true);
		}

		if (!doc) {
			return;
		}

		var parent = this.frm ? this.frm.doc : null;

		if(expression.substr(0,5)=='eval:') {
			try {
				out = eval(expression.substr(5));
			} catch(e) {
				frappe.throw(__('Invalid "depends_on" expression'));
			}

		} else if(expression.substr(0,3)=='fn:' && this.frm) {
			out = this.frm.script_manager.trigger(expression.substr(3), this.doctype, this.docname);
		} else {
			var value = doc[expression];
			if($.isArray(value)) {
				out = !!value.length;
			} else {
				out = !!value;
			}
		}

		return out;
	}
});

frappe.ui.form.Section = Class.extend({
	init: function(layout, df) {
		var me = this;
		this.layout = layout;
		this.df = df || {};
		this.fields_list = [];
		this.fields_dict = {};

		this.make();
		// if(this.frm)
		// 	this.section.body.css({"padding":"0px 3%"})
		this.row = {
			wrapper: this.wrapper
		};

		if(this.df.collapsible) {
			this.collapse(true);
		}

		this.refresh();
	},
	make: function() {
		if(!this.layout.page) {
			this.layout.page = $('<div class="form-page"></div>').appendTo(this.layout.wrapper);
		}

		this.wrapper = $('<div class="row form-section">')
			.appendTo(this.layout.page);
		this.layout.sections.push(this);

		if(this.df) {
			if(this.df.label) {
				this.make_head();
			}
			if(this.df.description) {
				$('<div class="col-sm-12 small text-muted form-section-description">' + __(this.df.description) + '</div>')
					.appendTo(this.wrapper);
			}
			if(this.df.cssClass) {
				this.wrapper.addClass(this.df.cssClass);
			}
		}


		// for bc
		this.body = $('<div class="section-body">').appendTo(this.wrapper);
	},
	make_head: function() {
		var me = this;
		if(!this.df.collapsible) {
			$('<div class="col-sm-12"><h6 class="form-section-heading uppercase">'
				+ __(this.df.label) + '</h6></div>')
				.appendTo(this.wrapper);
		} else {
			this.head = $('<div class="section-head"><a class="h6 uppercase">'
				+__(this.df.label)+'</a><span class="octicon octicon-chevron-down collapse-indicator"></span></div>').appendTo(this.wrapper);

			// show / hide based on status
			this.collapse_link = this.head.on("click", function() {
				me.collapse();
			});

			this.indicator = this.head.find(".collapse-indicator");
		}
	},
	refresh: function() {
		if(!this.df)
			return;

		// hide if explictly hidden
		var hide = this.df.hidden || this.df.hidden_due_to_dependency;

		// hide if no perm
		if(!hide && this.layout && this.layout.frm && !this.layout.frm.get_perm(this.df.permlevel || 0, "read")) {
			hide = true;
		}

		this.wrapper.toggleClass("hide-control", !!hide);
	},
	collapse: function(hide) {
		// unknown edge case
		if (!(this.head && this.body)) {
			return;
		}

		if(hide===undefined) {
			hide = !this.body.hasClass("hide");
		}
		this.body.toggleClass("hide", hide);
		this.head.toggleClass("collapsed", hide);
		this.indicator.toggleClass("octicon-chevron-down", hide);
		this.indicator.toggleClass("octicon-chevron-up", !hide);

		// refresh signature fields
		this.fields_list.forEach((f) => {
			if (f.df.fieldtype=='Signature') {
				f.refresh();
			}
		});
	},
	has_missing_mandatory: function() {
		var missing_mandatory = false;
		for (var j=0, l=this.fields_list.length; j < l; j++) {
			var section_df = this.fields_list[j].df;
			if (section_df.reqd && this.layout.doc[section_df.fieldname]==null) {
				missing_mandatory = true;
				break;
			}
		}
		return missing_mandatory;
	}
});

frappe.ui.form.Column = Class.extend({
	init: function(section, df) {
		if(!df) df = {};

		this.df = df;
		this.section = section;
		this.make();
		this.resize_all_columns();
	},
	make: function() {
		this.wrapper = $('<div class="form-column">\
			<form>\
			</form>\
		</div>').appendTo(this.section.body)
			.find("form")
			.on("submit", function() { return false; });

		if(this.df.label) {
			$('<label class="control-label">'+ __(this.df.label)
				+'</label>').appendTo(this.wrapper);
		}
	},
	resize_all_columns: function() {
		// distribute all columns equally
		var colspan = cint(12 / this.section.wrapper.find(".form-column").length);

		this.section.wrapper.find(".form-column").removeClass()
			.addClass("form-column")
			.addClass("col-sm-" + colspan);

	},
	refresh: function() {
		this.section.refresh();
	}
});

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/field_group.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.ui');

frappe.ui.FieldGroup = frappe.ui.form.Layout.extend({
	init: function(opts) {
		$.extend(this, opts);
		this._super();
		$.each(this.fields || [], function(i, f) {
			if(!f.fieldname && f.label) {
				f.fieldname = f.label.replace(/ /g, "_").toLowerCase();
			}
		})
		if(this.values) {
			this.set_values(this.values);
		}
	},
	make: function() {
		var me = this;
		if(this.fields) {
			this._super();
			this.refresh();
			// set default
			$.each(this.fields_list, function(i, field) {
				if(field.df["default"]) {
					field.set_input(field.df["default"]);
				}
			})

			if(!this.no_submit_on_enter) {
				this.catch_enter_as_submit();
			}

			$(this.body).find('input, select').on('change', function() {
				frappe.run_serially([
					() => frappe.timeout(0.1),
					() => me.refresh_dependency()
				]);
			});

		}
	},
	first_button: false,
	focus_on_first_input: function() {
		if(this.no_focus) return;
		$.each(this.fields_list, function(i, f) {
			if(!in_list(['Date', 'Datetime', 'Time', 'Check'], f.df.fieldtype) && f.set_focus) {
				f.set_focus();
				return false;
			}
		});
	},
	catch_enter_as_submit: function() {
		var me = this;
		$(this.body).find('input[type="text"], input[type="password"]').keypress(function(e) {
			if(e.which==13) {
				if(me.has_primary_action) {
					e.preventDefault();
					me.get_primary_btn().trigger("click");
				}
			}
		});
	},
	get_input: function(fieldname) {
		var field = this.fields_dict[fieldname];
		return $(field.txt ? field.txt : field.input);
	},
	get_field: function(fieldname) {
		return this.fields_dict[fieldname];
	},
	get_values: function(ignore_errors) {
		var ret = {};
		var errors = [];
		for(var key in this.fields_dict) {
			var f = this.fields_dict[key];
			if(f.get_value) {
				var v = f.get_value();
				if(f.df.reqd && is_null(v))
					errors.push(__(f.df.label));

				if(!is_null(v)) ret[f.df.fieldname] = v;
			}
		}
		if(errors.length && !ignore_errors) {
			frappe.msgprint({
				title: __('Missing Values Required'),
				message: __('Following fields have missing values:') +
					'<br><br><ul><li>' + errors.join('<li>') + '</ul>',
				indicator: 'orange'
			});
			return null;
		}
		return ret;
	},
	get_value: function(key) {
		var f = this.fields_dict[key];
		return f && (f.get_value ? f.get_value() : null);
	},
	set_value: function(key, val){
		return new Promise(resolve => {
			var f = this.fields_dict[key];
			if(f) {
				f.set_value(val).then(() => {
					f.set_input(val);
					this.refresh_dependency();
					resolve();
				});
			} else {
				resolve();
			}
		});
	},
	set_input: function(key, val) {
		return this.set_value(key, val);
	},
	set_values: function(dict) {
		for(var key in dict) {
			if(this.fields_dict[key]) {
				this.set_value(key, dict[key]);
			}
		}
	},
	clear: function() {
		for(var key in this.fields_dict) {
			var f = this.fields_dict[key];
			if(f && f.set_input) {
				f.set_input(f.df['default'] || '');
			}
		}
	},
});

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/form/link_selector.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.ui.form.LinkSelector = Class.extend({
	init: function (opts) {
		/* help: Options: doctype, get_query, target */
		$.extend(this, opts);

		var me = this;
		if (this.doctype != "[Select]") {
			frappe.model.with_doctype(this.doctype, function (r) {
				me.make();
			});
		} else {
			this.make();
		}
	},
	make: function () {
		var me = this;

		this.dialog = new frappe.ui.Dialog({
			title: __("Select {0}", [(this.doctype == '[Select]') ? __("value") : __(this.doctype)]),
			fields: [
				{
					fieldtype: "Data", fieldname: "txt", label: __("Beginning with"),
					description: __("You can use wildcard %"),
				},
				{
					fieldtype: "HTML", fieldname: "results"
				}
			],
			primary_action_label: __("Search"),
			primary_action: function () {
				me.search();
			}
		});

		if (this.txt)
			this.dialog.fields_dict.txt.set_input(this.txt);

		this.dialog.get_input("txt").on("keypress", function (e) {
			if (e.which === 13) {
				me.search();
			}
		});
		this.dialog.show();
		this.search();
	},
	search: function () {
		var args = {
			txt: this.dialog.fields_dict.txt.get_value(),
			searchfield: "name"
		};
		var me = this;

		if (this.target.set_custom_query) {
			this.target.set_custom_query(args);
		}

		// load custom query from grid
		if (this.target.is_grid && this.target.fieldinfo[this.fieldname]
			&& this.target.fieldinfo[this.fieldname].get_query) {
			$.extend(args,
				this.target.fieldinfo[this.fieldname].get_query(cur_frm.doc));
		}

		frappe.link_search(this.doctype, args, function (r) {
			var parent = me.dialog.fields_dict.results.$wrapper;
			parent.empty();
			if (r.values.length) {
				$.each(r.values, function (i, v) {
					var row = $(repl('<div class="row link-select-row">\
						<div class="col-xs-4">\
							<b><a href="#">%(name)s</a></b></div>\
						<div class="col-xs-8">\
							<span class="text-muted">%(values)s</span></div>\
						</div>', {
							name: v[0],
							values: v.splice(1).join(", ")
						})).appendTo(parent);

					row.find("a")
						.attr('data-value', v[0])
						.click(function () {
							var value = $(this).attr("data-value");
							var $link = this;
							if (me.target.is_grid) {
								// set in grid
								me.set_in_grid(value);
							} else {
								if (me.target.doctype)
									me.target.parse_validate_and_set_in_model(value);
								else {
									me.target.set_input(value);
									me.target.$input.trigger("change");
								}
								me.dialog.hide();
							}
							return false;
						})
				})
			} else {
				$('<p><br><span class="text-muted">' + __("No Results") + '</span>'
					+ (frappe.model.can_create(me.doctype) ?
						('<br><br><a class="new-doc btn btn-default btn-sm">'
							+ __("Make a new {0}", [__(me.doctype)]) + "</a>") : '')
					+ '</p>').appendTo(parent).find(".new-doc").click(function () {
						frappe.new_doc(me.doctype);
					});
			}
		}, this.dialog.get_primary_btn());

	},
	set_in_grid: function (value) {
		var me = this, updated = false;
		var d = null;
		if (this.qty_fieldname) {
			frappe.prompt({
				fieldname: "qty", fieldtype: "Float", label: "Qty",
				"default": 1, reqd: 1
			}, function (data) {
				$.each(me.target.frm.doc[me.target.df.fieldname] || [], function (i, d) {
					if (d[me.fieldname] === value) {
						frappe.model.set_value(d.doctype, d.name, me.qty_fieldname, data.qty);
						frappe.show_alert(__("Added {0} ({1})", [value, d[me.qty_fieldname]]));
						updated = true;
						return false;
					}
				});
				if (!updated) {
					frappe.run_serially([
						() => {
							d = me.target.add_new_row();
						},
						() => frappe.timeout(0.1),
						() => frappe.model.set_value(d.doctype, d.name, me.fieldname, value),
						() => frappe.timeout(0.5),
						() => frappe.model.set_value(d.doctype, d.name, me.qty_fieldname, data.qty),
						() => frappe.show_alert(__("Added {0} ({1})", [value, data.qty]))
					]);
				}
			}, __("Set Quantity"), __("Set"));
		} else {
			var d = me.target.add_new_row();
			frappe.model.set_value(d.doctype, d.name, me.fieldname, value);
			frappe.show_alert(__("{0} added", [value]));
		}
	}
});

frappe.link_search = function (doctype, args, callback, btn) {
	if (!args) {
		args = {
			txt: ''
		}
	}
	args.doctype = doctype;
	if (!args.searchfield) {
		args.searchfield = 'name';
	}

	frappe.call({
		method: "frappe.desk.search.search_widget",
		type: "GET",
		args: args,
		callback: function (r) {
			callback && callback(r);
		},
		btn: btn
	});
}


/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/form/multi_select_dialog.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.ui.form.MultiSelectDialog = Class.extend({
	init: function(opts) {
		/* Options: doctype, target, setters, get_query, action */
		$.extend(this, opts);

		var me = this;
		if(this.doctype!="[Select]") {
			frappe.model.with_doctype(this.doctype, function(r) {
				me.make();
			});
		} else {
			this.make();
		}
	},
	make: function() {
		let me = this;

		this.page_length = 20;

		let fields = [
			{
				fieldtype: "Data",
				label: __("Search Term"),
				fieldname: "search_term"
			},
			{
				fieldtype: "Column Break"
			}
		];
		let count = 0;
		if(!this.date_field) {
			this.date_field = "transaction_date";
		}
		Object.keys(this.setters).forEach(function(setter) {
			fields.push({
				fieldtype: me.target.fields_dict[setter].df.fieldtype,
				label: me.target.fields_dict[setter].df.label,
				fieldname: setter,
				options: me.target.fields_dict[setter].df.options,
				default: me.setters[setter]
			});
			if (count++ < Object.keys(me.setters).length) {
				fields.push({fieldtype: "Column Break"});
			}
		});

		fields = fields.concat([
			{
				"fieldname":"date_range",
				"label": __("Date Range"),
				"fieldtype": "DateRange",
			},
			{ fieldtype: "Section Break" },
			{ fieldtype: "HTML", fieldname: "results_area" },
			{ fieldtype: "Button", fieldname: "make_new", label: __("Make a new " + me.doctype) }
		]);

		let doctype_plural = !this.doctype.endsWith('y') ? this.doctype + 's'
			: this.doctype.slice(0, -1) + 'ies';

		this.dialog = new frappe.ui.Dialog({
			title: __("Select {0}", [(this.doctype=='[Select]') ? __("value") : __(doctype_plural)]),
			fields: fields,
			primary_action_label: __("Get Items"),
			primary_action: function() {
				me.action(me.get_checked_values(), me.args);
			}
		});

		this.$parent = $(this.dialog.body);
		this.$wrapper = this.dialog.fields_dict.results_area.$wrapper.append(`<div class="results"
			style="border: 1px solid #d1d8dd; border-radius: 3px; height: 300px; overflow: auto;"></div>`);
		this.$results = this.$wrapper.find('.results');
		this.$make_new_btn = this.dialog.fields_dict.make_new.$wrapper;

		this.$placeholder = $(`<div class="multiselect-empty-state">
					<span class="text-center" style="margin-top: -40px;">
						<i class="fa fa-2x fa-tags text-extra-muted"></i>
						<p class="text-extra-muted">No ${this.doctype} found</p>
						<button class="btn btn-default btn-xs text-muted" data-fieldtype="Button"
							data-fieldname="make_new" placeholder="" value="">Make a new ${this.doctype}</button>
					</span>
				</div>`);

		this.args = {};

		this.bind_events();
		this.get_results();
		this.dialog.show();
	},

	bind_events: function() {
		let me = this;
		this.$results.on('click', '.list-item-container', function (e) {
			if (!$(e.target).is(':checkbox') && !$(e.target).is('a')) {
				$(this).find(':checkbox').trigger('click');
			}
		});
		this.$results.on('click', '.list-item--head :checkbox', (e) => {
			this.$results.find('.list-item-container .list-row-check')
				.prop("checked", ($(e.target).is(':checked')));
		});

		this.$parent.find('.input-with-feedback').on('change', (e) => {
			this.get_results();
		});

		this.$parent.find('[data-fieldname="date_range"]').on('blur', (e) => {
			this.get_results();
		});

		this.$parent.find('[data-fieldname="search_term"]').on('input', (e) => {
			var $this = $(this);
			clearTimeout($this.data('timeout'));
			$this.data('timeout', setTimeout(function() {
				me.get_results();
			}, 300));
		});

		this.$parent.on('click', '.btn[data-fieldname="make_new"]', (e) => {
			frappe.route_options = {};
			Object.keys(this.setters).forEach(function(setter) {
				frappe.route_options[setter] = me.dialog.fields_dict[setter].get_value() || undefined;
			});
			frappe.new_doc(this.doctype, true);
		});
	},

	get_checked_values: function() {
		return this.$results.find('.list-item-container').map(function() {
			if ($(this).find('.list-row-check:checkbox:checked').length > 0 ) {
				return $(this).attr('data-item-name');
			}
		}).get();
	},

	make_list_row: function(result={}) {
		var me = this;
		// Make a head row by default (if result not passed)
		let head = Object.keys(result).length === 0;

		let contents = ``;
		let columns = (["name"].concat(Object.keys(this.setters))).concat("Date");
		columns.forEach(function(column) {
			contents += `<div class="list-item__content ellipsis">
				${
					head ? `<span class="ellipsis">${__(frappe.model.unscrub(column))}</span>`

					: (column !== "name" ? `<span class="ellipsis">${__(result[column])}</span>`
						: `<a href="${"#Form/"+ me.doctype + "/" + result[column]}" class="list-id ellipsis">
							${__(result[column])}</a>`)
				}
			</div>`;
		})

		let $row = $(`<div class="list-item">
			<div class="list-item__content" style="flex: 0 0 10px;">
				<input type="checkbox" class="list-row-check" ${result.checked ? 'checked' : ''}>
			</div>
			${contents}
		</div>`);

		head ? $row.addClass('list-item--head')
			: $row = $(`<div class="list-item-container" data-item-name="${result.name}"></div>`).append($row);
		return $row;
	},

	render_result_list: function(results, more = 0) {
		var me = this;
		this.$results.empty();
		if(results.length === 0) {
			this.$make_new_btn.addClass('hide');
			this.$results.append(me.$placeholder);
			return;
		}
		this.$make_new_btn.removeClass('hide');

		this.$results.append(this.make_list_row());
		results.forEach((result) => {
			me.$results.append(me.make_list_row(result));
		})
		if (more) {
			let message = __("Only {0} entries shown. Please filter for more specific results.", [this.page_length]);
			me.$results.append($(`<div class="text-muted small" style="text-align: center;
				margin: 10px;">${message}</div>`));
		}
	},

	get_results: function() {
		let me = this;

		let filters = this.get_query ? this.get_query().filters : {};
		Object.keys(this.setters).forEach(function(setter) {
			filters[setter] = me.dialog.fields_dict[setter].get_value() || undefined;
			me.args[setter] = filters[setter];
		});

		let date_val = this.dialog.fields_dict["date_range"].get_value();
		if(date_val) {
			filters[this.date_field] = ['between', date_val];
		}

		let args = {
			doctype: me.doctype,
			txt: me.dialog.fields_dict["search_term"].get_value(),
			filters: filters,
			filter_fields: Object.keys(me.setters).concat([me.date_field]),
			page_length: this.page_length + 1,
			query: this.get_query ? this.get_query().query : '',
			as_dict: 1
		}
		frappe.call({
			type: "GET",
			method:'frappe.desk.search.search_widget',
			no_spinner: true,
			args: args,
			callback: function(r) {
				let results = [], more = 0;
				if(r.values.length) {
					if(r.values.length > me.page_length){
						r.values.pop();
						more = 1;
					}
					r.values.forEach(function(result) {
						if(me.date_field in result) {
							result["Date"] = result[me.date_field]
						}
						result.checked = 0;
						result.parsed_date = Date.parse(result["Date"]);
						results.push(result);
					});
					results.map( (result) => {
						result["Date"] = frappe.format(result["Date"], {"fieldtype":"Date"});
					})

					results.sort((a, b) => {
						return a.parsed_date - b.parsed_date;
					});

					// Preselect oldest entry
					results[0].checked = 1
				}
				me.render_result_list(results, more);
			}
		});
	},

});
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/dialog.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.ui');

var cur_dialog;

frappe.ui.open_dialogs = [];
frappe.ui.Dialog = frappe.ui.FieldGroup.extend({
	init: function(opts) {
		this.display = false;
		this.is_dialog = true;

		$.extend(this, opts);
		this._super();
		this.make();
	},
	make: function() {
		this.$wrapper = frappe.get_modal("", "");
		this.wrapper = this.$wrapper.find('.modal-dialog')
			.get(0);
		this.make_head();
		this.body = this.$wrapper.find(".modal-body").get(0);
		this.header = this.$wrapper.find(".modal-header");

		// make fields (if any)
		this._super();

		// show footer
		if(this.primary_action) {
			this.set_primary_action(this.primary_action_label || __("Submit"), this.primary_action);
		}

		if (this.secondary_action_label) {
			this.get_close_btn().html(this.secondary_action_label);
		}

		var me = this;
		this.$wrapper
			.on("hide.bs.modal", function() {
				me.display = false;
				if(frappe.ui.open_dialogs[frappe.ui.open_dialogs.length-1]===me) {
					frappe.ui.open_dialogs.pop();
					if(frappe.ui.open_dialogs.length) {
						cur_dialog = frappe.ui.open_dialogs[frappe.ui.open_dialogs.length-1];
					} else {
						cur_dialog = null;
					}
				}
				me.onhide && me.onhide();
				me.on_hide && me.on_hide();
			})
			.on("shown.bs.modal", function() {
				// focus on first input
				me.display = true;
				cur_dialog = me;
				frappe.ui.open_dialogs.push(me);
				me.focus_on_first_input();
				me.on_page_show && me.on_page_show();
			})
			.on('scroll', function() {
				var $input = $('input:focus');
				if($input.length && ['Date', 'Datetime',
					'Time'].includes($input.attr('data-fieldtype'))) {
					$input.blur();
				}
			});

	},
	get_primary_btn: function() {
		return this.$wrapper.find(".modal-header .btn-primary");
	},
	set_primary_action: function(label, click) {
		this.has_primary_action = true;
		var me = this;
		return this.get_primary_btn()
			.removeClass("hide")
			.html(label)
			.click(function() {
				me.primary_action_fulfilled = true;
				// get values and send it
				// as first parameter to click callback
				// if no values then return
				var values = me.get_values();
				if(!values) return;
				click.apply(me, [values]);
			});
	},
	disable_primary_action: function() {
		this.get_primary_btn().addClass('disabled');
	},
	enable_primary_action: function() {
		this.get_primary_btn().removeClass('disabled');
	},
	make_head: function() {
		var me = this;
		this.set_title(this.title);
	},
	set_title: function(t) {
		this.$wrapper.find(".modal-title").html(t);
	},
	show: function() {
		// show it
		this.$wrapper.modal("show");
		this.primary_action_fulfilled = false;
		this.is_visible = true;
	},
	hide: function(from_event) {
		this.$wrapper.modal("hide");
		this.is_visible = false;
	},
	get_close_btn: function() {
		return this.$wrapper.find(".btn-modal-close");
	},
	no_cancel: function() {
		this.get_close_btn().toggle(false);
	},
	cancel: function() {
		this.get_close_btn().trigger("click");
	}
});


/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/capture.js
 */
frappe.ui.Capture = class
{
	constructor (options = { })
	{
		this.options = Object.assign({}, frappe.ui.Capture.DEFAULT_OPTIONS, options);
		this.dialog = new frappe.ui.Dialog();
		this.template = 
		`
			<div class="text-center">
				<div class="img-thumbnail" style="border: none;">
					<div id="frappe-capture"/>
				</div>
			</div>

			<div id="frappe-capture-btn-toolbar" style="padding-top: 15px; padding-bottom: 15px;">
				<div class="text-center">
					<div id="frappe-capture-btn-toolbar-snap">
						<a id="frappe-capture-btn-snap">
							<i class="fa fa-fw fa-2x fa-circle-o"/>
						</a>
					</div>
					<div class="btn-group" id="frappe-capture-btn-toolbar-knap">
						<button class="btn btn-default" id="frappe-capture-btn-discard">
							<i class="fa fa-fw fa-arrow-left"/>
						</button>
						<button class="btn btn-default" id="frappe-capture-btn-accept">
							<i class="fa fa-fw fa-arrow-right"/>
						</button>
					</div>
				</div>
			</div>
		`;
		$(this.dialog.body).append(this.template);

		this.$btnBarSnap = $(this.dialog.body).find('#frappe-capture-btn-toolbar-snap');
		this.$btnBarKnap = $(this.dialog.body).find('#frappe-capture-btn-toolbar-knap');
		this.$btnBarKnap.hide();

		Webcam.set(this.options);
	}

	open ( )
	{
		this.dialog.show();

		Webcam.attach('#frappe-capture');
	}

	freeze ( )
	{
		this.$btnBarSnap.hide();
		this.$btnBarKnap.show();
		
		Webcam.freeze();
	}

	unfreeze ( )
	{
		this.$btnBarSnap.show();
		this.$btnBarKnap.hide();

		Webcam.unfreeze();
	}

	click (callback) 
	{
		$(this.dialog.body).find('#frappe-capture-btn-snap').click(() => {
			this.freeze();

			$(this.dialog.body).find('#frappe-capture-btn-discard').click(() => {
				this.unfreeze();
			});

			$(this.dialog.body).find('#frappe-capture-btn-accept').click(() => {
				Webcam.snap((data) => {
					callback(data);
				});

				this.hide();
			});
		});
	}

	hide ( )
	{
		Webcam.reset();

		$(this.dialog.$wrapper).remove();
	}
};
frappe.ui.Capture.DEFAULT_OPTIONS = 
{
	width: 480, height: 320, flip_horiz: true
};
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/app_icon.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt


frappe.provide("frappe.ui");
frappe.ui.app_icon = {
	get_html: function(module, small) {
		var icon = module.icon;
		var color = module.color;
		if (icon
			&& icon.match(/([\uE000-\uF8FF]|\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDDFF])/g)) {
			module.emoji = module.icon;
		}
		var icon_style = "";
		if(module.reverse) {
			icon_style = "color: #36414C;";
		}

		if(!color) {
			color = '#4aa3df';
		}

		// first letter
		if(!icon || module.emoji) {
			icon = '<span class="inner" ' +
				(module.reverse ? ('style="' + icon_style + '"') : '')
				+ '>' + (module.emoji || module._label[0].toUpperCase()) + '</span>';
		} else if(icon.split(".").slice(-1)[0]==="svg") {
			$.ajax({
				url: frappe.urllib.get_full_url(icon),
				dataType: "text",
				async: false,
				success: function(data) {
					icon = data;
				}
			});
			icon = '<object>'+ icon+'</object>';
		} else {
			icon = '<i class="'+ icon+'" title="' + module._label + '" style="'+ icon_style + '"></i>';
		}

		return '<div class="app-icon'+ (small ? " app-icon-small" : "")
			+'" style="background-color: '+ color +'" title="'+ module._label +'">'+icon+'</div>';
	}
};

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/model/model.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.model');

$.extend(frappe.model, {
	no_value_type: ['Section Break', 'Column Break', 'HTML', 'Table',
		'Button', 'Image', 'Fold', 'Heading'],

	layout_fields: ['Section Break', 'Column Break', 'Fold'],

	std_fields_list: ['name', 'owner', 'creation', 'modified', 'modified_by',
		'_user_tags', '_comments', '_assign', '_liked_by', 'docstatus',
		'parent', 'parenttype', 'parentfield', 'idx'],

	std_fields: [
		{fieldname:'name', fieldtype:'Link', label:__('ID')},
		{fieldname:'owner', fieldtype:'Link', label:__('Created By'), options: 'User'},
		{fieldname:'idx', fieldtype:'Int', label:__('Index')},
		{fieldname:'creation', fieldtype:'Date', label:__('Created On')},
		{fieldname:'modified', fieldtype:'Date', label:__('Last Updated On')},
		{fieldname:'modified_by', fieldtype:'Data', label:__('Last Updated By')},
		{fieldname:'_user_tags', fieldtype:'Data', label:__('Tags')},
		{fieldname:'_liked_by', fieldtype:'Data', label:__('Liked By')},
		{fieldname:'_comments', fieldtype:'Text', label:__('Comments')},
		{fieldname:'_assign', fieldtype:'Text', label:__('Assigned To')},
		{fieldname:'docstatus', fieldtype:'Int', label:__('Document Status')},
	],

	std_fields_table: [
		{fieldname:'parent', fieldtype:'Data', label:__('Parent')},
	],

	new_names: {},
	events: {},
	user_settings: {},

	init: function() {
		// setup refresh if the document is updated somewhere else
		frappe.realtime.on("doc_update", function(data) {
			// set list dirty
			frappe.views.set_list_as_dirty(data.doctype);
			var doc = locals[data.doctype] && locals[data.doctype][data.name];
			if(doc) {
				// current document is dirty, show message if its not me
				if(frappe.get_route()[0]==="Form" && cur_frm.doc.doctype===doc.doctype && cur_frm.doc.name===doc.name) {
					if(!frappe.ui.form.is_saving && data.modified!=cur_frm.doc.modified) {
						doc.__needs_refresh = true;
						cur_frm.show_if_needs_refresh();
					}
				} else {
					if(!doc.__unsaved) {
						// no local changes, remove from locals
						frappe.model.remove_from_locals(doc.doctype, doc.name);
					} else {
						// show message when user navigates back
						doc.__needs_refresh = true;
					}
				}
			}
		});

		frappe.realtime.on("list_update", function(data) {
			frappe.views.set_list_as_dirty(data.doctype);
		});

	},

	is_value_type: function(fieldtype) {
		if (typeof fieldtype == 'object') {
			fieldtype = fieldtype.fieldtype;
		}
		// not in no-value type
		return frappe.model.no_value_type.indexOf(fieldtype)===-1;
	},

	get_std_field: function(fieldname) {
		var docfield = $.map([].concat(frappe.model.std_fields).concat(frappe.model.std_fields_table),
			function(d) {
				if(d.fieldname==fieldname) return d;
			});
		if(!docfield.length) {
			frappe.msgprint(__("Unknown Column: {0}", [fieldname]));
		}
		return docfield[0];
	},

	with_doctype: function(doctype, callback, async) {
		if(locals.DocType[doctype]) {
			callback && callback();
		} else {
			var cached_timestamp = null;
			if(localStorage["_doctype:" + doctype]) {
				var cached_doc = JSON.parse(localStorage["_doctype:" + doctype]);
				cached_timestamp = cached_doc.modified;
			}
			return frappe.call({
				method:'frappe.desk.form.load.getdoctype',
				type: "GET",
				args: {
					doctype: doctype,
					with_parent: 1,
					cached_timestamp: cached_timestamp
				},
				async: async,
				freeze: true,
				callback: function(r) {
					if(r.exc) {
						frappe.msgprint(__("Unable to load: {0}", [__(doctype)]));
						throw "No doctype";
					}
					if(r.message=="use_cache") {
						frappe.model.sync(cached_doc);
					} else {
						localStorage["_doctype:" + doctype] = JSON.stringify(r.docs);
					}
					frappe.model.init_doctype(doctype);

					if(r.user_settings) {
						// remember filters and other settings from last view
						frappe.model.user_settings[doctype] = JSON.parse(r.user_settings);
						frappe.model.user_settings[doctype].updated_on = moment().toString();
					}
					callback && callback(r);
				}
			});
		}
	},

	init_doctype: function(doctype) {
		var meta = locals.DocType[doctype];
		if(meta.__list_js) {
			eval(meta.__list_js);
		}
		if(meta.__calendar_js) {
			eval(meta.__calendar_js);
		}
		if(meta.__map_js) {
			eval(meta.__map_js);
		}
		if(meta.__tree_js) {
			eval(meta.__tree_js);
		}
		if(meta.__templates) {
			$.extend(frappe.templates, meta.__templates);
		}
	},

	with_doc: function(doctype, name, callback) {
		if(!name) name = doctype; // single type
		if(locals[doctype] && locals[doctype][name] && frappe.model.get_docinfo(doctype, name)) {
			callback(name);
		} else {
			return frappe.call({
				method: 'frappe.desk.form.load.getdoc',
				type: "GET",
				args: {
					doctype: doctype,
					name: name
				},
				freeze: true,
				callback: function(r) { callback(name, r); }
			});
		}
	},

	get_docinfo: function(doctype, name) {
		return frappe.model.docinfo[doctype] && frappe.model.docinfo[doctype][name] || null;
	},

	set_docinfo: function(doctype, name, key, value) {
		if (frappe.model.docinfo[doctype] && frappe.model.docinfo[doctype][name]) {
			frappe.model.docinfo[doctype][name][key] = value;
		}
	},

	get_shared: function(doctype, name) {
		return frappe.model.get_docinfo(doctype, name).shared;
	},

	get_server_module_name: function(doctype) {
		var dt = frappe.model.scrub(doctype);
		var module = frappe.model.scrub(locals.DocType[doctype].module);
		var app = frappe.boot.module_app[module];
		return app + "." + module + '.doctype.' + dt + '.' + dt;
	},

	scrub: function(txt) {
		return txt.replace(/ /g, "_").toLowerCase();  // use to slugify or create a slug, a "code-friendly" string
	},

	unscrub: function(txt) {
		return __(txt || '').replace(/-|_/g, " ").replace(/\w*/g,
            function(keywords){return keywords.charAt(0).toUpperCase() + keywords.substr(1).toLowerCase();});
	},

	can_create: function(doctype) {
		return frappe.boot.user.can_create.indexOf(doctype)!==-1;
	},

	can_read: function(doctype) {
		return frappe.boot.user.can_read.indexOf(doctype)!==-1;
	},

	can_write: function(doctype) {
		return frappe.boot.user.can_write.indexOf(doctype)!==-1;
	},

	can_get_report: function(doctype) {
		return frappe.boot.user.can_get_report.indexOf(doctype)!==-1;
	},

	can_delete: function(doctype) {
		if(!doctype) return false;
		return frappe.boot.user.can_delete.indexOf(doctype)!==-1;
	},

	can_cancel: function(doctype) {
		if(!doctype) return false;
		return frappe.boot.user.can_cancel.indexOf(doctype)!==-1;
	},

	is_submittable: function(doctype) {
		if(!doctype) return false;
		return locals.DocType[doctype] && locals.DocType[doctype].is_submittable;
	},

	is_table: function(doctype) {
		if(!doctype) return false;
		return locals.DocType[doctype] && locals.DocType[doctype].istable;
	},

	is_single: function(doctype) {
		if(!doctype) return false;
		return frappe.boot.single_types.indexOf(doctype) != -1;
	},

	can_import: function(doctype, frm) {
		// system manager can always import
		if(frappe.user_roles.includes("System Manager")) return true;

		if(frm) return frm.perm[0].import===1;
		return frappe.boot.user.can_import.indexOf(doctype)!==-1;
	},

	can_export: function(doctype, frm) {
		// system manager can always export
		if(frappe.user_roles.includes("System Manager")) return true;

		if(frm) return frm.perm[0].export===1;
		return frappe.boot.user.can_export.indexOf(doctype)!==-1;
	},

	can_print: function(doctype, frm) {
		if(frm) return frm.perm[0].print===1;
		return frappe.boot.user.can_print.indexOf(doctype)!==-1;
	},

	can_email: function(doctype, frm) {
		if(frm) return frm.perm[0].email===1;
		return frappe.boot.user.can_email.indexOf(doctype)!==-1;
	},

	can_share: function(doctype, frm) {
		if(frm) {
			return frm.perm[0].share===1;
		}
		return frappe.boot.user.can_share.indexOf(doctype)!==-1;
	},

	can_set_user_permissions: function(doctype, frm) {
		// system manager can always set user permissions
		if(frappe.user_roles.includes("System Manager")) return true;

		if(frm) return frm.perm[0].set_user_permissions===1;
		return frappe.boot.user.can_set_user_permissions.indexOf(doctype)!==-1;
	},

	has_value: function(dt, dn, fn) {
		// return true if property has value
		var val = locals[dt] && locals[dt][dn] && locals[dt][dn][fn];
		var df = frappe.meta.get_docfield(dt, fn, dn);

		if(df.fieldtype=='Table') {
			var ret = false;
			$.each(locals[df.options] || {}, function(k,d) {
				if(d.parent==dn && d.parenttype==dt && d.parentfield==df.fieldname) {
					ret = true;
					return false;
				}
			});
		} else {
			var ret = !is_null(val);
		}
		return ret ? true : false;
	},

	get_list: function(doctype, filters) {
		var docsdict = locals[doctype] || locals[":" + doctype] || {};
		if($.isEmptyObject(docsdict))
			return [];
		return frappe.utils.filter_dict(docsdict, filters);
	},

	get_value: function(doctype, filters, fieldname, callback) {
		if(callback) {
			frappe.call({
				method:"frappe.client.get_value",
				args: {
					doctype: doctype,
					fieldname: fieldname,
					filters: filters
				},
				callback: function(r) {
					if(!r.exc) {
						callback(r.message);
					}
				}
			});
		} else {
			if(typeof filters==="string" && locals[doctype] && locals[doctype][filters]) {
				return locals[doctype][filters][fieldname];
			} else {
				var l = frappe.get_list(doctype, filters);
				return (l.length && l[0]) ? l[0][fieldname] : null;
			}
		}
	},

	set_value: function(doctype, docname, fieldname, value, fieldtype) {
		/* help: Set a value locally (if changed) and execute triggers */

		var doc;
		if ($.isPlainObject(doctype)) {
			// first parameter is the doc, shift parameters to the left
			doc = doctype; fieldname = docname; value = fieldname;
		} else {
			doc = locals[doctype] && locals[doctype][docname];
		}

		let to_update = fieldname;
		let tasks = [];
		if(!$.isPlainObject(to_update)) {
			to_update = {};
			to_update[fieldname] = value;
		}

		$.each(to_update, (key, value) => {
			if (doc && doc[key] !== value) {
				if(doc.__unedited && !(!doc[key] && !value)) {
					// unset unedited flag for virgin rows
					doc.__unedited = false;
				}

				doc[key] = value;
				tasks.push(() => frappe.model.trigger(key, value, doc));
			} else {
				// execute link triggers (want to reselect to execute triggers)
				if(fieldtype=="Link" && doc) {
					tasks.push(() => frappe.model.trigger(key, value, doc));
				}
			}
		});

		return frappe.run_serially(tasks);
	},

	on: function(doctype, fieldname, fn) {
		/* help: Attach a trigger on change of a particular field.
		To trigger on any change in a particular doctype, use fieldname as "*"
		*/
		/* example: frappe.model.on("Customer", "age", function(fieldname, value, doc) {
		  if(doc.age < 16) {
		   	frappe.msgprint("Warning, Customer must atleast be 16 years old.");
		    raise "CustomerAgeError";
		  }
		}) */
		frappe.provide("frappe.model.events." + doctype);
		if(!frappe.model.events[doctype][fieldname]) {
			frappe.model.events[doctype][fieldname] = [];
		}
		frappe.model.events[doctype][fieldname].push(fn);
	},

	trigger: function(fieldname, value, doc) {
		let tasks = [];
		var runner = function(events, event_doc) {
			$.each(events || [], function(i, fn) {
				if(fn) {
					let _promise = fn(fieldname, value, event_doc || doc);

					// if the trigger returns a promise, return it,
					// or use the default promise frappe.after_ajax
					if (_promise && _promise.then) {
						return _promise;
					} else {
						return frappe.after_server_call();
					}
				}
			});
		};

		if(frappe.model.events[doc.doctype]) {
			tasks.push(() => {
				return runner(frappe.model.events[doc.doctype][fieldname]);
			});

			tasks.push(() => {
				return runner(frappe.model.events[doc.doctype]['*']);
			});
		}

		return frappe.run_serially(tasks);
	},

	get_doc: function(doctype, name) {
		if(!name) name = doctype;
		if($.isPlainObject(name)) {
			var doc = frappe.get_list(doctype, name);
			return doc && doc.length ? doc[0] : null;
		}
		return locals[doctype] ? locals[doctype][name] : null;
	},

	get_children: function(doctype, parent, parentfield, filters) {
		if($.isPlainObject(doctype)) {
			var doc = doctype;
			var filters = parentfield
			var parentfield = parent;
		} else {
			var doc = frappe.get_doc(doctype, parent);
		}

		var children = doc[parentfield] || [];
		if(filters) {
			return frappe.utils.filter_dict(children, filters);
		} else {
			return children;
		}
	},

	clear_table: function(doc, parentfield) {
		for (var i=0, l=(doc[parentfield] || []).length; i<l; i++) {
			var d = doc[parentfield][i];
			delete locals[d.doctype][d.name];
		}
		doc[parentfield] = [];
	},

	remove_from_locals: function(doctype, name) {
		this.clear_doc(doctype, name);
		if(frappe.views.formview[doctype]) {
			delete frappe.views.formview[doctype].frm.opendocs[name];
		}
	},

	clear_doc: function(doctype, name) {
		var doc = locals[doctype] && locals[doctype][name];
		if(!doc) return;

		var parent = null;
		if(doc.parenttype) {
			var parent = doc.parent,
				parenttype = doc.parenttype,
				parentfield = doc.parentfield;
		}
		delete locals[doctype][name];
		if(parent) {
			var parent_doc = locals[parenttype][parent];
			var newlist = [], idx = 1;
			$.each(parent_doc[parentfield], function(i, d) {
				if(d.name!=name) {
					newlist.push(d);
					d.idx = idx;
					idx++;
				}
				parent_doc[parentfield] = newlist;
			});
		}
	},

	get_no_copy_list: function(doctype) {
		var no_copy_list = ['name','amended_from','amendment_date','cancel_reason'];

		var docfields = frappe.get_doc("DocType", doctype).fields || [];
		for(var i=0, j=docfields.length; i<j; i++) {
			var df = docfields[i];
			if(cint(df.no_copy)) no_copy_list.push(df.fieldname);
		}

		return no_copy_list;
	},

	delete_doc: function(doctype, docname, callback) {
		frappe.confirm(__("Permanently delete {0}?", [docname]), function() {
			return frappe.call({
				method: 'frappe.client.delete',
				args: {
					doctype: doctype,
					name: docname
				},
				callback: function(r, rt) {
					if(!r.exc) {
						frappe.utils.play_sound("delete");
						frappe.model.clear_doc(doctype, docname);
						if(callback) callback(r,rt);
					}
				}
			})
		})
	},

	rename_doc: function(doctype, docname, callback) {
		var d = new frappe.ui.Dialog({
			title: __("Rename {0}", [__(docname)]),
			fields: [
				{label:__("New Name"), fieldname: "new_name", fieldtype:"Data", reqd:1, "default": docname},
				{label:__("Merge with existing"), fieldtype:"Check", fieldname:"merge"},
			]
		});
		d.set_primary_action(__("Rename"), function() {
			var args = d.get_values();
			if(!args) return;
			return frappe.call({
				method:"frappe.model.rename_doc.rename_doc",
				args: {
					doctype: doctype,
					old: docname,
					"new": args.new_name,
					"merge": args.merge
				},
				btn: d.get_primary_btn(),
				callback: function(r,rt) {
					if(!r.exc) {
						$(document).trigger('rename', [doctype, docname,
							r.message || args.new_name]);
						if(locals[doctype] && locals[doctype][docname])
							delete locals[doctype][docname];
						d.hide();
						if(callback)
							callback(r.message);
					}
				}
			});
		});
		d.show();
	},

	round_floats_in: function(doc, fieldnames) {
		if(!fieldnames) {
			fieldnames = frappe.meta.get_fieldnames(doc.doctype, doc.parent,
				{"fieldtype": ["in", ["Currency", "Float"]]});
		}
		for(var i=0, j=fieldnames.length; i < j; i++) {
			var fieldname = fieldnames[i];
			doc[fieldname] = flt(doc[fieldname], precision(fieldname, doc));
		}
	},

	validate_missing: function(doc, fieldname) {
		if(!doc[fieldname]) {
			frappe.throw(__("Please specify") + ": " +
				__(frappe.meta.get_label(doc.doctype, fieldname, doc.parent || doc.name)));
		}
	},

	get_all_docs: function(doc) {
		var all = [doc];
		for(var key in doc) {
			if($.isArray(doc[key])) {
				var children = doc[key];
				for (var i=0, l=children.length; i < l; i++) {
					all.push(children[i]);
				}
			}
		}
		return all;
	},
});

// legacy
frappe.get_doc = frappe.model.get_doc;
frappe.get_children = frappe.model.get_children;
frappe.get_list = frappe.model.get_list;

var getchildren = function(doctype, parent, parentfield) {
	var children = [];
	$.each(locals[doctype] || {}, function(i, d) {
		if(d.parent === parent && d.parentfield === parentfield) {
			children.push(d);
		}
	});
	return children;
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/db.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.db = {
	get_list: function(doctype, args) {
		if (!args) {
			args = {};
		}
		args.doctype = doctype;
		if (!args.fields) {
			args.fields = ['name'];
		}
		if (!args.limit) {
			args.limit = 20;
		}
		return new Promise ((resolve) => {
			frappe.call({
				method: 'frappe.model.db_query.get_list',
				args: args,
				callback: function(r) {
					resolve(r.message);
				}
			});
		});
	},
	exists: function(doctype, name) {
		return new Promise ((resolve) => {
			frappe.db.get_value(doctype, {name: name}, 'name').then((r) => {
				(r.message && r.message.name) ? resolve(true) : resolve(false);
			});
		});
	},
	get_value: function(doctype, filters, fieldname, callback) {
		return frappe.call({
			method: "frappe.client.get_value",
			args: {
				doctype: doctype,
				fieldname: fieldname,
				filters: filters
			},
			callback: function(r) {
				callback && callback(r.message);
			}
		});
	},
	set_value: function(doctype, docname, fieldname, value, callback) {
		return frappe.call({
			method: "frappe.client.set_value",
			args: {
				doctype: doctype,
				name: docname,
				fieldname: fieldname,
				value: value
			},
			callback: function(r) {
				callback && callback(r.message);
			}
		});
	}
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/model/meta.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.meta.docfield_map');
frappe.provide('frappe.meta.docfield_copy');
frappe.provide('frappe.meta.docfield_list');
frappe.provide('frappe.meta.doctypes');
frappe.provide("frappe.meta.precision_map");

frappe.get_meta = function(doctype) {
	return locals["DocType"][doctype];
}

$.extend(frappe.meta, {
	sync: function(doc) {
		$.each(doc.fields, function(i, df) {
			frappe.meta.add_field(df);
		})
		frappe.meta.sync_messages(doc);
		if(doc.__print_formats) frappe.model.sync(doc.__print_formats);
		if(doc.__workflow_docs) frappe.model.sync(doc.__workflow_docs);
	},

	// build docfield_map and docfield_list
	add_field: function(df) {
		frappe.provide('frappe.meta.docfield_map.' + df.parent);
		frappe.meta.docfield_map[df.parent][df.fieldname || df.label] = df;

		if(!frappe.meta.docfield_list[df.parent])
			frappe.meta.docfield_list[df.parent] = [];

		// check for repeat
		for(var i in frappe.meta.docfield_list[df.parent]) {
			var d = frappe.meta.docfield_list[df.parent][i];
			if(df.fieldname==d.fieldname)
				return; // no repeat
		}
		frappe.meta.docfield_list[df.parent].push(df);
	},

	make_docfield_copy_for: function(doctype, docname) {
		var c = frappe.meta.docfield_copy;
		if(!c[doctype])
			c[doctype] = {};
		if(!c[doctype][docname])
			c[doctype][docname] = {};

		var docfield_list = frappe.meta.docfield_list[doctype] || [];
		for(var i=0, j=docfield_list.length; i<j; i++) {
			var df = docfield_list[i];
			c[doctype][docname][df.fieldname || df.label] = copy_dict(df);
		}
	},

	get_field: function(doctype, fieldname, name) {
		var out = frappe.meta.get_docfield(doctype, fieldname, name);

		// search in standard fields
		if (!out) {
			frappe.model.std_fields.every(function(d) {
				if(d.fieldname===fieldname) {
					out = d;
					return false;
				} else {
					return true;
				}
			});
		}
		return out;
	},

	get_docfield: function(doctype, fieldname, name) {
		var fields_dict = frappe.meta.get_docfield_copy(doctype, name);
		return fields_dict ? fields_dict[fieldname] : null;
	},

	set_formatter: function(doctype, fieldname, name, formatter) {
		frappe.meta.get_docfield(doctype, fieldname, name).formatter = formatter;
	},

	set_indicator_formatter: function(doctype, fieldname, name, get_text, get_color) {
		frappe.meta.get_docfield(doctype, fieldname, name).formatter =
			function(value, df, options, doc) {
				return repl('<span class="indicator %(color)s">%(name)s</span>', {
					color: get_color(),
					name: get_text()
				});
			};
	},

	get_docfields: function(doctype, name, filters) {
		var docfield_map = frappe.meta.get_docfield_copy(doctype, name);

		var docfields = frappe.meta.sort_docfields(docfield_map);

		if(filters) {
			docfields = frappe.utils.filter_dict(docfields, filters);
		}

		return docfields;
	},

	get_linked_fields: function(doctype) {
		return $.map(frappe.get_meta(doctype).fields,
			function(d) { return d.fieldtype=="Link" ? d.options : null; });
	},

	get_fields_to_check_permissions: function(doctype, name, user_permission_doctypes) {
		var fields = $.map(frappe.meta.get_docfields(doctype, name), function(df) {
			return (df.fieldtype==="Link" && df.ignore_user_permissions!==1 &&
				user_permission_doctypes.indexOf(df.options)!==-1) ? df : null;
		});

		if (user_permission_doctypes.indexOf(doctype)!==-1) {
			fields = fields.concat({label: "Name", fieldname: name, options: doctype});
		}

		return fields;
	},

	sort_docfields: function(docs) {
		return $.map(docs, function(d) { return d; }).sort(function(a, b) { return a.idx - b.idx });
	},

	get_docfield_copy: function(doctype, name) {
		if(!name) return frappe.meta.docfield_map[doctype];

		if(!(frappe.meta.docfield_copy[doctype] && frappe.meta.docfield_copy[doctype][name])) {
			frappe.meta.make_docfield_copy_for(doctype, name);
		}

		return frappe.meta.docfield_copy[doctype][name];
	},

	get_fieldnames: function(doctype, name, filters) {
		return $.map(frappe.utils.filter_dict(frappe.meta.docfield_map[doctype], filters),
			function(df) { return df.fieldname; });
	},

	has_field: function(dt, fn) {
		return frappe.meta.docfield_map[dt][fn];
	},

	get_table_fields: function(dt) {
		return $.map(frappe.meta.docfield_list[dt], function(d) {
			return d.fieldtype==='Table' ? d : null});
	},

	get_doctype_for_field: function(doctype, key) {
		var out = null;
		if(in_list(frappe.model.std_fields_list, key)) {
			// standard
			out = doctype;
		} else if(frappe.meta.has_field(doctype, key)) {
			// found in parent
			out = doctype;
		} else {
			frappe.meta.get_table_fields(doctype).every(function(d) {
				if(frappe.meta.has_field(d.options, key)) {
					out = d.options;
					return false;
				}
				return true;
			});

			if(!out) {
				// eslint-disable-next-line
				console.log(__('Warning: Unable to find {0} in any table related to {1}', [
					key, __(doctype)]));
			}
		}
		return out;
	},

	get_parentfield: function(parent_dt, child_dt) {
		var df = (frappe.get_doc("DocType", parent_dt).fields || []).filter(function(d)
			{ return d.fieldtype==="Table" && d.options===child_dt })
		if(!df.length)
			throw "parentfield not found for " + parent_dt + ", " + child_dt;
		return df[0].fieldname;
	},

	get_label: function(dt, fn, dn) {
		var standard = {
			'owner': __('Owner'),
			'creation': __('Created On'),
			'modified': __('Last Modified On'),
			'idx': __('Idx'),
			'name': __('Name'),
			'modified_by': __('Last Modified By')
		}
		if(standard[fn]) {
			return standard[fn];
		} else {
			var df = this.get_docfield(dt, fn, dn);
			return (df ? df.label : "") || fn;
		}
	},

	get_print_formats: function(doctype) {
		var print_format_list = ["Standard"];
		var default_print_format = locals.DocType[doctype].default_print_format;

		var print_formats = frappe.get_list("Print Format", {doc_type: doctype})
			.sort(function(a, b) { return (a > b) ? 1 : -1; });
		$.each(print_formats, function(i, d) {
			if(!in_list(print_format_list, d.name) && in_list(['Server', 'Client'], d.print_format_type))
				print_format_list.push(d.name);
		});

		if(default_print_format && default_print_format != "Standard") {
			var index = print_format_list.indexOf(default_print_format);
			print_format_list.splice(index, 1).sort();
			print_format_list.unshift(default_print_format);
		}

		return print_format_list;
	},

	sync_messages: function(doc) {
		if(doc.__messages) {
			$.extend(frappe._messages, doc.__messages);
		}
	},

	get_field_currency: function(df, doc) {
		var currency = frappe.boot.sysdefaults.currency;
		if(!doc && cur_frm)
			doc = cur_frm.doc;

		if(df && df.options) {
			if(doc && df.options.indexOf(":")!=-1) {
				var options = df.options.split(":");
				if(options.length==3) {
					// get reference record e.g. Company
					var docname = doc[options[1]];
					if(!docname && cur_frm) {
						docname = cur_frm.doc[options[1]];
					}
					currency = frappe.model.get_value(options[0], docname, options[2]) ||
						frappe.model.get_value(":" + options[0], docname, options[2]) ||
						currency;
				}
			} else if(doc && doc[df.options]) {
				currency = doc[df.options];
			} else if(cur_frm && cur_frm.doc[df.options]) {
				currency = cur_frm.doc[df.options];
			}
		}
		return currency;
	},

	get_field_precision: function(df, doc) {
		var precision = null;
		if (df && cint(df.precision)) {
			precision = cint(df.precision);
		} else if(df && df.fieldtype === "Currency") {
			precision = cint(frappe.defaults.get_default("currency_precision"));
			if(!precision) {
				var number_format = get_number_format();
				var number_format_info = get_number_format_info(number_format);
				precision = number_format_info.precision;
			}
		} else {
			precision = cint(frappe.defaults.get_default("float_precision")) || 3;
		}
		return precision;
	},
});

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/model/sync.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

$.extend(frappe.model, {
	docinfo: {},
	sync: function(r) {
		/* docs:
			extract docs, docinfo (attachments, comments, assignments)
			from incoming request and set in `locals` and `frappe.model.docinfo`
		*/
		var isPlain;
		if(!r.docs && !r.docinfo) r = {docs:r};

		isPlain = $.isPlainObject(r.docs);
		if(isPlain) r.docs = [r.docs];

		if(r.docs) {
			var last_parent_name = null;

			for(var i=0, l=r.docs.length; i<l; i++) {
				var d = r.docs[i];

				if (locals[d.doctype] && locals[d.doctype][d.name]) {
					// update values
					frappe.model.update_in_locals(d);
				} else {
					frappe.model.add_to_locals(d);
				}

				d.__last_sync_on = new Date();

				if(d.doctype==="DocType") {
					frappe.meta.sync(d);
				}

				if(d.localname) {
					frappe.model.new_names[d.localname] = d.name;
					$(document).trigger('rename', [d.doctype, d.localname, d.name]);
					delete locals[d.doctype][d.localname];

					// update docinfo to new dict keys
					if(i===0) {
						frappe.model.docinfo[d.doctype][d.name] = frappe.model.docinfo[d.doctype][d.localname];
						frappe.model.docinfo[d.doctype][d.localname] = undefined;
					}
				}
			}



		}

		// set docinfo (comments, assign, attachments)
		if(r.docinfo) {
			if(r.docs) {
				var doc = r.docs[0];
			} else {
				if(cur_frm)
					var doc = cur_frm.doc;
			}
			if(doc) {
				if(!frappe.model.docinfo[doc.doctype])
					frappe.model.docinfo[doc.doctype] = {};
				frappe.model.docinfo[doc.doctype][doc.name] = r.docinfo;
			}
		}

		return r.docs;
	},
	add_to_locals: function(doc) {
		if(!locals[doc.doctype])
			locals[doc.doctype] = {};

		if(!doc.name && doc.__islocal) { // get name (local if required)
			if(!doc.parentfield) frappe.model.clear_doc(doc);

			doc.name = frappe.model.get_new_name(doc.doctype);

			if(!doc.parentfield) frappe.provide("frappe.model.docinfo." + doc.doctype + "." + doc.name);
		}

		locals[doc.doctype][doc.name] = doc;

		// add child docs to locals
		if(!doc.parentfield) {
			for(var i in doc) {
				var value = doc[i];

				if($.isArray(value)) {
					for (var x=0, y=value.length; x < y; x++) {
						var d = value[x];

						if(!d.parent)
							d.parent = doc.name;

						frappe.model.add_to_locals(d);
					}
				}
			}
		}
	},
	update_in_locals: function(doc) {
		// update values in the existing local doc instead of replacing
		let local_doc = locals[doc.doctype][doc.name];
		let clear_keys = function(source, target) {
			Object.keys(target).map(key => {
				if (source[key] == undefined) delete target[key];
			});
		}
		
		for (let fieldname in doc) {
			let df = frappe.meta.get_field(doc.doctype, fieldname);
			if (df && df.fieldtype === 'Table') {
				// table
				if (!(doc[fieldname] instanceof Array)) {
					doc[fieldname] = [];
				}

				if (!(local_doc[fieldname] instanceof Array)) {
					local_doc[fieldname] = [];
				}
				
				// child table, override each row and append new rows if required
				for (let i=0; i < doc[fieldname].length; i++ ) {
					let d = doc[fieldname][i];
					let local_d = local_doc[fieldname][i];
					if (local_d) {
						// deleted and added again
						if (!locals[d.doctype]) locals[d.doctype] = {};

						if (!d.name) {
							// incoming row is new, find a new name
							d.name = frappe.model.get_new_name(doc.doctype);
						}

						// if incoming row is not registered, register it
						if (!locals[d.doctype][d.name]) {
							// detach old key
							delete locals[d.doctype][local_d.name];

							// re-attach with new name
							locals[d.doctype][d.name] = local_d;
						}

						// row exists, just copy the values
						Object.assign(local_d, d);
						clear_keys(d, local_d);
						
					} else {
						local_doc[fieldname].push(d);
						if (!d.parent) d.parent = doc.name;
						frappe.model.add_to_locals(d);
					}
				}

				// remove extra rows
				if (local_doc[fieldname].length > doc[fieldname].length) {
					for (let i = doc[fieldname].length; i < local_doc[fieldname].length; i++) {

						// clear from local
						let d = local_doc[fieldname][i];
						if (locals[d.doctype] && locals[d.doctype][d.name]) {
							delete locals[d.doctype][d.name];
						}
					}
					local_doc[fieldname].length = doc[fieldname].length;

				}
			} else {
				// literal
				local_doc[fieldname] = doc[fieldname];
			}
		}
		
		// clear keys on parent
		clear_keys(doc, local_doc);
	}

});

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/model/create_new.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.model");

$.extend(frappe.model, {
	new_names: {},
	new_name_count: {},

	get_new_doc: function(doctype, parent_doc, parentfield, with_mandatory_children) {
		frappe.provide("locals." + doctype);
		var doc = {
			docstatus: 0,
			doctype: doctype,
			name: frappe.model.get_new_name(doctype),
			__islocal: 1,
			__unsaved: 1,
			owner: frappe.session.user
		};
		frappe.model.set_default_values(doc, parent_doc);

		if(parent_doc) {
			$.extend(doc, {
				parent: parent_doc.name,
				parentfield: parentfield,
				parenttype: parent_doc.doctype,
			});
			if(!parent_doc[parentfield]) parent_doc[parentfield] = [];
			doc.idx = parent_doc[parentfield].length + 1;
			parent_doc[parentfield].push(doc);
		} else {
			frappe.provide("frappe.model.docinfo." + doctype + "." + doc.name);
		}

		frappe.model.add_to_locals(doc);

		if(with_mandatory_children) {
			frappe.model.create_mandatory_children(doc);
		}

		if (!parent_doc) {
			doc.__run_link_triggers = 1;
		}

		// set the name if called from a link field
		if(frappe.route_options && frappe.route_options.name_field) {

			var meta = frappe.get_meta(doctype);
			// set title field / name as name
			if(meta.autoname && meta.autoname.indexOf("field:")!==-1) {
				doc[meta.autoname.substr(6)] = frappe.route_options.name_field;
			} else if(meta.title_field) {
				doc[meta.title_field] = frappe.route_options.name_field;
			}


			delete frappe.route_options.name_field;
		}

		// set route options
		if(frappe.route_options && !doc.parent) {
			$.each(frappe.route_options, function(fieldname, value) {
				var df = frappe.meta.has_field(doctype, fieldname);
				if(df && in_list(['Link', 'Data', 'Select', 'Dynamic Link'], df.fieldtype) && !df.no_copy) {
					doc[fieldname]=value;
				}
			});
			frappe.route_options = null;
		}

		return doc;
	},

	make_new_doc_and_get_name: function(doctype, with_mandatory_children) {
		return frappe.model.get_new_doc(doctype, null, null, with_mandatory_children).name;
	},

	get_new_name: function(doctype) {
		var cnt = frappe.model.new_name_count
		if(!cnt[doctype])
			cnt[doctype] = 0;
		cnt[doctype]++;
		return __('New') + ' '+ __(doctype) + ' ' + cnt[doctype];
	},

	set_default_values: function(doc, parent_doc) {
		var doctype = doc.doctype;
		var docfields = frappe.meta.docfield_list[doctype] || [];
		var updated = [];

		for(var fid=0;fid<docfields.length;fid++) {
			var f = docfields[fid];

			if(!in_list(frappe.model.no_value_type, f.fieldtype) && doc[f.fieldname]==null) {
				var v = frappe.model.get_default_value(f, doc, parent_doc);
				if(v) {
					if(in_list(["Int", "Check"], f.fieldtype))
						v = cint(v);
					else if(in_list(["Currency", "Float"], f.fieldtype))
						v = flt(v);

					doc[f.fieldname] = v;
					updated.push(f.fieldname);
				} else if(f.fieldtype == "Select" && f.options && typeof f.options === 'string'
					&& !in_list(["[Select]", "Loading..."], f.options)) {

					doc[f.fieldname] = f.options.split("\n")[0];
				}
			}
		}
		return updated;
	},

	create_mandatory_children: function(doc) {
		var meta = frappe.get_meta(doc.doctype);
		if(meta && meta.istable) return;

		// create empty rows for mandatory table fields
		frappe.meta.docfield_list[doc.doctype].forEach(function(df) {
			if(df.fieldtype==='Table' && df.reqd) {
				frappe.model.add_child(doc, df.fieldname);
			}
		});
	},

	get_default_value: function(df, doc, parent_doc) {
		var user_default = "";
		var user_permissions = frappe.defaults.get_user_permissions();
		var meta = frappe.get_meta(doc.doctype);
		var has_user_permissions = (df.fieldtype==="Link"
			&& user_permissions
			&& df.ignore_user_permissions != 1
			&& user_permissions[df.options]);

		// don't set defaults for "User" link field using User Permissions!
		if (df.fieldtype==="Link" && df.options!=="User") {
			// 1 - look in user permissions for document_type=="Setup".
			// We don't want to include permissions of transactions to be used for defaults.
			if (df.linked_document_type==="Setup"
				&& has_user_permissions && user_permissions[df.options].length===1) {
				return user_permissions[df.options][0];
			}

			if(!df.ignore_user_permissions) {
				// 2 - look in user defaults
				var user_defaults = frappe.defaults.get_user_defaults(df.options);
				if (user_defaults && user_defaults.length===1) {
					// Use User Permission value when only when it has a single value
					user_default = user_defaults[0];
				}
			}

			if (!user_default) {
				user_default = frappe.defaults.get_user_default(df.fieldname);
			}

			if(!user_default && df.remember_last_selected_value && frappe.boot.user.last_selected_values) {
				user_default = frappe.boot.user.last_selected_values[df.options];
			}

			var is_allowed_user_default = user_default &&
				(!has_user_permissions || user_permissions[df.options].indexOf(user_default)!==-1);

			// is this user default also allowed as per user permissions?
			if (is_allowed_user_default) {
				return user_default;
			}
		}

		// 3 - look in default of docfield
		if (df['default']) {

			if (df["default"] == "__user" || df["default"].toLowerCase() == "user") {
				return frappe.session.user;

			} else if (df["default"] == "user_fullname") {
				return frappe.session.user_fullname;

			} else if (df["default"] == "Today") {
				return frappe.datetime.get_today();

			} else if ((df["default"] || "").toLowerCase() === "now") {
				return frappe.datetime.now_datetime();

			} else if (df["default"][0]===":") {
				var boot_doc = frappe.model.get_default_from_boot_docs(df, doc, parent_doc);
				var is_allowed_boot_doc = !has_user_permissions || user_permissions[df.options].indexOf(boot_doc)!==-1;

				if (is_allowed_boot_doc) {
					return boot_doc;
				}
			} else if (df.fieldname===meta.title_field) {
				// ignore defaults for title field
				return "";
			}

			// is this default value is also allowed as per user permissions?
			var is_allowed_default = !has_user_permissions || user_permissions[df.options].indexOf(df["default"])!==-1;
			if (df.fieldtype!=="Link" || df.options==="User" || is_allowed_default) {
				return df["default"];
			}

		} else if (df.fieldtype=="Time") {
			return frappe.datetime.now_time();
		}
	},

	get_default_from_boot_docs: function(df, doc, parent_doc) {
		// set default from partial docs passed during boot like ":User"
		if(frappe.get_list(df["default"]).length > 0) {
			var ref_fieldname = df["default"].slice(1).toLowerCase().replace(" ", "_");
			var ref_value = parent_doc ?
				parent_doc[ref_fieldname] :
				frappe.defaults.get_user_default(ref_fieldname);
			var ref_doc = ref_value ? frappe.get_doc(df["default"], ref_value) : null;

			if(ref_doc && ref_doc[df.fieldname]) {
				return ref_doc[df.fieldname];
			}
		}
	},

	add_child: function(parent_doc, doctype, parentfield, idx) {
		// if given doc, fieldname only
		if(arguments.length===2) {
			parentfield = doctype;
			doctype = frappe.meta.get_field(parent_doc.doctype, parentfield).options;
		}

		// create row doc
		idx = idx ? idx - 0.1 : (parent_doc[parentfield] || []).length + 1;

		var child = frappe.model.get_new_doc(doctype, parent_doc, parentfield);
		child.idx = idx;

		// renum for fraction
		if(idx !== cint(idx)) {
			var sorted = parent_doc[parentfield].sort(function(a, b) { return a.idx - b.idx; });
			for(var i=0, j=sorted.length; i<j; i++) {
				var d = sorted[i];
				d.idx = i + 1;
			}
		}

		if (cur_frm && cur_frm.doc == parent_doc) cur_frm.dirty();

		return child;
	},

	copy_doc: function(doc, from_amend, parent_doc, parentfield) {
		var no_copy_list = ['name','amended_from','amendment_date','cancel_reason'];
		var newdoc = frappe.model.get_new_doc(doc.doctype, parent_doc, parentfield);

		for(var key in doc) {
			// dont copy name and blank fields
			var df = frappe.meta.get_docfield(doc.doctype, key);

			if (df && key.substr(0, 2) != '__'
				&& !in_list(no_copy_list, key)
				&& !(df && (!from_amend && cint(df.no_copy) == 1))) {

				var value = doc[key] || [];
				if (df.fieldtype === "Table") {
					for (var i = 0, j = value.length; i < j; i++) {
						var d = value[i];
						frappe.model.copy_doc(d, from_amend, newdoc, df.fieldname);
					}
				} else {
					newdoc[key] = doc[key];
				}
			}
		}

		var user = frappe.session.user;

		newdoc.__islocal = 1;
		newdoc.docstatus = 0;
		newdoc.owner = user;
		newdoc.creation = '';
		newdoc.modified_by = user;
		newdoc.modified = '';

		return newdoc;
	},

	open_mapped_doc: function(opts) {
		if (opts.frm && opts.frm.doc.__unsaved) {
			frappe.throw(__("You have unsaved changes in this form. Please save before you continue."));

		} else if (!opts.source_name && opts.frm) {
			opts.source_name = opts.frm.doc.name;

		// Allow opening a mapped doc without a source document name
		} else if (!opts.frm) {
			opts.source_name = null;
		}

		return frappe.call({
			type: "POST",
			method: 'frappe.model.mapper.make_mapped_doc',
			args: {
				method: opts.method,
				source_name: opts.source_name,
				selected_children: opts.frm ? opts.frm.get_selected() : null
			},
			freeze: true,
			callback: function(r) {
				if(!r.exc) {
					frappe.model.sync(r.message);
					if(opts.run_link_triggers) {
						frappe.get_doc(r.message.doctype, r.message.name).__run_link_triggers = true;
					}
					frappe.set_route("Form", r.message.doctype, r.message.name);
				}
			}
		})
	}
});

frappe.create_routes = {};
frappe.new_doc = function (doctype, opts, init_callback) {
	return new Promise(resolve => {
		if(opts && $.isPlainObject(opts)) {
			frappe.route_options = opts;
		}
		frappe.model.with_doctype(doctype, function() {
			if(frappe.create_routes[doctype]) {
				frappe.set_route(frappe.create_routes[doctype])
					.then(() => resolve());
			} else {
				frappe.ui.form.make_quick_entry(doctype, null, init_callback)
					.then(() => resolve());
			}
		});

	});
}



/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/model/perm.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.perm");

// backward compatibilty
var READ = "read", WRITE = "write", CREATE = "create", DELETE = "delete";
var SUBMIT = "submit", CANCEL = "cancel", AMEND = "amend";

$.extend(frappe.perm, {
	rights: ["read", "write", "create", "delete", "submit", "cancel", "amend",
		"report", "import", "export", "print", "email", "share", "set_user_permissions"],

	doctype_perm: {},

	has_perm: function(doctype, permlevel, ptype, doc) {
		if (!permlevel) permlevel = 0;
		if (!frappe.perm.doctype_perm[doctype]) {
			frappe.perm.doctype_perm[doctype] = frappe.perm.get_perm(doctype);
		}

		var perms = frappe.perm.doctype_perm[doctype];
		if (!perms)
			return false;

		if (!perms[permlevel])
			return false;

		var perm = !!perms[permlevel][ptype];

		if(permlevel===0 && perm && doc) {
			var docinfo = frappe.model.get_docinfo(doctype, doc.name);
			if(docinfo && !docinfo.permissions[ptype])
				perm = false;
		}

		return perm;
	},

	get_perm: function(doctype, doc) {
		var perm = [{ read: 0, apply_user_permissions: {} }];

		var meta = frappe.get_doc("DocType", doctype);
		if (!meta) {
			return perm;
		}

		if (frappe.session.user === "Administrator" || frappe.user_roles.includes("Administrator")) {
			perm[0].read = 1;
		}

		frappe.perm.build_role_permissions(perm, meta);

		if(doc) {
			// apply user permissions via docinfo (which is processed server-side)
			var docinfo = frappe.model.get_docinfo(doctype, doc.name);
			if(docinfo) {
				$.each(docinfo.permissions || [], function(ptype, val) {
					perm[0][ptype] = val;
				});
			}

			// if owner
			if(!$.isEmptyObject(perm[0].if_owner)) {
				if(doc.owner === frappe.session.user) {
					$.extend(perm[0], perm[0].if_owner);
				} else {
					// not owner, remove permissions
					$.each(perm[0].if_owner, function(ptype, value) {
						if(perm[0].if_owner[ptype]) {
							perm[0][ptype] = 0
						}
					})
				}
			}

			// apply permissions from shared
			if(docinfo && docinfo.shared) {
				for(var i=0; i<docinfo.shared.length; i++) {
					var s = docinfo.shared[i];
					if(s.user === frappe.session.user) {
						perm[0]["read"] = perm[0]["read"] || s.read;
						perm[0]["write"] = perm[0]["write"] || s.write;
						perm[0]["share"] = perm[0]["share"] || s.share;

						if(s.read) {
							// also give print, email permissions if read
							// and these permissions exist at level [0]
							perm[0].email = frappe.boot.user.can_email.indexOf(doctype)!==-1 ? 1 : 0;
							perm[0].print = frappe.boot.user.can_print.indexOf(doctype)!==-1 ? 1 : 0;
						}
					}
				}
			}

		}

		if(frappe.model.can_read(doctype) && !perm[0].read) {
			// read via sharing
			perm[0].read = 1;
		}

		return perm;
	},

	build_role_permissions: function(perm, meta) {
		// Returns a `dict` of evaluated Role Permissions
		// Apply User Permission and its DocTypes are used to display match rules in list view

		$.each(meta.permissions || [], function(i, p) {
			// if user has this role
			if(frappe.user_roles.includes(p.role)) {
				var permlevel = cint(p.permlevel);
				if(!perm[permlevel]) {
					perm[permlevel] = {};
				}

				$.each(frappe.perm.rights, function(i, key) {
					perm[permlevel][key] = perm[permlevel][key] || (p[key] || 0);

					// NOTE: this data is required for displaying match rules in list view
					if (permlevel===0) {
						var apply_user_permissions = perm[permlevel].apply_user_permissions;
						var current_value = (apply_user_permissions[key]===undefined ?
								1 : apply_user_permissions[key]);
						apply_user_permissions[key] = current_value && cint(p.apply_user_permissions);
					}
				});

				// NOTE: this data is required for displaying match rules in list view
				if (permlevel===0 && cint(p.apply_user_permissions) && p.user_permission_doctypes) {
					// set user_permission_doctypes in perms
					var user_permission_doctypes = JSON.parse(p.user_permission_doctypes);

					if (user_permission_doctypes && user_permission_doctypes.length) {
						if (!perm[permlevel]["user_permission_doctypes"]) {
							perm[permlevel]["user_permission_doctypes"] = {};
						}

						$.each(frappe.perm.rights, function(i, key) {
							if (!perm[permlevel]["user_permission_doctypes"][key]) {
								perm[permlevel]["user_permission_doctypes"][key] = [];
							}

							perm[permlevel]["user_permission_doctypes"][key].push(user_permission_doctypes);
						});
					}
				}
			}
		});

		// remove values with 0
		$.each(perm[0], function(key, val) {
			if (!val) {
				delete perm[0][key];
			}
		});

		$.each(perm, function(i, v) {
			if(v===undefined) {
				perm[i] = {};
			}
		});
	},

	get_match_rules: function(doctype, ptype) {
		var me = this;
		var match_rules = [];

		if (!ptype) ptype = "read";

		var perm = frappe.perm.get_perm(doctype);
		var apply_user_permissions = perm[0].apply_user_permissions;
		if (!apply_user_permissions[ptype]) {
			return match_rules;
		}

		var user_permissions = frappe.defaults.get_user_permissions();
		if(user_permissions && !$.isEmptyObject(user_permissions)) {
			if(perm[0].user_permission_doctypes) {
				var user_permission_doctypes = me.get_user_permission_doctypes(perm[0].user_permission_doctypes[ptype],
					user_permissions);
			} else {
				// json is not set, so give list of all doctypes
				var user_permission_doctypes = [[doctype].concat(frappe.meta.get_linked_fields(doctype))];
			}

			$.each(user_permission_doctypes, function(i, doctypes) {
				var rules = {};
				var fields_to_check = frappe.meta.get_fields_to_check_permissions(doctype, null, doctypes);
				$.each(fields_to_check, function(i, df) {
					rules[df.label] = user_permissions[df.options] || [];
				});
				if (!$.isEmptyObject(rules)) {
					match_rules.push(rules);
				}
			});
		}

		if (perm[0].if_owner && perm[0].read) {
			match_rules.push({"Owner": frappe.session.user});
		}

		return match_rules;
	},

	get_user_permission_doctypes: function(user_permission_doctypes, user_permissions) {
		// returns a list of list like [["User", "Blog Post"], ["User"]]
		var out = [];

		if (user_permission_doctypes && user_permission_doctypes.length) {
			$.each(user_permission_doctypes, function(i, doctypes) {
				var valid_doctypes = [];
				$.each(doctypes, function(i, d) {
					if (user_permissions[d]) {
						valid_doctypes.push(d);
					}
				});
				if (valid_doctypes.length) {
					out.push(valid_doctypes);
				}
			});

		} else {
			out = [Object.keys(user_permissions)];
		}

		if (out.length > 1) {
			// OPTIMIZATION
			// if intersection exists, use that to reduce the amount of querying
			// for example, [["Blogger", "Blog Category"], ["Blogger"]], should only search in [["Blogger"]] as the first and condition becomes redundant
			var common = out[0];
			for (var i=1, l=out.length; i < l; i++) {
				common = frappe.utils.intersection(common, out[i]);
				if (!common.length) {
					break;
				}
			}

			if (common.length) {
				// is common one of the user_permission_doctypes set?
				common.sort();
				for (var i=0, l=out.length; i < l; i++) {
					var arr = [].concat(out).sort();
					// are arrays equal?
					if (JSON.stringify(common)===JSON.stringify(arr)) {
						out = [common];
						break;
					}
				}
			}
		}

		return out
	},

	get_field_display_status: function(df, doc, perm, explain) {
		// returns the display status of a particular field
		// returns one of "Read", "Write" or "None"
		if(!perm && doc) {
			perm = frappe.perm.get_perm(doc.doctype, doc);
		}

		if(!perm) {
			return (df && (cint(df.hidden) || cint(df.hidden_due_to_dependency))) ? "None": "Write";
		}

		if(!df.permlevel) df.permlevel = 0;
		var p = perm[df.permlevel];
		var status = "None";

		// permission
		if(p) {
			if(p.write && !df.disabled) {
				status = "Write";
			} else if(p.read) {
				status = "Read";
			}
		}
		if(explain) console.log("By Permission:" + status);

		// hidden
		if(cint(df.hidden)) status = "None";
		if(explain) console.log("By Hidden:" + status);

		// hidden due to dependency
		if(cint(df.hidden_due_to_dependency)) status = "None";
		if(explain) console.log("By Hidden Due To Dependency:" + status);

		if(!doc) {
			return status;
		}

		// submit
		if(status==="Write" && cint(doc.docstatus) > 0) status = "Read";
		if(explain) console.log("By Submit:" + status);

		// allow on submit
		// var allow_on_submit = df.fieldtype==="Table" ? 0 : cint(df.allow_on_submit);
		var allow_on_submit = cint(df.allow_on_submit);
		if(status==="Read" && allow_on_submit && cint(doc.docstatus)===1 && p.write) {
			status = "Write";
		}
		if(explain) console.log("By Allow on Submit:" + status);

		// workflow state
		if(status==="Read" && cur_frm && cur_frm.state_fieldname) {
			// fields updated by workflow must be read-only
			if(cint(cur_frm.read_only) ||
				in_list(cur_frm.states.update_fields, df.fieldname) ||
				df.fieldname==cur_frm.state_fieldname) {
				status = "Read";
			}
		}
		if(explain) console.log("By Workflow:" + status);

		// read only field is checked
		if(status==="Write" && cint(df.read_only)) {
			status = "Read";
		}
		if(explain) console.log("By Read Only:" + status);

		if(status==="Write" && df.set_only_once && !doc.__islocal) {
			status = "Read";
		}
		if(explain) console.log("By Set Only Once:" + status);

		return status;
	},

	is_visible: function(df, doc, perm) {
		if (typeof df === 'string') {
			// df is fieldname
			df = frappe.meta.get_docfield(doc.doctype, df, doc.parent || doc.name);
		}

		var status = frappe.perm.get_field_display_status(df, doc, perm);

		return status==="None" ? false : true;
	},
});

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/model/workflow.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.workflow");

frappe.workflow = {
	state_fields: {},
	workflows: {},
	setup: function(doctype) {
		var wf = frappe.get_list("Workflow", {document_type: doctype});
		if(wf.length) {
			frappe.workflow.workflows[doctype] = wf[0];
			frappe.workflow.state_fields[doctype] = wf[0].workflow_state_field;
		} else {
			frappe.workflow.state_fields[doctype] = null;
		}
	},
	get_state_fieldname: function(doctype) {
		if(frappe.workflow.state_fields[doctype]===undefined) {
			frappe.workflow.setup(doctype);
		}
		return frappe.workflow.state_fields[doctype];
	},
	get_default_state: function(doctype, docstatus) {
		frappe.workflow.setup(doctype);
		var value = null;
		$.each(frappe.workflow.workflows[doctype].states, function(i, workflow_state) {
			if(cint(workflow_state.doc_status)===cint(docstatus)) {
				value = workflow_state.state;
				return false;
			}
		});
		return value;
	},
	get_transitions: function(doctype, state) {
		frappe.workflow.setup(doctype);
		return frappe.get_children(frappe.workflow.workflows[doctype], "transitions", {state:state});
	},
	get_document_state: function(doctype, state) {
		frappe.workflow.setup(doctype);
		return frappe.get_children(frappe.workflow.workflows[doctype], "states", {state:state})[0];
	},
	get_next_state: function(doctype, state, action) {
		return frappe.get_children(frappe.workflow.workflows[doctype], "transitions", {
			state:state, action:action})[0].next_state;
	},
	is_read_only: function(doctype, name) {
		var state_fieldname = frappe.workflow.get_state_fieldname(doctype);
		if(state_fieldname) {
			var doc = locals[doctype][name];
			if(!doc)
				return false;
			if(doc.__islocal)
				return false;

			var state = doc[state_fieldname] ||
				frappe.workflow.get_default_state(doctype, doc.docstatus);

			var allow_edit = state ? frappe.workflow.get_document_state(doctype, state) && frappe.workflow.get_document_state(doctype, state).allow_edit : null;

			if(!frappe.user_roles.includes(allow_edit)) {
				return true;
			}
		}
		return false;
	},
	get_update_fields: function(doctype) {
		var update_fields = $.unique($.map(frappe.workflow.workflows[doctype].states || [],
			function(d) {
				return d.update_field;
			}));
		return update_fields;
	}
};

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/model/user_settings.js
 */
frappe.provide('frappe.model.user_settings');

$.extend(frappe.model.user_settings, {
	save: function(doctype, key, value) {
		var user_settings = frappe.model.user_settings[doctype] || {};

		if ($.isPlainObject(value)) {
			$.extend(user_settings[key], value);
		} else {
			user_settings[key] = value;
		}

		return this.update(doctype, user_settings);
	},
	remove: function(doctype, key) {
		var user_settings = frappe.model.user_settings[doctype] || {};
		delete user_settings[key];

		return this.update(doctype, user_settings);
	},
	update: function(doctype, user_settings) {
		return frappe.call({
			method: 'frappe.model.utils.user_settings.save',
			args: {
				doctype: doctype,
				user_settings: user_settings
			},
			callback: function(r) {
				frappe.model.user_settings[doctype] = r.message;
			}
		})
	}
});

frappe.get_user_settings = function(doctype, key) {
	var settings = frappe.model.user_settings[doctype] || {};
	if(key) {
		settings = settings[key] || {};
	}
	return settings;
}
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/lib/md5.min.js
 */
!function(a){function b(a,b){var c=(65535&a)+(65535&b),d=(a>>16)+(b>>16)+(c>>16);return d<<16|65535&c}function c(a,b){return a<<b|a>>>32-b}function d(a,d,e,f,g,h){return b(c(b(b(d,a),b(f,h)),g),e)}function e(a,b,c,e,f,g,h){return d(b&c|~b&e,a,b,f,g,h)}function f(a,b,c,e,f,g,h){return d(b&e|c&~e,a,b,f,g,h)}function g(a,b,c,e,f,g,h){return d(b^c^e,a,b,f,g,h)}function h(a,b,c,e,f,g,h){return d(c^(b|~e),a,b,f,g,h)}function i(a,c){a[c>>5]|=128<<c%32,a[(c+64>>>9<<4)+14]=c;var d,i,j,k,l,m=1732584193,n=-271733879,o=-1732584194,p=271733878;for(d=0;d<a.length;d+=16)i=m,j=n,k=o,l=p,m=e(m,n,o,p,a[d],7,-680876936),p=e(p,m,n,o,a[d+1],12,-389564586),o=e(o,p,m,n,a[d+2],17,606105819),n=e(n,o,p,m,a[d+3],22,-1044525330),m=e(m,n,o,p,a[d+4],7,-176418897),p=e(p,m,n,o,a[d+5],12,1200080426),o=e(o,p,m,n,a[d+6],17,-1473231341),n=e(n,o,p,m,a[d+7],22,-45705983),m=e(m,n,o,p,a[d+8],7,1770035416),p=e(p,m,n,o,a[d+9],12,-1958414417),o=e(o,p,m,n,a[d+10],17,-42063),n=e(n,o,p,m,a[d+11],22,-1990404162),m=e(m,n,o,p,a[d+12],7,1804603682),p=e(p,m,n,o,a[d+13],12,-40341101),o=e(o,p,m,n,a[d+14],17,-1502002290),n=e(n,o,p,m,a[d+15],22,1236535329),m=f(m,n,o,p,a[d+1],5,-165796510),p=f(p,m,n,o,a[d+6],9,-1069501632),o=f(o,p,m,n,a[d+11],14,643717713),n=f(n,o,p,m,a[d],20,-373897302),m=f(m,n,o,p,a[d+5],5,-701558691),p=f(p,m,n,o,a[d+10],9,38016083),o=f(o,p,m,n,a[d+15],14,-660478335),n=f(n,o,p,m,a[d+4],20,-405537848),m=f(m,n,o,p,a[d+9],5,568446438),p=f(p,m,n,o,a[d+14],9,-1019803690),o=f(o,p,m,n,a[d+3],14,-187363961),n=f(n,o,p,m,a[d+8],20,1163531501),m=f(m,n,o,p,a[d+13],5,-1444681467),p=f(p,m,n,o,a[d+2],9,-51403784),o=f(o,p,m,n,a[d+7],14,1735328473),n=f(n,o,p,m,a[d+12],20,-1926607734),m=g(m,n,o,p,a[d+5],4,-378558),p=g(p,m,n,o,a[d+8],11,-2022574463),o=g(o,p,m,n,a[d+11],16,1839030562),n=g(n,o,p,m,a[d+14],23,-35309556),m=g(m,n,o,p,a[d+1],4,-1530992060),p=g(p,m,n,o,a[d+4],11,1272893353),o=g(o,p,m,n,a[d+7],16,-155497632),n=g(n,o,p,m,a[d+10],23,-1094730640),m=g(m,n,o,p,a[d+13],4,681279174),p=g(p,m,n,o,a[d],11,-358537222),o=g(o,p,m,n,a[d+3],16,-722521979),n=g(n,o,p,m,a[d+6],23,76029189),m=g(m,n,o,p,a[d+9],4,-640364487),p=g(p,m,n,o,a[d+12],11,-421815835),o=g(o,p,m,n,a[d+15],16,530742520),n=g(n,o,p,m,a[d+2],23,-995338651),m=h(m,n,o,p,a[d],6,-198630844),p=h(p,m,n,o,a[d+7],10,1126891415),o=h(o,p,m,n,a[d+14],15,-1416354905),n=h(n,o,p,m,a[d+5],21,-57434055),m=h(m,n,o,p,a[d+12],6,1700485571),p=h(p,m,n,o,a[d+3],10,-1894986606),o=h(o,p,m,n,a[d+10],15,-1051523),n=h(n,o,p,m,a[d+1],21,-2054922799),m=h(m,n,o,p,a[d+8],6,1873313359),p=h(p,m,n,o,a[d+15],10,-30611744),o=h(o,p,m,n,a[d+6],15,-1560198380),n=h(n,o,p,m,a[d+13],21,1309151649),m=h(m,n,o,p,a[d+4],6,-145523070),p=h(p,m,n,o,a[d+11],10,-1120210379),o=h(o,p,m,n,a[d+2],15,718787259),n=h(n,o,p,m,a[d+9],21,-343485551),m=b(m,i),n=b(n,j),o=b(o,k),p=b(p,l);return[m,n,o,p]}function j(a){var b,c="";for(b=0;b<32*a.length;b+=8)c+=String.fromCharCode(a[b>>5]>>>b%32&255);return c}function k(a){var b,c=[];for(c[(a.length>>2)-1]=void 0,b=0;b<c.length;b+=1)c[b]=0;for(b=0;b<8*a.length;b+=8)c[b>>5]|=(255&a.charCodeAt(b/8))<<b%32;return c}function l(a){return j(i(k(a),8*a.length))}function m(a,b){var c,d,e=k(a),f=[],g=[];for(f[15]=g[15]=void 0,e.length>16&&(e=i(e,8*a.length)),c=0;16>c;c+=1)f[c]=909522486^e[c],g[c]=1549556828^e[c];return d=i(f.concat(k(b)),512+8*b.length),j(i(g.concat(d),640))}function n(a){var b,c,d="0123456789abcdef",e="";for(c=0;c<a.length;c+=1)b=a.charCodeAt(c),e+=d.charAt(b>>>4&15)+d.charAt(15&b);return e}function o(a){return unescape(encodeURIComponent(a))}function p(a){return l(o(a))}function q(a){return n(p(a))}function r(a,b){return m(o(a),o(b))}function s(a,b){return n(r(a,b))}function t(a,b,c){return b?c?r(b,a):s(b,a):c?p(a):q(a)}"function"==typeof define&&define.amd?define(function(){return t}):a.md5=t}(this);
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/misc/user.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

// misc user functions

frappe.user_info = function(uid) {
	if(!uid)
		uid = frappe.session.user;

	if(uid.toLowerCase()==="bot") {
		return {
			fullname: __("Bot"),
			image: "/assets/frappe/images/ui/bot.png",
			abbr: "B"
		}
	}

	if(!(frappe.boot.user_info && frappe.boot.user_info[uid])) {
		var user_info = {
			fullname: toTitle(uid.split("@")[0]) || "Unknown"
		};
	} else {
		var user_info = frappe.boot.user_info[uid];
	}

	user_info.abbr = frappe.get_abbr(user_info.fullname);
	user_info.color = frappe.get_palette(user_info.fullname);

	return user_info;
}

frappe.ui.set_user_background = function(src, selector, style) {
	if(!selector) selector = "#page-desktop";
	if(!style) style = "Fill Screen";
	if(src) {
		if (window.cordova && src.indexOf("http") === -1) {
			src = frappe.base_url + src;
		}
		var background = repl('background: url("%(src)s") center center;', {src: src});
	} else {
		var background = "background-color: #4B4C9D;";
	}

	frappe.dom.set_style(repl('%(selector)s { \
		%(background)s \
		background-attachment: fixed; \
		%(style)s \
	}', {
		selector:selector,
		background:background,
		style: style==="Fill Screen" ? "background-size: cover;" : ""
	}));
}

frappe.provide('frappe.user');

$.extend(frappe.user, {
	name: 'Guest',
	full_name: function(uid) {
		return uid === frappe.session.user ?
			__("You") :
			frappe.user_info(uid).fullname;
	},
	image: function(uid) {
		return frappe.user_info(uid).image;
	},
	abbr: function(uid) {
		return frappe.user_info(uid).abbr;
	},
	has_role: function(rl) {
		if(typeof rl=='string')
			rl = [rl];
		for(var i in rl) {
			if((frappe.boot ? frappe.boot.user.roles : ['Guest']).indexOf(rl[i])!=-1)
				return true;
		}
	},
	get_desktop_items: function() {
		// hide based on permission
		var modules_list = $.map(frappe.boot.desktop_icons, function(icon) {
			var m = icon.module_name;
			var type = frappe.modules[m] && frappe.modules[m].type;

			if(frappe.boot.user.allow_modules.indexOf(m) === -1) return null;

			var ret = null;
			if (type === "module") {
				if(frappe.boot.user.allow_modules.indexOf(m)!=-1 || frappe.modules[m].is_help)
					ret = m;
			} else if (type === "page") {
				if(frappe.boot.allowed_pages.indexOf(frappe.modules[m].link)!=-1)
					ret = m;
			} else if (type === "list") {
				if(frappe.model.can_read(frappe.modules[m]._doctype))
					ret = m;
			} else if (type === "view") {
				ret = m;
			} else if (type === "setup") {
				if(frappe.user.has_role("System Manager") || frappe.user.has_role("Administrator"))
					ret = m;
			} else {
				ret = m;
			}

			return ret;
		});

		return modules_list;
	},

	is_module: function(m) {
		var icons = frappe.get_desktop_icons();
		for(var i=0; i<icons.length; i++) {
			if(m===icons[i].module_name) return true;
		}
		return false;
	},

	is_report_manager: function() {
		return frappe.user.has_role(['Administrator', 'System Manager', 'Report Manager']);
	},

	get_formatted_email: function(email) {
		var fullname = frappe.user.full_name(email);

		if (!fullname) {
			return email;
		} else {
			// to quote or to not
			var quote = '';

			// only if these special characters are found
			// why? To make the output same as that in python!
			if (fullname.search(/[\[\]\\()<>@,:;".]/) !== -1) {
				quote = '"';
			}

			return repl('%(quote)s%(fullname)s%(quote)s <%(email)s>', {
				fullname: fullname,
				email: email,
				quote: quote
			});
		}
	},

	/* Normally frappe.user is an object
	 * having properties and methods.
	 * But in the following case
	 * 
	 * if (frappe.user === 'Administrator')
	 * 
	 * frappe.user will cast to a string
	 * returning frappe.user.name
	 */
	toString: function() {
		return this.name;
	}
});

frappe.session_alive = true;
$(document).bind('mousemove', function() {
	if(frappe.session_alive===false) {
		$(document).trigger("session_alive");
	}
	frappe.session_alive = true;
	if(frappe.session_alive_timeout)
		clearTimeout(frappe.session_alive_timeout);
	frappe.session_alive_timeout = setTimeout('frappe.session_alive=false;', 30000);
});
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/misc/common.js
 */
// common file between desk and website

frappe.avatar = function(user, css_class, title) {
	if(user) {
		// desk
		var user_info = frappe.user_info(user);
	} else {
		// website
		user_info = {
			image: frappe.get_cookie("user_image"),
			fullname: frappe.get_cookie("full_name"),
			abbr: frappe.get_abbr(frappe.get_cookie("full_name")),
			color: frappe.get_palette(frappe.get_cookie("full_name"))
		}
	}

	if(!title) {
		title = user_info.fullname;
	}

	if(!css_class) {
		css_class = "avatar-small";
	}

	if(user_info.image) {

		var image = (window.cordova && user_info.image.indexOf('http')===-1) ?
			frappe.base_url + user_info.image : user_info.image;

		return repl('<span class="avatar %(css_class)s" title="%(title)s">\
			<span class="avatar-frame" style="background-image: url(%(image)s)"\
			title="%(title)s"></span></span>', {
				image: image,
				title: title,
				abbr: user_info.abbr,
				css_class: css_class
			});
	} else {
		var abbr = user_info.abbr;
		if(css_class==='avatar-small' || css_class=='avatar-xs') {
			abbr = abbr.substr(0, 1);
		}
		return repl('<span class="avatar %(css_class)s" title="%(title)s">\
			<div class="standard-image" style="background-color: %(color)s;">%(abbr)s</div></span>', {
				title: title,
				abbr: abbr,
				css_class: css_class,
				color: user_info.color
			})
	}
}

frappe.ui.scroll = function(element, animate, additional_offset) {
	var header_offset = $(".navbar").height() + $(".page-head").height();
	var top = $(element).offset().top - header_offset - cint(additional_offset);
	if (animate) {
		$("html, body").animate({ scrollTop: top });
	} else {
		$(window).scrollTop(top);
	}
};

frappe.get_palette = function(txt) {
	return '#fafbfc';
	// //return '#8D99A6';
	// if(txt==='Administrator') return '#36414C';
	// // get color palette selection from md5 hash
	// var idx = cint((parseInt(md5(txt).substr(4,2), 16) + 1) / 5.33);
	// if(idx > 47) idx = 47;
	// return frappe.palette[idx][0]
}

frappe.get_abbr = function(txt, max_length) {
	if (!txt) return "";
	var abbr = "";
	$.each(txt.split(" "), function(i, w) {
		if (abbr.length >= (max_length || 2)) {
			// break
			return false;

		} else if (!w.trim().length) {
			// continue
			return true;
		}

		abbr += w.trim()[0];
	});

	return abbr || "?";
}

frappe.gravatars = {};
frappe.get_gravatar = function(email_id, size = 0) {
	var param = size ? ('s=' + size) : 'd=retro';
	if(!frappe.gravatars[email_id]) {
		// TODO: check if gravatar exists
		frappe.gravatars[email_id] = "https://secure.gravatar.com/avatar/" + md5(email_id) + "?" + param;
	}
	return frappe.gravatars[email_id];
}

// string commons

function repl(s, dict) {
	if(s==null)return '';
	for(var key in dict) {
		s = s.split("%("+key+")s").join(dict[key]);
	}
	return s;
}

function replace_all(s, t1, t2) {
	return s.split(t1).join(t2);
}

function strip_html(txt) {
	return txt.replace(/<[^>]*>/g, "");
}

var strip = function(s, chars) {
	if (s) {
		var s= lstrip(s, chars)
		s = rstrip(s, chars);
		return s;
	}
}

var lstrip = function(s, chars) {
	if(!chars) chars = ['\n', '\t', ' '];
	// strip left
	var first_char = s.substr(0,1);
	while(in_list(chars, first_char)) {
		var s = s.substr(1);
		first_char = s.substr(0,1);
	}
	return s;
}

var rstrip = function(s, chars) {
	if(!chars) chars = ['\n', '\t', ' '];
	var last_char = s.substr(s.length-1);
	while(in_list(chars, last_char)) {
		var s = s.substr(0, s.length-1);
		last_char = s.substr(s.length-1);
	}
	return s;
}

function getCookie(name) {
	return getCookies()[name];
}

frappe.get_cookie = getCookie;

function getCookies() {
	var c = document.cookie, v = 0, cookies = {};
	if (document.cookie.match(/^\s*\$Version=(?:"1"|1);\s*(.*)/)) {
		c = RegExp.$1;
		v = 1;
	}
	if (v === 0) {
		c.split(/[,;]/).map(function(cookie) {
			var parts = cookie.split(/=/, 2),
				name = decodeURIComponent(parts[0].trimLeft()),
				value = parts.length > 1 ? decodeURIComponent(parts[1].trimRight()) : null;
			if(value && value.charAt(0)==='"') {
				value = value.substr(1, value.length-2);
			}
			cookies[name] = value;
		});
	} else {
		c.match(/(?:^|\s+)([!#$%&'*+\-.0-9A-Z^`a-z|~]+)=([!#$%&'*+\-.0-9A-Z^`a-z|~]*|"(?:[\x20-\x7E\x80\xFF]|\\[\x00-\x7F])*")(?=\s*[,;]|$)/g).map(function($0, $1) {
			var name = $0,
				value = $1.charAt(0) === '"'
						? $1.substr(1, -1).replace(/\\(.)/g, "$1")
						: $1;
			cookies[name] = value;
		});
	}
	return cookies;
}

if (typeof String.prototype.trimLeft !== "function") {
	String.prototype.trimLeft = function() {
		return this.replace(/^\s+/, "");
	};
}
if (typeof String.prototype.trimRight !== "function") {
	String.prototype.trimRight = function() {
		return this.replace(/\s+$/, "");
	};
}
if (typeof Array.prototype.map !== "function") {
	Array.prototype.map = function(callback, thisArg) {
		for (var i=0, n=this.length, a=[]; i<n; i++) {
			if (i in this) a[i] = callback.call(thisArg, this[i]);
		}
		return a;
	};
}


frappe.palette = [
	['#FFC4C4', 0],
	['#FFE8CD', 0],
	['#FFD2C2', 0],
	['#FF8989', 0],
	['#FFD19C', 0],
	['#FFA685', 0],
	['#FF4D4D', 1],
	['#FFB868', 0],
	['#FF7846', 1],
	['#A83333', 1],
	['#A87945', 1],
	['#A84F2E', 1],
	['#D2D2FF', 0],
	['#F8D4F8', 0],
	['#DAC7FF', 0],
	['#A3A3FF', 0],
	['#F3AAF0', 0],
	['#B592FF', 0],
	['#7575FF', 0],
	['#EC7DEA', 0],
	['#8E58FF', 1],
	['#4D4DA8', 1],
	['#934F92', 1],
	['#5E3AA8', 1],
	['#EBF8CC', 0],
	['#FFD7D7', 0],
	['#D2F8ED', 0],
	['#D9F399', 0],
	['#FFB1B1', 0],
	['#A4F3DD', 0],
	['#C5EC63', 0],
	['#FF8989', 1],
	['#77ECCA', 0],
	['#7B933D', 1],
	['#A85B5B', 1],
	['#49937E', 1],
	['#FFFACD', 0],
	['#D2F1FF', 0],
	['#CEF6D1', 0],
	['#FFF69C', 0],
	['#A6E4FF', 0],
	['#9DECA2', 0],
	['#FFF168', 0],
	['#78D6FF', 0],
	['#6BE273', 0],
	['#A89F45', 1],
	['#4F8EA8', 1],
	['#428B46', 1]
]

frappe.is_mobile = function() {
	return $(document).width() < 768;
}

frappe.utils.xss_sanitise = function (string, options) {
	// Reference - https://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet
	let sanitised = string; // un-sanitised string.
	const DEFAULT_OPTIONS = {
		strategies: ['html', 'js'] // use all strategies.
	}
	const HTML_ESCAPE_MAP = {
		'<': '&lt',
		'>': '&gt',
		'"': '&quot',
		"'": '&#x27',
		'/': '&#x2F'
	};
	const REGEX_SCRIPT     = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi; // used in jQuery 1.7.2 src/ajax.js Line 14
	options          	   = Object.assign({ }, DEFAULT_OPTIONS, options); // don't deep copy, immutable beauty.

	// Rule 1
	if ( options.strategies.includes('html') ) {
		for (let char in HTML_ESCAPE_MAP) {
			const escape = HTML_ESCAPE_MAP[char];
			const regex = new RegExp(char, "g");
			sanitised = sanitised.replace(regex, escape);
		}
	}

	// Rule 3 - TODO: Check event handlers?
	if ( options.strategies.includes('js') ) {
		sanitised = sanitised.replace(REGEX_SCRIPT, "");
	}

	return sanitised;
}
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/misc/pretty_date.js
 */
// moment strings for translation

function prettyDate(time, mini) {
	if (!time) {
		time = new Date();
	}
	if (moment) {
		if (frappe.sys_defaults && frappe.sys_defaults.time_zone) {
			var ret = moment.tz(time, frappe.sys_defaults.time_zone).locale(frappe.boot.lang).fromNow(mini);
		} else {
			var ret = moment(time).locale(frappe.boot.lang).fromNow(mini);
		}
		if (mini) {
			if (ret === moment().locale(frappe.boot.lang).fromNow(mini)) {
				ret = __("now");
			} else {
				var parts = ret.split(" ");
				if (parts.length > 1) {
					if (parts[0] === "a" || parts[0] === "an") {
						parts[0] = 1;
					}
					if (parts[1].substr(0, 2) === "mo") {
						ret = parts[0] + " M";
					} else {
						ret = parts[0] + " " + parts[1].substr(0, 1);
					}
				}
			}
			ret = ret.substr(0, 5);
		}
		return ret;
	} else {
		if (!time) return ''
		var date = time;
		if (typeof (time) == "string")
			date = new Date((time || "").replace(/-/g, "/").replace(/[TZ]/g, " ").replace(/\.[0-9]*/, ""));

		var diff = (((new Date()).getTime() - date.getTime()) / 1000),
			day_diff = Math.floor(diff / 86400);

		if (isNaN(day_diff) || day_diff < 0)
			return '';

		var when = day_diff == 0 && (
			diff < 60 && __("just now") ||
			diff < 120 && __("1 minute ago") ||
			diff < 3600 && __("{0} minutes ago", [Math.floor(diff / 60)]) ||
			diff < 7200 && __("1 hour ago") ||
			diff < 86400 && ("{0} hours ago", [Math.floor(diff / 3600)])) ||
			day_diff == 1 && __("Yesterday") ||
			day_diff < 7 && __("{0} days ago", day_diff) ||
			day_diff < 31 && __("{0} weeks ago", [Math.ceil(day_diff / 7)]) ||
			day_diff < 365 && __("{0} months ago", [Math.ceil(day_diff / 30)]) ||
			__("> {0} year(s) ago", [Math.floor(day_diff / 365)]);

		return when;
	}
}


var comment_when = function (datetime, mini) {
	var timestamp = frappe.datetime.str_to_user ?
		frappe.datetime.str_to_user(datetime) : datetime;
	return '<span class="frappe-timestamp '
		+ (mini ? " mini" : "") + '" data-timestamp="' + datetime
		+ '" title="' + timestamp + '">'
		+ prettyDate(datetime, mini) + '</span>';
};

frappe.provide("frappe.datetime");
frappe.datetime.refresh_when = function () {
	if (jQuery) {
		$(".frappe-timestamp").each(function () {
			$(this).html(prettyDate($(this).attr("data-timestamp"), $(this).hasClass("mini")));
		});
	}
}

setInterval(function () { frappe.datetime.refresh_when() }, 60000); // refresh every minute

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/misc/utils.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.utils');

frappe.utils = {
	get_random: function(len) {
		var text = "";
		var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";

		for( var i=0; i < len; i++ )
			text += possible.charAt(Math.floor(Math.random() * possible.length));

		return text;
	},
	get_file_link: function(filename) {
		filename = cstr(filename);
		if(frappe.utils.is_url(filename)) {
			return filename;
		} else if(filename.indexOf("/")===-1) {
			return "files/" + filename;
		} else {
			return filename;
		}
	},
	is_html: function(txt) {
		if (!txt) return false;

		if(txt.indexOf("<br>")==-1 && txt.indexOf("<p")==-1
			&& txt.indexOf("<img")==-1 && txt.indexOf("<div")==-1) {
			return false;
		}
		return true;
	},
	is_xs: function() {
		return $(document).width() < 768;
	},
	is_sm: function() {
		return $(document).width() < 991 && $(document).width() >= 768;
	},
	is_md: function() {
		return $(document).width() < 1199 && $(document).width() >= 991;
	},
	is_json: function(str) {
		try {
			JSON.parse(str);
		} catch (e) {
			return false;
		}
		return true;
	},
	strip_whitespace: function(html) {
		return (html || "").replace(/<p>\s*<\/p>/g, "").replace(/<br>(\s*<br>\s*)+/g, "<br><br>");
	},
	encode_tags: function(html) {
		var tagsToReplace = {
			'&': '&amp;',
			'<': '&lt;',
			'>': '&gt;'
		};

		function replaceTag(tag) {
			return tagsToReplace[tag] || tag;
		}

		return html.replace(/[&<>]/g, replaceTag);
	},
	strip_original_content: function(txt) {
		var out = [],
			part = [],
			newline = txt.indexOf("<br>")===-1 ? "\n" : "<br>";

		$.each(txt.split(newline), function(i, t) {
			var tt = strip(t);
			if(tt && (tt.substr(0,1)===">" || tt.substr(0,4)==="&gt;")) {
				part.push(t);
			} else {
				out.concat(part);
				out.push(t);
				part = [];
			}
		});
		return out.join(newline);
	},
	escape_html: function(txt) {
		return $("<div></div>").text(txt || "").html();
	},
	is_url: function(txt) {
		return txt.toLowerCase().substr(0,7)=='http://'
			|| txt.toLowerCase().substr(0,8)=='https://'
	},
	toggle_blockquote: function(txt) {
		if (!txt) return txt;

		var content = $("<div></div>").html(txt)
		content.find("blockquote").parent("blockquote").addClass("hidden")
			.before('<p><a class="text-muted btn btn-default toggle-blockquote" style="padding: 2px 7px 0px; line-height: 1;"> \
					• • • \
				</a></p>');
		return content.html();
	},
	scroll_to: function(element, animate, additional_offset) {
		var y = 0;
		if(element && typeof element==='number') {
			y = element;
		} else if(element) {
			var header_offset = $(".navbar").height() + $(".page-head").height();
			var y = $(element).offset().top - header_offset - cint(additional_offset);
		}

		if(y < 0) {
			y = 0;
		}

		// already there
		if(y==$('html, body').scrollTop()) {
			return;
		}

		if (animate!==false) {
			$("html, body").animate({ scrollTop: y });
		} else {
			$(window).scrollTop(y);
		}

	},
	filter_dict: function(dict, filters) {
		var ret = [];
		if(typeof filters=='string') {
			return [dict[filters]]
		}
		$.each(dict, function(i, d) {
			for(var key in filters) {
				if($.isArray(filters[key])) {
					if(filters[key][0]=="in") {
						if(filters[key][1].indexOf(d[key])==-1)
							return;
					} else if(filters[key][0]=="not in") {
						if(filters[key][1].indexOf(d[key])!=-1)
							return;
					} else if(filters[key][0]=="<") {
						if (!(d[key] < filters[key])) return;
					} else if(filters[key][0]=="<=") {
						if (!(d[key] <= filters[key])) return;
					} else if(filters[key][0]==">") {
						if (!(d[key] > filters[key])) return;
					} else if(filters[key][0]==">=") {
						if (!(d[key] >= filters[key])) return;
					}
				} else {
					if(d[key]!=filters[key]) return;
				}
			}
			ret.push(d);
		});
		return ret;
	},
	comma_or: function(list) {
		return frappe.utils.comma_sep(list, " " + __("or") + " ");
	},
	comma_and: function(list) {
		return frappe.utils.comma_sep(list, " " + __("and") + " ");
	},
	comma_sep: function(list, sep) {
		if(list instanceof Array) {
			if(list.length==0) {
				return "";
			} else if (list.length==1) {
				return list[0];
			} else {
				return list.slice(0, list.length-1).join(", ") + sep + list.slice(-1)[0];
			}
		} else {
			return list;
		}
	},
	set_intro: function(me, wrapper, txt, append, indicator) {
		if(!me.intro_area) {
			me.intro_area = $('<div class="intro-area">')
				.prependTo(wrapper);
		}
		if(txt) {
			if(!append) {
				me.intro_area.empty();
			}
			if(indicator) {
				me.intro_area.html('<div class="indicator '+indicator+'">'+txt+'</div>')
			} else {
				me.intro_area.html('<p class="text-muted">'+txt+'</div>')
			}
		} else {
			me.intro_area.remove();
			me.intro_area = null;
		}
	},
	set_footnote: function(footnote_area, wrapper, txt) {
		if(!footnote_area) {
			footnote_area = $('<div class="text-muted footnote-area">')
				.appendTo(wrapper);
		}

		if(txt) {
			if(!txt.includes('<p>'))
				txt = '<p>' + txt + '</p>';
			footnote_area.html(txt);
		} else {
			footnote_area.remove();
			footnote_area = null;
		}
		return footnote_area;
	},
	get_args_dict_from_url: function(txt) {
		var args = {};
		$.each(decodeURIComponent(txt).split("&"), function(i, arg) {
			arg = arg.split("=");
			args[arg[0]] = arg[1]
		});
		return args;
	},
	get_url_from_dict: function(args) {
		return $.map(args, function(val, key) {
			if(val!==null)
				return encodeURIComponent(key)+"="+encodeURIComponent(val);
			else
				return null;
		}).join("&") || "";
	},
	validate_type: function ( val, type ) {
		// from https://github.com/guillaumepotier/Parsley.js/blob/master/parsley.js#L81
		var regExp;

		switch ( type ) {
			case "number":
				regExp = /^-?(?:\d+|\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/;
				break;
			case "digits":
				regExp = /^\d+$/;
				break;
			case "alphanum":
				regExp = /^\w+$/;
				break;
			case "email":
				regExp = /^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i;
				break;
			case "url":
				regExp = /^(https?|s?ftp):\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i;
				break;
			case "dateIso":
				regExp = /^(\d{4})\D?(0[1-9]|1[0-2])\D?([12]\d|0[1-9]|3[01])$/;
				break;
			default:
				return false;
		}

		// test regExp if not null
		return '' !== val ? regExp.test( val ) : false;
	},
	guess_style: function(text, default_style, _colour) {
		var style = default_style || "default";
		var colour = "darkgrey";
		if(text) {
			if(has_words(["Pending", "Review", "Medium", "Not Approved"], text)) {
				style = "warning";
				colour = "orange";
			} else if(has_words(["Open", "Urgent", "High"], text)) {
				style = "danger";
				colour = "red";
			} else if(has_words(["Closed", "Finished", "Converted", "Completed", "Confirmed",
				"Approved", "Yes", "Active", "Available", "Paid"], text)) {
				style = "success";
				colour = "green";
			} else if(has_words(["Submitted"], text)) {
				style = "info";
				colour = "blue";
			}
		}
		return _colour ? colour : style;
	},

	guess_colour: function(text) {
		return frappe.utils.guess_style(text, null, true);
	},

	sort: function(list, key, compare_type, reverse) {
		if(!list || list.length < 2)
			return list || [];

		var sort_fn = {
			"string": function(a, b) {
				return cstr(a[key]).localeCompare(cstr(b[key]));
			},
			"number": function(a, b) {
				return flt(a[key]) - flt(b[key]);
			}
		};

		if(!compare_type)
			compare_type = typeof list[0][key]==="string" ? "string" : "number";

		list.sort(sort_fn[compare_type]);

		if(reverse) { list.reverse(); }

		return list;
	},

	unique: function(list) {
		var dict = {},
			arr = [];
		for(var i=0, l=list.length; i < l; i++) {
			if(!dict.hasOwnProperty(list[i])) {
				dict[list[i]] = null;
				arr.push(list[i]);
			}
		}
		return arr;
	},

	remove_nulls: function(list) {
		var new_list = [];
		for (var i=0, l=list.length; i < l; i++) {
			if (!is_null(list[i])) {
				new_list.push(list[i]);
			}
		}
		return new_list;
	},

	all: function(lst) {
		for(var i=0, l=lst.length; i<l; i++) {
			if(!lst[i]) {
				return false;
			}
		}
		return true;
	},

	dict: function(keys,values) {
		// make dictionaries from keys and values
		var out = [];
		$.each(values, function(row_idx, row) {
			var new_row = {};
			$.each(keys, function(key_idx, key) {
				new_row[key] = row[key_idx];
			})
			out.push(new_row);
		});
		return out;
	},

	sum: function(list) {
		return list.reduce(function(previous_value, current_value) { return flt(previous_value) + flt(current_value); }, 0.0);
	},

	arrays_equal: function(arr1, arr2) {
		if (!arr1 || !arr2) {
			return false;
		}
		if (arr1.length != arr2.length) {
			return false;
		}
		for (var i = 0; i < arr1.length; i++) {
			if ($.isArray(arr1[i])) {
				if (!frappe.utils.arrays_equal(arr1[i], arr2[i])) {
					return false;
				}
			}
			else if (arr1[i] !== arr2[i]) {
				return false;
			}
		}
		return true;
	},

	intersection: function(a, b) {
		// from stackoverflow: http://stackoverflow.com/questions/1885557/simplest-code-for-array-intersection-in-javascript
		/* finds the intersection of
		 * two arrays in a simple fashion.
		 *
		 * PARAMS
		 *  a - first array, must already be sorted
		 *  b - second array, must already be sorted
		 *
		 * NOTES
		 *
		 *  Should have O(n) operations, where n is
		 *    n = MIN(a.length(), b.length())
		 */
		var ai=0, bi=0;
		var result = new Array();

		// sorted copies
		a = ([].concat(a)).sort();
		b = ([].concat(b)).sort();

		while( ai < a.length && bi < b.length ) {
			if (a[ai] < b[bi] ) { ai++; }
			else if (a[ai] > b[bi] ) { bi++; }
			else {
				/* they're equal */
				result.push(a[ai]);
				ai++;
				bi++;
			}
		}

		return result;
	},

	resize_image: function(reader, callback, max_width, max_height) {
		var tempImg = new Image();
		if(!max_width) max_width = 600;
		if(!max_height) max_height = 400;
		tempImg.src = reader.result;

		tempImg.onload = function() {
			var tempW = tempImg.width;
			var tempH = tempImg.height;
			if (tempW > tempH) {
				if (tempW > max_width) {
					tempH *= max_width / tempW;
					tempW = max_width;
				}
			} else {
				if (tempH > max_height) {
					tempW *= max_height / tempH;
					tempH = max_height;
				}
			}

			var canvas = document.createElement('canvas');
			canvas.width = tempW;
			canvas.height = tempH;
			var ctx = canvas.getContext("2d");
			ctx.drawImage(this, 0, 0, tempW, tempH);
			var dataURL = canvas.toDataURL("image/jpeg");
			setTimeout(function() { callback(dataURL); }, 10 );
		}
	},

	csv_to_array: function (strData, strDelimiter) {
		// Check to see if the delimiter is defined. If not,
		// then default to comma.
		strDelimiter = (strDelimiter || ",");

		// Create a regular expression to parse the CSV values.
		var objPattern = new RegExp(
			(
				// Delimiters.
				"(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +

				// Quoted fields.
				"(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +

				// Standard fields.
				"([^\"\\" + strDelimiter + "\\r\\n]*))"
			),
			"gi"
			);


		// Create an array to hold our data. Give the array
		// a default empty first row.
		var arrData = [[]];

		// Create an array to hold our individual pattern
		// matching groups.
		var arrMatches = null;


		// Keep looping over the regular expression matches
		// until we can no longer find a match.
		while ((arrMatches = objPattern.exec( strData ))){

			// Get the delimiter that was found.
			var strMatchedDelimiter = arrMatches[ 1 ];

			// Check to see if the given delimiter has a length
			// (is not the start of string) and if it matches
			// field delimiter. If id does not, then we know
			// that this delimiter is a row delimiter.
			if (
				strMatchedDelimiter.length &&
				strMatchedDelimiter !== strDelimiter
				){

				// Since we have reached a new row of data,
				// add an empty row to our data array.
				arrData.push( [] );

			}

			var strMatchedValue;

			// Now that we have our delimiter out of the way,
			// let's check to see which kind of value we
			// captured (quoted or unquoted).
			if (arrMatches[ 2 ]){

				// We found a quoted value. When we capture
				// this value, unescape any double quotes.
				strMatchedValue = arrMatches[ 2 ].replace(
					new RegExp( "\"\"", "g" ),
					"\""
					);

			} else {

				// We found a non-quoted value.
				strMatchedValue = arrMatches[ 3 ];

			}


			// Now that we have our value string, let's add
			// it to the data array.
			arrData[ arrData.length - 1 ].push( strMatchedValue );
		}

		// Return the parsed data.
		return( arrData );
	},

	warn_page_name_change: function(frm) {
		frappe.msgprint(__("Note: Changing the Page Name will break previous URL to this page."));
	},

	notify: function(subject, body, route, onclick) {
		console.log('push notifications are evil and deprecated');
	},

	set_title: function(title) {
		frappe._original_title = title;
		if(frappe._title_prefix) {
			title = frappe._title_prefix + " " + title.replace(/<[^>]*>/g, "");
		}
		document.title = title;
	},

	set_title_prefix: function(prefix) {
		frappe._title_prefix = prefix;

		// reset the original title
		frappe.utils.set_title(frappe._original_title);
	},

	is_image_file: function(filename) {
		// url can have query params
		filename = filename.split('?')[0];
		return (/\.(gif|jpg|jpeg|tiff|png|svg)$/i).test(filename);
	},

	play_sound: function(name) {
		try {
			if (frappe.boot.user.mute_sounds) {
				return;
			}

			var audio = $("#sound-" + name)[0];
			audio.volume = audio.getAttribute("volume");
			audio.play();

		} catch(e) {
			console.log("Cannot play sound", name, e);
			// pass
		}

	},
	split_emails: function(txt) {
		var email_list = [];

		if (!txt) {
			return email_list;
		}

		// emails can be separated by comma or newline
		txt.split(/[,\n](?=(?:[^"]|"[^"]*")*$)/g).forEach(function(email) {
			email = email.trim();
			if (email) {
				email_list.push(email);
			}
		});

		return email_list;
	},
	supportsES6: function() {
		try {
			new Function("(a = 0) => a");
			return true;
		}
		catch (err) {
			return false;
		}
	}(),
	debounce: function(func, wait, immediate) {
		var timeout;
		return function() {
			var context = this, args = arguments;
			var later = function() {
				timeout = null;
				if (!immediate) func.apply(context, args);
			};
			var callNow = immediate && !timeout;
			clearTimeout(timeout);
			timeout = setTimeout(later, wait);
			if (callNow) func.apply(context, args);
		};
	}
};

// String.prototype.includes polyfill
// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/String/includes
if (!String.prototype.includes) {
	String.prototype.includes = function (search, start) {
		
		if (typeof start !== 'number') {
			start = 0;
		}
		if (start + search.length > this.length) {
			return false;
		} else {
			return this.indexOf(search, start) !== -1;
		}
	};
}
// Array.prototype.includes polyfill
// https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/includes
if (!Array.prototype.includes) {
	Object.defineProperty(Array.prototype, 'includes', {
		value: function(searchElement, fromIndex) {
			if (this == null) {
				throw new TypeError('"this" is null or not defined');
			}
			var o = Object(this);
			var len = o.length >>> 0;
			if (len === 0) {
				return false;
			}
			var n = fromIndex | 0;
			var k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);
			while (k < len) {
				if (o[k] === searchElement) {
					return true;
				}
				k++;
			}
			return false;
		}
	});
}
// Array de duplicate
if (!Array.prototype.uniqBy) {
	Object.defineProperty(Array.prototype, 'uniqBy', {
		value: function (key) {
			var seen = {};
			return this.filter(function (item) {
				var k = key(item);
				return seen.hasOwnProperty(k) ? false : (seen[k] = true);
			})
		}
	})
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/misc/test_utils.js
 */
// for testing
frappe.click_button = function(text, idx) {
	let container = '';
	if(typeof idx === 'string') {
		container = idx + ' ';
		idx = 0;
	}
	let element = $(`${container}.btn:contains("${text}"):visible`);
	if(!element.length) {
		throw `did not find any button containing ${text}`;
	}
	element.get(idx || 0).click();
	return frappe.timeout(0.5);
};

frappe.click_link = function(text, idx) {
	let element = $(`a:contains("${text}"):visible`);
	if(!element.length) {
		throw `did not find any link containing ${text}`;
	}
	element.get(idx || 0).click();
	return frappe.timeout(0.5);
};

frappe.click_element = function(selector, idx) {
	// Selector by class name like $(`.cart-items`)
	let element = $(`${selector}`);
	if(!element.length) {
		throw `did not find any link containing ${selector}`;
	}
	element.get(idx || 0).click();
	return frappe.timeout(0.5);
};

frappe.set_control= function(fieldname, value) {
	let control = $(`.form-control[data-fieldname="${fieldname}"]:visible`);
	if(!control.length) {
		throw `did not find any control with fieldname ${fieldname}`;
	}
	control.val(value).trigger('change');
	return frappe.timeout(0.5);
};

frappe.click_check = function(label, idx) {
	let check = $(`.checkbox:contains("${label}") input`);
	if(!check.length) {
		throw `did not find any checkbox with label ${label}`;
	}
	check.get(idx || 0).click();
	return frappe.timeout(0.5);
};
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/misc/tools.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.tools");

frappe.tools.downloadify = function(data, roles, title) {
	if(roles && roles.length && !has_common(roles, roles)) {
		frappe.msgprint(__("Export not allowed. You need {0} role to export.", [frappe.utils.comma_or(roles)]));
		return;
	}

	var filename = title + ".csv";
	var csv_data = frappe.tools.to_csv(data);
	var a = document.createElement('a');

	if ("download" in a) {
		// Used Blob object, because it can handle large files
		var blob_object = new Blob([csv_data], { type: 'text/csv;charset=UTF-8' });
		a.href = URL.createObjectURL(blob_object);
		a.download = filename;

	} else {
		// use old method
		a.href = 'data:attachment/csv,' + encodeURIComponent(csv_data);
		a.download = filename;
		a.target = "_blank";
	}

	document.body.appendChild(a);
	a.click();

	document.body.removeChild(a);
};

frappe.markdown = function(txt) {
	if(!frappe.md2html) {
		frappe.md2html = new Showdown.converter();
	}

	while(txt.substr(0,1)==="\n") {
		txt = txt.substr(1);
	}

	// remove leading tab (if they exist in the first line)
	var whitespace_len = 0,
		first_line = txt.split("\n")[0];

	while(["\n", "\t"].indexOf(first_line.substr(0,1))!== -1) {
		whitespace_len++;
		first_line = first_line.substr(1);
	}

	if(whitespace_len && whitespace_len != first_line.length) {
		var txt1 = [];
		$.each(txt.split("\n"), function(i, t) {
			txt1.push(t.substr(whitespace_len));
		})
		txt = txt1.join("\n");
	}

	return frappe.md2html.makeHtml(txt);
}


frappe.tools.to_csv = function(data) {
	var res = [];
	$.each(data, function(i, row) {
		row = $.map(row, function(col) {
			return typeof(col)==="string" ? ('"' + $('<i>').html(col.replace(/"/g, '""')).text() + '"') : col;
		});
		res.push(row.join(","));
	});
	return res.join("\n");
};

frappe.slickgrid_tools = {
	get_filtered_items: function(dataView) {
		var data = [];
		for (var i=0, len=dataView.getLength(); i<len; i++) {
			// remove single quotes at start and end of total labels when print/pdf 
			var obj = dataView.getItem(i);
			for (var item in obj) {
				if(obj.hasOwnProperty(item) && typeof(obj[item]) == "string"
					&& obj[item].charAt(0) == "'" && obj[item].charAt(obj[item].length -1) == "'") {
					dataView.getItem(i)[item] = obj[item].substr(1, obj[item].length-2);
				}
			}
			data.push(dataView.getItem(i));
		}
		return data;
	},
	get_view_data: function(columns, dataView, filter) {
		var col_row = $.map(columns, function(v) { return v.name; });
		var res = [];
		var col_map = $.map(columns, function(v) { return v.field; });

		for (var i=0, len=dataView.getLength(); i<len; i++) {
			var d = dataView.getItem(i);
			var row = [];
			$.each(col_map, function(i, col) {
				var val = d[col];
				if(val===null || val===undefined) {
					val = "";
				}
				if(typeof(val) == "string") {
					// export to csv and get first or second column of the grid indented if it is. e.g: account_name
					if((i<3) && d['indent'] > 0 && (isNaN((new Date(val)).valueOf()))) {
						val = " ".repeat(d['indent'] * 8) + val;
					}
					// remove single quotes at start and end of total labels when export to csv
					if(val.charAt(0) == "'" && val.charAt(val.length -1) == "'") {
						val = val.substr(1, val.length-2);
					}
				}
				row.push(val);
			});

			if(!filter || filter(row, d)) {
				res.push(row);
			}
		}
		return [col_row].concat(res);
	},
	add_property_setter_on_resize: function(grid) {
		grid.onColumnsResized.subscribe(function(e, args) {
			$.each(grid.getColumns(), function(i, col) {
				if(col.docfield && col.previousWidth != col.width &&
					!in_list(frappe.model.std_fields_list, col.docfield.fieldname) ) {
					frappe.call({
						method:"frappe.client.make_width_property_setter",
						args: {
							doc: {
								doctype:'Property Setter',
								doctype_or_field: 'DocField',
								doc_type: col.docfield.parent,
								field_name: col.docfield.fieldname,
								property: 'width',
								value: col.width,
								"__islocal": 1
							}
						}
					});
					col.previousWidth = col.width;
					col.docfield.width = col.width;
				}
			});
		});
	}
};

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/misc/datetime.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.datetime');

moment.defaultDateFormat = "YYYY-MM-DD";
moment.defaultTimeFormat = "HH:mm:ss";
moment.defaultDatetimeFormat = moment.defaultDateFormat + " " + moment.defaultTimeFormat;
moment.defaultFormat = moment.defaultDateFormat;

frappe.provide("frappe.datetime");

$.extend(frappe.datetime, {
	convert_to_user_tz: function(date, format) {
		// format defaults to true
		if(frappe.sys_defaults.time_zone) {
			var date_obj = moment.tz(date, frappe.sys_defaults.time_zone).local();
		} else {
			var date_obj = moment(date);
		}

		return (format===false) ? date_obj : date_obj.format(moment.defaultDatetimeFormat);
	},

	convert_to_system_tz: function(date, format) {
		// format defaults to true

		if(frappe.sys_defaults.time_zone) {
			var date_obj = moment(date).tz(frappe.sys_defaults.time_zone);
		} else {
			var date_obj = moment(date);
		}

		return (format===false) ? date_obj : date_obj.format(moment.defaultDatetimeFormat);
	},

	is_timezone_same: function() {
		if(frappe.sys_defaults.time_zone) {
			return moment().tz(frappe.sys_defaults.time_zone).utcOffset() === moment().utcOffset();
		} else {
			return true;
		}
	},

	str_to_obj: function(d) {
		return moment(d, moment.defaultDatetimeFormat)._d;
	},

	obj_to_str: function(d) {
		return moment(d).locale("en").format();
	},

	obj_to_user: function(d) {
		return moment(d).format(frappe.datetime.get_user_fmt().toUpperCase());
	},

	get_diff: function(d1, d2) {
		return moment(d1).diff(d2, "days");
	},

	get_hour_diff: function(d1, d2) {
		return moment(d1).diff(d2, "hours");
	},

	get_day_diff: function(d1, d2) {
		return moment(d1).diff(d2, "days");
	},

	add_days: function(d, days) {
		return moment(d).add(days, "days").format();
	},

	add_months: function(d, months) {
		return moment(d).add(months, "months").format();
	},

	month_start: function() {
		return moment().startOf("month").format();
	},

	month_end: function() {
		return moment().endOf("month").format();
	},

	year_start: function(){
		return moment().startOf("year").format();
	},

	year_end: function(){
		return moment().endOf("year").format();
	},

	get_user_fmt: function() {
		return frappe.sys_defaults.date_format || "yyyy-mm-dd";
	},

	str_to_user: function(val, only_time = false) {
		if(!val) return "";

		if(only_time) {
			return moment(val, moment.defaultTimeFormat)
				.format(moment.defaultTimeFormat);
		}

		var user_fmt = frappe.datetime.get_user_fmt().toUpperCase();
		if(typeof val !== "string" || val.indexOf(" ")===-1) {
			return moment(val).format(user_fmt);
		} else {
			return moment(val, "YYYY-MM-DD HH:mm:ss").format(user_fmt + " HH:mm:ss");
		}
	},

	get_datetime_as_string: function(d) {
		return moment(d).format("YYYY-MM-DD HH:mm:ss");
	},

	user_to_str: function(val, only_time = false) {

		if(only_time) {
			return moment(val, moment.defaultTimeFormat)
				.format(moment.defaultTimeFormat);
		}

		var user_fmt = frappe.datetime.get_user_fmt().toUpperCase();
		var system_fmt = "YYYY-MM-DD";

		if(val.indexOf(" ")!==-1) {
			user_fmt += " HH:mm:ss";
			system_fmt += " HH:mm:ss";
		}

		// user_fmt.replace("YYYY", "YY")? user might only input 2 digits of the year, which should also be parsed
		return moment(val, [user_fmt.replace("YYYY", "YY"),
			user_fmt]).locale("en").format(system_fmt);
	},

	user_to_obj: function(d) {
		return frappe.datetime.str_to_obj(frappe.datetime.user_to_str(d));
	},

	global_date_format: function(d) {
		var m = moment(d);
		if(m._f && m._f.indexOf("HH")!== -1) {
			return m.format("Do MMMM YYYY, h:mma")
		} else {
			return m.format('Do MMMM YYYY');
		}
	},

	now_date: function(as_obj = false) {
		return frappe.datetime._date(moment.defaultDateFormat, as_obj);
	},

	now_time: function(as_obj = false) {
		return frappe.datetime._date(moment.defaultTimeFormat, as_obj);
	},

	now_datetime: function(as_obj = false) {
		return frappe.datetime._date(moment.defaultDatetimeFormat, as_obj);
	},

	_date: function(format, as_obj = false) {
		const { time_zone } = frappe.sys_defaults;
		let date;
		if (time_zone) {
			date = moment.tz(time_zone);
		} else {
			date = moment();
		}
		if (as_obj) {
			return frappe.datetime.moment_to_date_obj(date);
		} else {
			return date.format(format);
		}
	},

	moment_to_date_obj: function(moment) {
		const date_obj = new Date();
		const date_array = moment.toArray();
		date_obj.setFullYear(date_array[0]);
		date_obj.setMonth(date_array[1]);
		date_obj.setDate(date_array[2]);
		date_obj.setHours(date_array[3]);
		date_obj.setMinutes(date_array[4]);
		date_obj.setSeconds(date_array[5]);
		date_obj.setMilliseconds(date_array[6]);
		return date_obj;
	},

	nowdate: function() {
		return frappe.datetime.now_date();
	},

	get_today: function() {
		return frappe.datetime.now_date();
	},

	validate: function(d) {
		return moment(d, [
			moment.defaultDateFormat,
			moment.defaultDatetimeFormat,
			moment.defaultTimeFormat
		], true).isValid();
	},

});

// Proxy for dateutil and get_today
Object.defineProperties(window, {
	'dateutil': {
		get: function() {
			console.warn('Please use `frappe.datetime` instead of `dateutil`. It will be deprecated soon.');
			return frappe.datetime;
		}
	},
	'date': {
		get: function() {
			console.warn('Please use `frappe.datetime` instead of `date`. It will be deprecated soon.');
			return frappe.datetime;
		}
	},
	'get_today': {
		get: function() {
			console.warn('Please use `frappe.datetime.get_today` instead of `get_today`. It will be deprecated soon.');
			return frappe.datetime.get_today;
		}
	}
});

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/misc/number_format.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

if (!window.frappe) window.frappe = {};

function flt(v, decimals, number_format) {
	if (v == null || v == '') return 0;

	if (typeof v !== "number") {
		v = v + "";

		// strip currency symbol if exists
		if (v.indexOf(" ") != -1) {
			// using slice(1).join(" ") because space could also be a group separator
			var parts = v.split(" ");
			v = isNaN(parseFloat(parts[0])) ? parts.slice(parts.length - 1).join(" ") : v;
		}

		v = strip_number_groups(v, number_format);

		v = parseFloat(v);
		if (isNaN(v))
			v = 0;
	}

	if (decimals != null)
		return _round(v, decimals);
	return v;
}

function cint(v, def) {
	if (v === true)
		return 1;
	if (v === false)
		return 0;
	v = v + '';
	if (v !== "0") v = lstrip(v, ['0']);
	v = parseInt(v);
	if (isNaN(v)) v = def === undefined ? 0 : def;
	return v;
}

function strip_number_groups(v, number_format) {
	if (!number_format) number_format = get_number_format();
	var info = get_number_format_info(number_format);

	// strip groups (,)
	var group_regex = new RegExp(info.group_sep === "." ? "\\." : info.group_sep, "g");
	v = v.replace(group_regex, "");

	// replace decimal separator with (.)
	if (info.decimal_str !== "." && info.decimal_str !== "") {
		var decimal_regex = new RegExp(info.decimal_str, "g");
		v = v.replace(decimal_regex, ".");
	}

	return v;
}


frappe.number_format_info = {
	"#,###.##": { decimal_str: ".", group_sep: "," },
	"#.###,##": { decimal_str: ",", group_sep: "." },
	"# ###.##": { decimal_str: ".", group_sep: " " },
	"# ###,##": { decimal_str: ",", group_sep: " " },
	"#'###.##": { decimal_str: ".", group_sep: "'" },
	"#, ###.##": { decimal_str: ".", group_sep: ", " },
	"#,##,###.##": { decimal_str: ".", group_sep: "," },
	"#,###.###": { decimal_str: ".", group_sep: "," },
	"#.###": { decimal_str: "", group_sep: "." },
	"#,###": { decimal_str: "", group_sep: "," },
}

window.format_number = function (v, format, decimals) {
	if (!format) {
		format = get_number_format();
		if (decimals == null) decimals = cint(frappe.defaults.get_default("float_precision")) || 3;
	}

	var info = get_number_format_info(format);

	// Fix the decimal first, toFixed will auto fill trailing zero.
	if (decimals == null) decimals = info.precision;

	v = flt(v, decimals, format);

	if (v < 0) var is_negative = true;
	v = Math.abs(v);

	v = v.toFixed(decimals);

	var part = v.split('.');

	// get group position and parts
	var group_position = info.group_sep ? 3 : 0;

	if (group_position) {
		var integer = part[0];
		var str = '';
		var offset = integer.length % group_position;
		for (var i = integer.length; i >= 0; i--) {
			var l = replace_all(str, info.group_sep, "").length;
			if (format == "#,##,###.##" && str.indexOf(",") != -1) { // INR
				group_position = 2;
				l += 1;
			}

			str += integer.charAt(i);

			if (l && !((l + 1) % group_position) && i != 0) {
				str += info.group_sep;
			}
		}
		part[0] = str.split("").reverse().join("");
	}
	if (part[0] + "" == "") {
		part[0] = "0";
	}

	// join decimal
	part[1] = (part[1] && info.decimal_str) ? (info.decimal_str + part[1]) : "";

	// join
	return (is_negative ? "-" : "") + part[0] + part[1];
};

function format_currency(v, currency, decimals) {
	var format = get_number_format(currency);
	var symbol = get_currency_symbol(currency);
	if(decimals === undefined) {
		decimals = frappe.boot.sysdefaults.currency_precision || null;
	}

	if (symbol)
		return symbol + " " + format_number(v, format, decimals);
	else
		return format_number(v, format, decimals);
}

function get_currency_symbol(currency) {
	if (frappe.boot) {
		if (frappe.boot.sysdefaults.hide_currency_symbol == "Yes")
			return null;

		if (!currency)
			currency = frappe.boot.sysdefaults.currency;

		return frappe.model.get_value(":Currency", currency, "symbol") || currency;
	} else {
		// load in template
		return frappe.currency_symbols[currency];
	}
}

function get_number_format(currency) {
	return (frappe.boot && frappe.boot.sysdefaults && frappe.boot.sysdefaults.number_format) || "#,###.##";
}

function get_number_format_info(format) {
	var info = frappe.number_format_info[format];

	if (!info) {
		info = { decimal_str: ".", group_sep: "," };
	}

	// get the precision from the number format
	info.precision = format.split(info.decimal_str).slice(1)[0].length;

	return info;
}

function _round(num, precision) {
	var is_negative = num < 0 ? true : false;
	var d = cint(precision);
	var m = Math.pow(10, d);
	var n = +(d ? Math.abs(num) * m : Math.abs(num)).toFixed(8); // Avoid rounding errors
	var i = Math.floor(n), f = n - i;
	var r = ((!precision && f == 0.5) ? ((i % 2 == 0) ? i : i + 1) : Math.round(n));
	r = d ? r / m : r;
	return is_negative ? -r : r;

}

function roundNumber(num, precision) {
	// backward compatibility
	return _round(num, precision);
}

function precision(fieldname, doc) {
	if (cur_frm) {
		if (!doc) doc = cur_frm.doc;
		var df = frappe.meta.get_docfield(doc.doctype, fieldname, doc.parent || doc.name);
		if (!df) console.log(fieldname + ": could not find docfield in method precision()");
		return frappe.meta.get_field_precision(df, doc);
	} else {
		return frappe.boot.sysdefaults.float_precision
	}
}

function in_list(list, item) {
	if (!list) return false;
	for (var i = 0, j = list.length; i < j; i++)
		if (list[i] == item) return true;
	return false;
}

// Proxy for in_list
Object.defineProperty(window, 'inList', {
	get: function() {
		console.warn('Please use `in_list` instead of `inList`. It will be deprecated soon.');
		return in_list;
	}
});

function remainder(numerator, denominator, precision) {
	precision = cint(precision);
	var multiplier = Math.pow(10, precision);
	if (precision) {
		var _remainder = ((numerator * multiplier) % (denominator * multiplier)) / multiplier;
	} else {
		var _remainder = numerator % denominator;
	}

	return flt(_remainder, precision);
}

function round_based_on_smallest_currency_fraction(value, currency, precision) {
	var smallest_currency_fraction_value = flt(frappe.model.get_value(":Currency",
		currency, "smallest_currency_fraction_value"))

	if (smallest_currency_fraction_value) {
		var remainder_val = remainder(value, smallest_currency_fraction_value, precision);
		if (remainder_val > (smallest_currency_fraction_value / 2)) {
			value += (smallest_currency_fraction_value - remainder_val);
		} else {
			value -= remainder_val;
		}
	} else {
		value = Math.round(value);
	}
	return value;
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/misc/help.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.help");

frappe.help.youtube_id = {};

frappe.help.has_help = function(doctype) {
	return frappe.help.youtube_id[doctype];
}

frappe.help.show = function(doctype) {
	if(frappe.help.youtube_id[doctype]) {
		frappe.help.show_video(frappe.help.youtube_id[doctype]);
	}
}

frappe.help.show_video = function(youtube_id, title) {
	if($("body").width() > 768) {
		var size = [670, 377];
	} else {
		var size = [560, 315];
	}
	var dialog = frappe.msgprint('<iframe width="'+size[0]+'" height="'+size[1]+'" \
		src="https://www.youtube.com/embed/'+ youtube_id +'" \
		frameborder="0" allowfullscreen></iframe>' + (frappe.help_feedback_link || ""),
	title || __("Help"));

	dialog.$wrapper.addClass("video-modal");
}

$("body").on("click", "a.help-link", function() {
	var doctype = $(this).attr("data-doctype");
	doctype && frappe.help.show(doctype);
});

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/misc/help_links.js
 */
frappe.provide('frappe.help.help_links');

frappe.help.help_links['data-import-tool'] = [
	{ label: 'Importing and Exporting Data', url: 'https://frappe.github.io/erpnext/user/manual/en/setting-up/data/data-import-tool.html' },
]

frappe.help.help_links['modules/Setup'] = [
	{ label: 'Users and Permissions', url: 'http://frappe.github.io/erpnext/user/manual/en/setting-up/users-and-permissions/' },
	{ label: 'Settings', url: 'http://frappe.github.io/erpnext/user/manual/en/setting-up/settings/' },
	{ label: 'Data Management', url: 'http://frappe.github.io/erpnext/user/manual/en/setting-up/data/' },
	{ label: 'Email', url: 'http://frappe.github.io/erpnext/user/manual/en/setting-up/email/' },
	{ label: 'Printing', url: 'http://frappe.github.io/erpnext/user/manual/en/setting-up/print/' },
]

frappe.help.help_links['List/User'] = [
	{ label: 'Adding Users', url: 'https://frappe.github.io/erpnext/user/manual/en/setting-up/users-and-permissions/adding-users' },
	{ label: 'Rename User', url: 'https://frappe.github.io/erpnext/user/manual/en/setting-up/articles/rename-user' },
]

frappe.help.help_links['permission-manager'] = [
	{ label: 'Role Permissions Manager', url: 'https://frappe.github.io/erpnext/user/manual/en/setting-up/users-and-permissions/role-based-permissions' },
]

frappe.help.help_links['user-permissions'] = [
	{ label: 'User Permissions', url: 'https://frappe.github.io/erpnext/user/manual/en/setting-up/users-and-permissions/user-permissions' },
]

frappe.help.help_links['Form/System Settings'] = [
	{ label: 'System Settings', url: 'https://frappe.github.io/erpnext/user/manual/en/setting-up/settings/system-settings' },
]

frappe.help.help_links['modules_setup'] = [
	{ label: 'Show or Hide Desktop Icons', url: 'https://frappe.github.io/erpnext/user/manual/en/setting-up/settings/module-settings' },
]

frappe.help.help_links['List/Email Account'] = [
	{ label: 'Email Account', url: 'https://frappe.github.io/erpnext/user/manual/en/setting-up/email/email-account' },
]

frappe.help.help_links['List/Email Alert'] = [
	{ label: 'Email Alert', url: 'https://frappe.github.io/erpnext/user/manual/en/setting-up/email/email-alerts' },
]

frappe.help.help_links['Form/Print Settings'] = [
	{ label: 'Print Settings', url: 'https://frappe.github.io/erpnext/user/manual/en/setting-up/print/print-settings' },
]

frappe.help.help_links['print-format-builder'] = [
	{ label: 'Print Format Builder', url: 'https://frappe.github.io/erpnext/user/manual/en/setting-up/print/print-format-builder' },
]


/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/misc/address_and_contact.js
 */
frappe.provide('frappe.contacts')

$.extend(frappe.contacts, {
	clear_address_and_contact: function(frm) {
		$(frm.fields_dict['address_html'].wrapper).html("");
		frm.fields_dict['contact_html'] && $(frm.fields_dict['contact_html'].wrapper).html("");
	},

	render_address_and_contact: function(frm) {
		// render address
		if(frm.fields_dict['address_html'] && "addr_list" in frm.doc.__onload) {
			$(frm.fields_dict['address_html'].wrapper)
				.html(frappe.render_template("address_list",
					cur_frm.doc.__onload))
				.find(".btn-address").on("click", function() {
					frappe.new_doc("Address");
				});
		}

		// render contact
		if(frm.fields_dict['contact_html'] && "contact_list" in frm.doc.__onload) {
			$(frm.fields_dict['contact_html'].wrapper)
				.html(frappe.render_template("contact_list",
					cur_frm.doc.__onload))
				.find(".btn-contact").on("click", function() {
					frappe.new_doc("Contact");
				}
			);
		}
	}
})
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/misc/preview_email.js
 */
frappe.preview_email = function(template, args, header) {
	frappe.call({
		method: 'frappe.email.email_body.get_email_html',
		args: {
			subject: 'Test',
			template,
			args,
			header
		}
	}).then((r) => {
		var html = r.message;
		html = html.replace(/embed=/, 'src=');
		var d = frappe.msgprint(html);
		d.$wrapper.find('.modal-dialog').css('width', '70%');
	});
};

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/upload.html
 */
frappe.templates['upload'] = '<div class="file-upload">  <div class="input-upload">   <input class="input-upload-file hidden" type="file" {{ opts.allow_multiple ? "multiple" : "" }} name="filedata" />   <button class="btn btn-primary btn-sm btn-browse">{%= __("Browse") %}</button>  </div>  <div class="uploaded-filename hidden" style="width: 100%; margin-top: 12px;"></div>  <div class="web-link-wrapper" style="width: calc(100% - 80px);">   <span class="text-muted file-upload-or">{%= __("or") %}</span>   <div class="input-link" style="width: calc(100% - 30px);">    <div class="input-group">     <div class="input-group-addon">      <span class="hidden-xs">{%= __("Web Link") %}</span>      <i class="fa fa-link visible-xs"></i>     </div>     <input class="form-control" type="text" name="file_url"      placeholder="{%= (opts.sample_url || "e.g. http://example.com/somefile.png") %}"/>    </div>   </div>  </div>  <div class="private-file hidden">   <div class="checkbox">       <label>         <input type="checkbox" checked> {{ __("Private") }}       </label>     </div>  </div> </div> ';

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/upload.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

// parent, args, callback
frappe.upload = {
	make: function(opts) {
		if(!opts.args) opts.args = {};

		if(opts.allow_multiple === undefined) {
			opts.allow_multiple = 1
		}

		// whether to show public/private checkbox or not
		opts.show_private = !("is_private" in opts);

		// make private by default
		if (!("options" in opts) || ("options" in opts &&
			(opts.options && !opts.options.toLowerCase()=="public" && !opts.options.toLowerCase()=="image"))) {
			opts.is_private = 1;
		}

		var d = null;
		// create new dialog if no parent given
		if(!opts.parent) {
			d = new frappe.ui.Dialog({
				title: __('Upload Attachment'),
				primary_action_label: __('Attach'),
				primary_action: function() {}
			});
			opts.parent = d.body;
			opts.btn = d.get_primary_btn();
			d.show();
		}

		var $upload = $(frappe.render_template("upload", {opts:opts})).appendTo(opts.parent);
		var $file_input = $upload.find(".input-upload-file");
		var $uploaded_files_wrapper = $upload.find('.uploaded-filename');

		// bind pseudo browse button
		$upload.find(".btn-browse").on("click",
			function() { $file_input.click(); });

		$file_input.on("change", function() {
			if (this.files.length > 0 || opts.files) {
				var fileobjs = null;

				if (opts.files) {
					// files added programmatically
					fileobjs = opts.files;
					delete opts.files;
				} else {
					// files from input type file
					fileobjs = $upload.find(":file").get(0).files;
				}
				var file_array = $.makeArray(fileobjs);

				$upload.find(".web-link-wrapper").addClass("hidden");
				$upload.find(".btn-browse").removeClass("btn-primary").addClass("btn-default");
				$uploaded_files_wrapper.removeClass('hidden').empty();

				file_array = file_array.map(
					file => Object.assign(file, {is_private: opts.is_private ? 1 : 0})
				)
				$upload.data('attached_files', file_array);

				// List of files in a grid
				$uploaded_files_wrapper.append(`
					<div class="list-item list-item--head">
						<div class="list-item__content list-item__content--flex-2">
							${__('Filename')}
						</div>
						${opts.show_private
						? `<div class="list-item__content file-public-column">
							${__('Public')}
							</div>`
						: ''}
						<div class="list-item__content list-item__content--activity" style="flex: 0 0 32px">
						</div>
					</div>
				`);
				var file_pills = file_array.map(
					file => frappe.upload.make_file_row(file, opts)
				);
				$uploaded_files_wrapper.append(file_pills);
			} else {
				frappe.upload.show_empty_state($upload);
			}
		});

		if(opts.files && opts.files.length > 0) {
			$file_input.trigger('change');
		}

		// events
		$uploaded_files_wrapper.on('click', '.list-item-container', function (e) {
			var $item = $(this);
			var filename = $item.attr('data-filename');
			var attached_files = $upload.data('attached_files');
			var $target = $(e.target);

			if ($target.is(':checkbox')) {
				var is_private = !$target.is(':checked');

				attached_files = attached_files.map(file => {
					if (file.name === filename) {
						file.is_private = is_private ? 1 : 0;
					}
					return file;
				});
				$uploaded_files_wrapper
					.find(`.list-item-container[data-filename="${filename}"] .fa.fa-fw`)
					.toggleClass('fa-lock fa-unlock-alt');

				$upload.data('attached_files', attached_files);
			}
			else if ($target.is('.uploaded-file-remove, .fa-remove')) {
				// remove file from attached_files object
				attached_files = attached_files.filter(file => file.name !== filename);
				$upload.data('attached_files', attached_files);

				// remove row from dom
				$uploaded_files_wrapper
					.find(`.list-item-container[data-filename="${filename}"]`)
					.remove();

				if(attached_files.length === 0) {
					frappe.upload.show_empty_state($upload);
				}
			}
		});


		if(!opts.btn) {
			opts.btn = $('<button class="btn btn-default btn-sm attach-btn">' + __("Attach")
				+ '</div>').appendTo($upload);
		} else {
			$(opts.btn).unbind("click");
		}

		// Primary button handler
		opts.btn.click(function() {
			// close created dialog
			d && d.hide();

			// convert functions to values
			if(opts.get_params) {
				opts.args.params = opts.get_params();
			}

			// Get file url if input is visible
			var file_url = $upload.find('[name="file_url"]:visible');
			file_url = file_url.length && file_url.get(0).value;
			if(opts.args.gs_template) {
				frappe.integration_service.gsuite.create_gsuite_file(opts.args,opts);
			} else if(file_url) {
				opts.args.file_url = file_url;
				frappe.upload.upload_file(null, opts.args, opts);
			} else {
				var files = $upload.data('attached_files');
				frappe.upload.upload_multiple_files(files, opts.args, opts);
			}
		});
	},
	make_file_row: function(file, { show_private } = {}) {
		var template = `
			<div class="list-item-container" data-filename="${file.name}">
				<div class="list-item">
					<div class="list-item__content list-item__content--flex-2 ellipsis">
						<span>${file.name}</span>
						<span style="margin-top: 1px; margin-left: 5px;"
							class="fa fa-fw text-warning ${file.is_private ? 'fa-lock': 'fa-unlock-alt'}">
						</span>
					</div>
					${show_private?
						`<div class="list-item__content file-public-column ellipsis">
							<input type="checkbox" ${!file.is_private ? 'checked' : ''}/></div>`
					: ''}
					<div class="list-item__content list-item__content--activity ellipsis" style="flex: 0 0 32px;">
					<button class="btn btn-default btn-xs text-muted uploaded-file-remove">
							<span class="fa fa-remove"></span>
						</button>
					</div>
				</div>
			</div>`;

		return $(template);
	},
	show_empty_state: function($upload) {
		$upload.find(".uploaded-filename").addClass("hidden");
		$upload.find(".web-link-wrapper").removeClass("hidden");
		$upload.find(".private-file").addClass("hidden");
		$upload.find(".btn-browse").removeClass("btn-default").addClass("btn-primary");
	},
	upload_multiple_files: function(files /*FileData array*/, args, opts) {
		var i = -1;
		frappe.upload.total_files = files ? files.length : 0;
		// upload the first file
		upload_next();
		// subsequent files will be uploaded after
		// upload_complete event is fired for the previous file
		$(document).on('upload_complete', on_upload);

		function upload_next() {
			if(files) {
				i += 1;
				var file = files[i];
				args.is_private = file.is_private;
				if(!opts.progress) {
					frappe.show_progress(__('Uploading'), i, files.length);
				}
			}
			frappe.upload.upload_file(file, args, opts);
		}

		function on_upload(e, attachment) {
			if (!files || i === files.length - 1) {
				$(document).off('upload_complete', on_upload);
				frappe.hide_progress();
				return;
			}
			upload_next();
		}
	},
	upload_file: function(fileobj, args, opts) {
		if(!fileobj && !args.file_url) {
			if(opts.on_no_attach) {
				opts.on_no_attach();
			} else {
				frappe.msgprint(__("Please attach a file or set a URL"));
			}
			return;
		}

		if(fileobj) {
			frappe.upload.read_file(fileobj, args, opts);
		} else {
			// with file_url
			frappe.upload._upload_file(fileobj, args, opts);
		}
	},

	_upload_file: function(fileobj, args, opts, dataurl) {
		if (args.file_size) {
			frappe.upload.validate_max_file_size(args.file_size);
		}
		if(opts.on_attach) {
			opts.on_attach(args, dataurl)
		} else {
			if (opts.confirm_is_private) {
				frappe.prompt({
					label: __("Private"),
					fieldname: "is_private",
					fieldtype: "Check",
					"default": 1
				}, function(values) {
					args["is_private"] = values.is_private;
					frappe.upload.upload_to_server(fileobj, args, opts);
				}, __("Private or Public?"));
			} else {
				if (!("is_private" in args) && "is_private" in opts) {
					args["is_private"] = opts.is_private;
				}

				frappe.upload.upload_to_server(fileobj, args, opts);
			}

		}
	},

	read_file: function(fileobj, args, opts) {
		args.filename = fileobj.name.split(' ').join('_');
		args.file_url = null;

		if(opts.options && opts.options.toLowerCase()=="image") {
			if(!frappe.utils.is_image_file(args.filename)) {
				frappe.msgprint(__("Only image extensions (.gif, .jpg, .jpeg, .tiff, .png, .svg) allowed"));
				return;
			}
		}

		let start_complete = frappe.cur_progress ? frappe.cur_progress.percent : 0;

		var upload_with_filedata = function() {
			let freader = new FileReader();
			freader.onload = function() {
				var dataurl = freader.result;
				args.filedata = freader.result.split(",")[1];
				args.file_size = fileobj.size;
				frappe.upload._upload_file(fileobj, args, opts, dataurl);
			};
			freader.readAsDataURL(fileobj);
		}

		const file_not_big_enough = fileobj.size <= 24576;

		if (opts.no_socketio || frappe.flags.no_socketio || file_not_big_enough) {
			upload_with_filedata();
			return;
		} else {
			args.file_size = fileobj.size;
			frappe.call({
				method: 'frappe.utils.file_manager.validate_filename',
				args: {"filename": args.filename},
				callback: function(r) {
					args.filename = r.message;
					upload_through_socketio();
				}
			});
		}

		var upload_through_socketio = function() {
			frappe.socketio.uploader.start({
				file: fileobj,
				filename: args.filename,
				is_private: args.is_private,
				fallback: () => {
					// if fails, use old filereader
					upload_with_filedata();
				},
				callback: (data) => {
					args.file_url = data.file_url;
					frappe.upload._upload_file(fileobj, args, opts);
				},
				on_progress: (percent_complete) => {
					let increment = (flt(percent_complete) / frappe.upload.total_files);
					frappe.show_progress(__('Uploading'),
						start_complete + increment);
				}
			});
		}
	},

	upload_to_server: function(file, args, opts) {
		if(opts.start) {
			opts.start();
		}

		var ajax_args = {
			"method": "uploadfile",
			args: args,
			callback: function(r) {
				if(!r._server_messages) {
					// msgbox.hide();
				}
				if(r.exc) {
					// if no onerror, assume callback will handle errors
					opts.onerror ? opts.onerror(r) : opts.callback(null, r);
					frappe.hide_progress();
					return;
				}
				var attachment = r.message;
				opts.loopcallback && opts.loopcallback();
				opts.callback && opts.callback(attachment, r);
				$(document).trigger("upload_complete", attachment);
			},
			error: function(r) {
				// if no onerror, assume callback will handle errors
				opts.onerror ? opts.onerror(r) : opts.callback(null, null, r);
				frappe.hide_progress();
				return;
			}
		}

		// copy handlers etc from opts
		$.each(['queued', 'running', "progress", "always", "btn"], function(i, key) {
			if(opts[key]) ajax_args[key] = opts[key];
		});
		return frappe.call(ajax_args);
	},

	get_string: function(dataURI) {
		// remove filename
		var parts = dataURI.split(',');
		if(parts[0].indexOf(":")===-1) {
			var a = parts[2];
		} else {
			var a = parts[1];
		}

		return decodeURIComponent(escape(atob(a)));

	},

	validate_max_file_size: function(file_size) {
		var max_file_size = frappe.boot.max_file_size || 5242880;

		if (file_size > max_file_size) {
			// validate max file size
			frappe.throw(__("File size exceeded the maximum allowed size of {0} MB", [max_file_size / 1048576]));
		}
	},
	multifile_upload:function(fileobjs, args, opts) {
		//loop through filenames and checkboxes then append to list
		var fields = [];
		for (var i =0,j = fileobjs.length;i<j;i++) {
			var filename = fileobjs[i].name;
			fields.push({'fieldname': 'label1', 'fieldtype': 'Heading', 'label': filename});
			fields.push({'fieldname':  filename+'_is_private', 'fieldtype': 'Check', 'label': 'Private', 'default': 1});
		}

		var d = new frappe.ui.Dialog({
			'title': __('Make file(s) private or public?'),
			'fields': fields,
			primary_action: function(){
				var i =0,j = fileobjs.length;
				d.hide();
				opts.loopcallback = function (){
					if (i < j) {
						args.is_private = d.fields_dict[fileobjs[i].name + "_is_private"].get_value();
						frappe.upload.upload_file(fileobjs[i], args, opts);
						i++;
					}
				};

				opts.loopcallback();
			}
		});
		d.show();
		opts.confirm_is_private =  0;
	},
	create_gsuite_file: function(args, opts) {
		return frappe.call({
			type:'POST',
			method: 'frappe.integrations.doctype.gsuite_templates.gsuite_templates.create_gsuite_doc',
			args: args,
			callback: function(r) {
				var attachment = r.message;
				opts.callback && opts.callback(attachment, r);
			}
		});
	}
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/integrations/gsuite.js
 */
frappe.provide("frappe.integration_service");

frappe.integration_service.gsuite = {
	create_gsuite_file: function(args, opts) {
		return frappe.call({
			type:'POST',
			method: 'frappe.integrations.doctype.gsuite_templates.gsuite_templates.create_gsuite_doc',
			args: args,
			callback: function(r) {
				var attachment = r.message;
				opts.callback && opts.callback(attachment, r);
			}
		});
	}
};

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/tree.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

// for license information please see license.txt

// constructor: parent, label, method, args
frappe.ui.Tree = Class.extend({
	init: function(args) {
		$.extend(this, args);
		this.nodes = {};
		this.wrapper = $('<div class="tree">').appendTo(this.parent);
		this.rootnode = new frappe.ui.TreeNode({
			tree: this,
			parent: this.wrapper,
			label: this.label,
			parent_label: null,
			expandable: true,
			is_root: true,
			data: {
				value: this.label,
				parent: this.label,
				expandable: true
			}
		});
		this.rootnode.toggle();
	},
	refresh: function() {
		this.selected_node.reload_parent();
	},
	get_selected_node: function() {
		return this.selected_node;
	},
	toggle: function() {
		this.get_selected_node().toggle();
	}
});

frappe.ui.TreeNode = Class.extend({
	init: function(args) {
		$.extend(this, args);
		this.loaded = false;
		this.expanded = false;
		this.tree.nodes[this.label] = this;
		if(this.parent_label)
			this.parent_node = this.tree.nodes[this.parent_label];

		this.make();
		this.setup_drag_drop();

		if(this.tree.onrender) {
			this.tree.onrender(this);
		}
	},
	make: function() {
		var me = this;
		this.tree_link = $('<span class="tree-link">')
			.click(function(event) {
				me.tree.selected_node = me;
				me.tree.wrapper.find(".tree-link.active").removeClass("active");
				me.tree_link.addClass("active");
				if(me.tree.toolbar) {
					me.show_toolbar();
				}
				if(me.tree.click) {
					me.tree.click(this);
				}
				if(me.tree.onclick) {
					me.tree.onclick(me);
				}
			})
			.data('label', this.label)
			.data('node', this)
			.appendTo(this.parent);

		this.$ul = $('<ul class="tree-children">')
			.toggle(false).appendTo(this.parent);

		this.make_icon();

	},
	make_icon: function() {
		// label with icon
		var me= this;
		var icon_html = '<i class="octicon octicon-primitive-dot text-extra-muted"></i>';
		if(this.expandable) {
			icon_html = '<i class="fa fa-fw fa-folder text-muted" style="font-size: 14px;"></i>';
		}
		$(icon_html + ' <a class="tree-label grey h6">' + this.get_label() + "</a>").
			appendTo(this.tree_link);

		this.tree_link.find('i').click(function() {
			setTimeout(function() { me.toolbar.find(".btn-expand").click(); }, 100);
		});

		this.tree_link.find('a').click(function() {
			if(!me.expanded) setTimeout(function() { me.toolbar.find(".btn-expand").click(); }, 100);
		});
	},
	get_label: function() {
		if(this.tree.get_label) {
			return this.tree.get_label(this);
		}
		if (this.title && this.title != this.label) {
			return __(this.title) + ` <span class='text-muted'>(${this.label})</span>`;
		} else {
			return __(this.title || this.label);
		}
	},
	toggle: function(callback) {
		if(this.expandable && this.tree.method && !this.loaded) {
			this.load(callback)
		} else {
			this.toggle_node(callback);
		}
	},
	show_toolbar: function() {
		if(this.tree.cur_toolbar)
			$(this.tree.cur_toolbar).toggle(false);

		if(!this.toolbar)
			this.make_toolbar();

		this.tree.cur_toolbar = this.toolbar;
		this.toolbar.toggle(true);
	},
	make_toolbar: function() {
		var me = this;
		this.toolbar = $('<span class="tree-node-toolbar btn-group"></span>').insertAfter(this.tree_link);

		$.each(this.tree.toolbar, function(i, item) {
			if(item.toggle_btn) {
				item = {
					condition: function() { return me.expandable; },
					get_label: function() { return me.expanded ? __("Collapse") : __("Expand") },
					click:function(node, btn) {
						node.toggle(function() {
							$(btn).html(node.expanded ? __("Collapse") : __("Expand"));
						});
					},
					btnClass: "btn-expand hidden-xs"
				}
			}
			if(item.condition) {
				if(!item.condition(me)) return;
			}
			var label = item.get_label ? item.get_label() : item.label;
			var link = $("<button class='btn btn-default btn-xs'></button>")
				.html(label)
				.appendTo(me.toolbar)
				.click(function() { item.click(me, this); return false; });

			if(item.btnClass) link.addClass(item.btnClass);
		})

	},
	setup_drag_drop: function() {
		// experimental
		var me = this;
		if(this.tree.drop && this.parent_label) {
			this.$ul.droppable({
				hoverClass: "tree-hover",
				greedy: true,
				drop: function(event, ui) {
					event.preventDefault();
					var dragged_node = $(ui.draggable).find(".tree-link:first").data("node");
					var dropped_node = $(this).parent().find(".tree-link:first").data("node");
					me.tree.drop(dragged_node, dropped_node, $(ui.draggable), $(this));
					return false;
				}
			});
		}

	},
	addnode: function(data) {
		var $li = $('<li class="tree-node">');
		if(this.tree.drop) $li.draggable({revert:true});

		return new frappe.ui.TreeNode({
			tree: this.tree,
			parent: $li.appendTo(this.$ul),
			parent_label: this.label,
			label: data.value,
			title: data.title,
			expandable: data.expandable,
			data: data
		});
	},
	toggle_node: function(callback) {
		// expand children
		if(this.$ul) {
			if(this.$ul.children().length) {
				this.$ul.toggle(!this.expanded);
			}

			// open close icon
			this.tree_link.find('i').removeClass();
			if(!this.expanded) {
				this.tree_link.find('i').addClass('fa fa-fw fa-folder-open text-muted');
			} else {
				this.tree_link.find('i').addClass('fa fa-fw fa-folder text-muted');
			}
		}

		// select this link
		this.tree.wrapper.find('.selected')
			.removeClass('selected');
		this.tree_link.toggleClass('selected');
		this.expanded = !this.expanded;

		this.expanded ?
			this.parent.addClass('opened') :
			this.parent.removeClass('opened');
		if(callback) callback();
	},
	reload: function() {
		this.load();
	},
	reload_parent: function() {
		this.parent_node && this.parent_node.load_all();
	},
	load_all: function(callback) {
		var  me = this;
		let args = $.extend({}, this.tree.args);

		args.parent = this.data.value;
		args.tree_method = this.tree.method;
		args.is_root = this.is_root;

		return frappe.call({
			method: 'frappe.desk.treeview.get_all_nodes',
			args: args,
			callback: function(r) {
				$.each(r.message, function(i, d) {
					me.render_expand_node(me.tree.nodes[d.parent], d.data);
				});
				if(callback) { callback(); }
			}
		});
	},
	load: function(callback) {
		var node = this;
		var args = $.extend(this.tree.args || {}, {
			parent: this.data.value
		});

		args.is_root = this.is_root;

		return frappe.call({
			method: this.tree.method,
			args: args,
			callback: function(r) {
				node.render_expand_node(node, r.message, callback);
			}
		})
	},
	render_expand_node: function(node, data, callback) {
		node.$ul.empty();
		if (data) {
			$.each(data, function(i, v) {
				var child_node = node.addnode(v);
				child_node.tree_link
					.data('node-data', v)
					.data('node', child_node);
			});
		}

		node.expanded = false;
		node.toggle_node(callback);
		node.loaded = true;
	},
})

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/views/container.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

// page container
frappe.provide('frappe.pages');
frappe.provide('frappe.views');

var cur_page = null;
frappe.views.Container = Class.extend({
	_intro: "Container contains pages inside `#container` and manages \
			page creation, switching",
	init: function() {
		this.container = $('#body_div').get(0);
		this.page = null; // current page
		this.pagewidth = $(this.container).width();
		this.pagemargin = 50;

		var me = this;

		$(document).on("page-change", function() {
			// set data-route in body
			var route_str = frappe.get_route_str();
			$("body").attr("data-route", route_str);
			$("body").attr("data-sidebar", me.has_sidebar() ? 1 : 0);
		});

		$(document).bind('rename', function(event, dt, old_name, new_name) {
			frappe.breadcrumbs.rename(dt, old_name, new_name);
		});
	},
	add_page: function(label) {
		var page = $('<div class="content page-container"></div>')
			.attr('id', "page-" + label)
			.attr("data-page-route", label)
			.hide()
			.appendTo(this.container).get(0);
		page.label = label;
		frappe.pages[label] = page;

		return page;
	},
	change_to: function(label) {
		cur_page = this;
		if(this.page && this.page.label === label) {
			$(this.page).trigger('show');
			return;
		}

		var me = this;
		if(label.tagName) {
			// if sent the div, get the table
			var page = label;
		} else {
			var page = frappe.pages[label];
		}
		if(!page) {
			console.log(__('Page not found')+ ': ' + label);
			return;
		}

		// hide dialog
		if(cur_dialog && cur_dialog.display && !cur_dialog.keep_open) {
			cur_dialog.hide();
		}

		// hide current
		if(this.page && this.page != page) {
			$(this.page).hide();
			$(this.page).trigger('hide');
		}

		// show new
		if(!this.page || this.page != page) {
			this.page = page;
			// $(this.page).fadeIn(300);
			$(this.page).show();
		}

		$(document).trigger("page-change");

		this.page._route = window.location.hash;
		$(this.page).trigger('show');
		frappe.utils.scroll_to(0);
		frappe.breadcrumbs.update();

		return this.page;
	},
	has_sidebar: function() {
		var flag = 0;
		var route_str = frappe.get_route_str();
		// check in frappe.ui.pages
		flag = frappe.ui.pages[route_str] && !frappe.ui.pages[route_str].single_column;

		// sometimes frappe.ui.pages is updated later,
		// so check the dom directly
		if(!flag) {
			var page_route = route_str.split('/').slice(0, 2).join('/');
			flag = $(`.page-container[data-page-route="${page_route}"] .layout-side-section`).length ? 1 : 0;
		}

		return flag;
	},
});



/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/views/breadcrumbs.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.breadcrumbs = {
	all: {},

	preferred: {
		"File": ""
	},

	set_doctype_module: function(doctype, module) {
		localStorage["preferred_breadcrumbs:" + doctype] = module;
	},

	get_doctype_module: function(doctype) {
		return localStorage["preferred_breadcrumbs:" + doctype];
	},

	add: function(module, doctype, type) {
		frappe.breadcrumbs.all[frappe.breadcrumbs.current_page()] = {module:module, doctype:doctype, type:type};
		frappe.breadcrumbs.update();
	},

	current_page: function() {
		var route = frappe.get_route();
		// for List/DocType/{?} return List/DocType
		if (route[0] === 'List') {
			route = route.slice(0, 2);
		}
		return route.join("/");
	},

	update: function() {
		var breadcrumbs = frappe.breadcrumbs.all[frappe.breadcrumbs.current_page()];

		if(!frappe.visible_modules) {
			frappe.visible_modules = $.map(frappe.get_desktop_icons(true), (m) => { return m.module_name; });
		}

		var $breadcrumbs = $("#navbar-breadcrumbs").empty();
		if(!breadcrumbs) {
			$("body").addClass("no-breadcrumbs");
			return;
		}

		// get preferred module for breadcrumbs, based on sent via module
		var from_module = frappe.breadcrumbs.get_doctype_module(breadcrumbs.doctype);

		if(from_module) {
			breadcrumbs.module = from_module;
		} else if(frappe.breadcrumbs.preferred[breadcrumbs.doctype]!==undefined) {
			// get preferred module for breadcrumbs
			breadcrumbs.module = frappe.breadcrumbs.preferred[breadcrumbs.doctype];
		}

		if(breadcrumbs.module) {
			if(in_list(["Core", "Email", "Custom", "Workflow", "Print"], breadcrumbs.module)) {
				breadcrumbs.module = "Setup";
			}

			if(frappe.get_module(breadcrumbs.module)) {
				// if module access exists
				var module_info = frappe.get_module(breadcrumbs.module),
					icon = module_info && module_info.icon,
					label = module_info ? module_info.label : breadcrumbs.module;


				if(module_info && !module_info.blocked && frappe.visible_modules.includes(module_info.module_name)) {
					$(repl('<li><a href="#modules/%(module)s">%(label)s</a></li>',
						{ module: breadcrumbs.module, label: __(label) }))
						.appendTo($breadcrumbs);
				}
			}
		}
		if(breadcrumbs.doctype && frappe.get_route()[0]==="Form") {
			if(breadcrumbs.doctype==="User"
				&& frappe.user.is_module("Setup")===-1
				|| frappe.get_doc('DocType', breadcrumbs.doctype).issingle) {
				// no user listview for non-system managers and single doctypes
			} else {
				var route;
				if(frappe.boot.treeviews.indexOf(breadcrumbs.doctype) !== -1) {
					var view = frappe.model.user_settings[breadcrumbs.doctype].last_view || 'Tree';
					route = view + '/' + breadcrumbs.doctype;
				} else {
					route = 'List/' + breadcrumbs.doctype;
				}
				$(repl('<li><a href="#%(route)s">%(label)s</a></li>',
					{route: route, label: __(breadcrumbs.doctype)}))
					.appendTo($breadcrumbs);
			}
		}

		$("body").removeClass("no-breadcrumbs");
	},

	rename: function(doctype, old_name, new_name) {
		var old_route_str = ["Form", doctype, old_name].join("/");
		var new_route_str = ["Form", doctype, new_name].join("/");
		frappe.breadcrumbs.all[new_route_str] = frappe.breadcrumbs.all[old_route_str];
		delete frappe.breadcrumbs.all[old_route_str];
	}

}


/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/views/factory.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.pages');
frappe.provide('frappe.views');

frappe.views.Factory = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
	},
	show: function() {
		var page_name = frappe.get_route_str(),
			me = this;
		if(page_name.substr(0, 4) === 'List') {
			page_name = frappe.get_route().slice(0, 2).join('/');
		}

		if(frappe.pages[page_name] && !page_name.includes("Form/")) {
			frappe.container.change_to(frappe.pages[page_name]);
			if(me.on_show) {
				me.on_show();
			}
		} else {
			var route = frappe.get_route();
			if(route[1]) {
				me.make(route);
			} else {
				frappe.show_not_found(route);
			}
		}
	},
	make_page: function(double_column, page_name) {
		return frappe.make_page(double_column, page_name);
	}
});

frappe.make_page = function(double_column, page_name) {
	if(!page_name) {
		var page_name = frappe.get_route_str();
	}
	var page = frappe.container.add_page(page_name);

	frappe.ui.make_app_page({
		parent: page,
		single_column: !double_column
	});
	frappe.container.change_to(page_name);
	return page;
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/views/pageview.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide('frappe.views.pageview');
frappe.provide("frappe.standard_pages");

frappe.views.pageview = {
	with_page: function(name, callback) {
		if(in_list(Object.keys(frappe.standard_pages), name)) {
			if(!frappe.pages[name]) {
				frappe.standard_pages[name]();
			}
			callback();
			return;
		}

		if((locals.Page && locals.Page[name]) || name==window.page_name) {
			// already loaded
			callback();
		} else if(localStorage["_page:" + name] && frappe.boot.developer_mode!=1) {
			// cached in local storage
			frappe.model.sync(JSON.parse(localStorage["_page:" + name]));
			callback();
		} else {
			// get fresh
			return frappe.call({
				method: 'frappe.desk.desk_page.getpage',
				args: {'name':name },
				callback: function(r) {
					if(!r.docs._dynamic_page) {
						localStorage["_page:" + name] = JSON.stringify(r.docs);
					}
					callback();
				},
				freeze: true,
			});
		}
	},
	show: function(name) {
		if(!name) {
			name = (frappe.boot ? frappe.boot.home_page : window.page_name);
		}
		frappe.model.with_doctype("Page", function() {
			frappe.views.pageview.with_page(name, function(r) {
				if(r && r.exc) {
					if(!r['403'])
						frappe.show_not_found(name);
				} else if(!frappe.pages[name]) {
					new frappe.views.Page(name);
				}
				frappe.container.change_to(name);
			});
		});
	}
}

frappe.views.Page = Class.extend({
	init: function(name, wrapper) {
		this.name = name;
		var me = this;
		// web home page
		if(name==window.page_name) {
			this.wrapper = document.getElementById('page-' + name);
			this.wrapper.label = document.title || window.page_name;
			this.wrapper.page_name = window.page_name;
			frappe.pages[window.page_name] = this.wrapper;
		} else {
			this.pagedoc = locals.Page[this.name];
			if(!this.pagedoc) {
				frappe.show_not_found(name);
				return;
			}
			this.wrapper = frappe.container.add_page(this.name);
			this.wrapper.label = this.pagedoc.title || this.pagedoc.name;
			this.wrapper.page_name = this.pagedoc.name;

			// set content, script and style
			if(this.pagedoc.content)
				this.wrapper.innerHTML = this.pagedoc.content;
			frappe.dom.eval(this.pagedoc.__script || this.pagedoc.script || '');
			frappe.dom.set_style(this.pagedoc.style || '');
		}

		this.trigger_page_event('on_page_load');

		// set events
		$(this.wrapper).on('show', function() {
			cur_frm = null;
			me.trigger_page_event('on_page_show');
			me.trigger_page_event('refresh');
		});
	},
	trigger_page_event: function(eventname) {
		var me = this;
		if(me.wrapper[eventname]) {
			me.wrapper[eventname](me.wrapper);
		}
	}
})

frappe.show_not_found = function(page_name) {
	frappe.show_message_page({
		page_name: page_name,
		message: __("Sorry! I could not find what you were looking for."),
		img: "/assets/frappe/images/ui/bubble-tea-sorry.svg"
	});
}

frappe.show_not_permitted = function(page_name) {
	frappe.show_message_page({
		page_name: page_name,
		message: __("Sorry! You are not permitted to view this page."),
		img: "/assets/frappe/images/ui/bubble-tea-sorry.svg",
		// icon: "octicon octicon-circle-slash"
	});
}

frappe.show_message_page = function(opts) {
	// opts can include `page_name`, `message`, `icon` or `img`
	if(!opts.page_name) {
		opts.page_name = frappe.get_route_str();
	}

	if(opts.icon) {
		opts.img = repl('<span class="%(icon)s message-page-icon"></span> ', opts);
	} else if (opts.img) {
		opts.img = repl('<img src="%(img)s" class="message-page-image">', opts);
	}

	var page = frappe.pages[opts.page_name] || frappe.container.add_page(opts.page_name);
	$(page).html(
		repl('<div class="page message-page">\
			<div class="text-center message-page-content">\
				%(img)s\
				<p class="lead">%(message)s</p>\
				<a class="btn btn-default btn-sm btn-home" href="#">%(home)s</a>\
			</div>\
		</div>', {
			img: opts.img || "",
			message: opts.message || "",
			home: __("Home")
		})
	);

	frappe.container.change_to(opts.page_name);
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/toolbar/awesome_bar.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt
frappe.provide('frappe.search');

frappe.search.AwesomeBar = Class.extend({
	setup: function(element) {
		var me = this;

		var $input = $(element);
		var input = $input.get(0);

		this.options = [];
		this.global_results = [];

		var awesomplete = new Awesomplete(input, {
			minChars: 0,
			maxItems: 99,
			autoFirst: true,
			list: [],
			filter: function (text, term) {
				return true;
			},
			data: function (item, input) {
				return {
					label: (item.index || ""),
					value: item.value
				};
			},
			item: function(item, term) {
				var d = this.get_item(item.value);
				var name = __(d.label || d.value);
				var html = '<span>' + name + '</span>';
				if(d.description && d.value!==d.description) {
					html += '<br><span class="text-muted ellipsis">' + __(d.description) + '</span>';
				}
				return $('<li></li>')
					.data('item.autocomplete', d)
					.html('<a style="font-weight:normal"><p>' + html + '</p></a>')
					.get(0);
			},
			sort: function(a, b) {
				return (b.label - a.label);
			}
		});

		// Added to aid UI testing of global search
		input.awesomplete = awesomplete;

		$input.on("input", function(e) {
			var value = e.target.value;
			var txt = value.trim().replace(/\s\s+/g, ' ');
			var last_space = txt.lastIndexOf(' ');
			me.global_results = [];
			// if(txt && txt.length > 1) {
			// 	me.global.get_awesome_bar_options(txt.toLowerCase(), me);
			// }

			var $this = $(this);
			clearTimeout($this.data('timeout'));

			$this.data('timeout', setTimeout(function(){
				me.options = [];
				if(txt && txt.length > 1) {
					if(last_space !== -1) {
						me.set_specifics(txt.slice(0,last_space), txt.slice(last_space+1));
					}
					me.add_defaults(txt);
					me.options = me.options.concat(me.build_options(txt));
					me.options = me.options.concat(me.global_results);
				} else {
					me.options = me.options.concat(
						me.deduplicate(frappe.search.utils.get_recent_pages(txt || "")));
				}
				me.add_help();

				awesomplete.list = me.deduplicate(me.options);
			}, 100));

		});

		var open_recent = function() {
			if (!this.autocomplete_open) {
				$(this).trigger("input");
			}
		}
		$input.on("focus", open_recent);

		$input.on("awesomplete-open", function(e) {
			me.autocomplete_open = e.target;
		});

		$input.on("awesomplete-close", function(e) {
			me.autocomplete_open = false;
		});

		$input.on("awesomplete-select", function(e) {
			var o = e.originalEvent;
			var value = o.text.value;
			var item = awesomplete.get_item(value);

			if(item.route_options) {
				frappe.route_options = item.route_options;
			}

			if(item.onclick) {
				item.onclick(item.match);
			} else {
				var previous_hash = window.location.hash;
				frappe.set_route(item.route);

				// hashchange didn't fire!
				if (window.location.hash == previous_hash) {
					frappe.route();
				}
			}
			$input.val("");
		});

		$input.on("awesomplete-selectcomplete", function(e) {
			$input.val("");
		});
		frappe.search.utils.setup_recent();
	},

	add_help: function() {
		this.options.push({
			value: __("Help on Search"),
			index: -10,
			default: "Help",
			onclick: function() {
				var txt = '<table class="table table-bordered">\
					<tr><td style="width: 50%">'+__("Make a new record")+'</td><td>'+
						__("new type of document")+'</td></tr>\
					<tr><td>'+__("List a document type")+'</td><td>'+
						__("document type..., e.g. customer")+'</td></tr>\
					<tr><td>'+__("Search in a document type")+'</td><td>'+
						__("text in document type")+'</td></tr>\
					<tr><td>'+__("Open a module or tool")+'</td><td>'+
						__("module name...")+'</td></tr>\
					<tr><td>'+__("Calculate")+'</td><td>'+
						__("e.g. (55 + 434) / 4 or =Math.sin(Math.PI/2)...")+'</td></tr>\
				</table>'
				frappe.msgprint(txt, __("Search Help"));
			}
		});
	},

	set_specifics: function(txt, end_txt) {
		var me = this;
		var results = this.build_options(txt);
		results.forEach(function(r) {
			if(r.type && (r.type).toLowerCase().indexOf(end_txt.toLowerCase()) === 0) {
				me.options.push(r);
			}
		});
	},

	add_defaults: function(txt) {
		this.make_global_search(txt);
		this.make_search_in_current(txt);
		this.make_calculator(txt);
	},

	build_options: function(txt) {
		var options = frappe.search.utils.get_creatables(txt).concat(
			frappe.search.utils.get_search_in_list(txt),
			frappe.search.utils.get_doctypes(txt),
			frappe.search.utils.get_reports(txt),
			frappe.search.utils.get_pages(txt),
			frappe.search.utils.get_modules(txt),
			frappe.search.utils.get_recent_pages(txt || "")
		);
		var out = this.deduplicate(options);
		return out.sort(function(a, b) {
			return b.index - a.index;
		});
	},

	deduplicate: function(options) {
		var out = [], routes = [];
		options.forEach(function(option) {
			if(option.route) {
				if(option.route[0] === "List" && option.route[2]) {
					option.route.splice(2);
				}
				var str_route = (typeof option.route==='string') ?
						option.route : option.route.join('/');
				if(routes.indexOf(str_route)===-1) {
					out.push(option);
					routes.push(str_route);
				} else {
					var old = routes.indexOf(str_route);
					if(out[old].index < option.index) {
						out[old] = option;
					}
				}
			} else {
				out.push(option);
				routes.push("");
			}
		});
		return out;
	},

	set_global_results: function(global_results, txt){
		this.global_results = this.global_results.concat(global_results);
	},

	make_global_search: function(txt) {
		var me = this;
		this.options.push({
			label: __("Search for '{0}'", [txt.bold()]),
			value: __("Search for '{0}'", [txt]),
			match: txt,
			index: 100,
			default: "Search",
			onclick: function() {
				frappe.searchdialog.search.init_search(txt, "global_search");
			}
		});
	},

	make_search_in_current: function(txt) {
		var route = frappe.get_route();
		if(route[0]==="List" && txt.indexOf(" in") === -1) {
			// search in title field
			var meta = frappe.get_meta(frappe.container.page.list_view.doctype);
			var search_field = meta.title_field || "name";
			var options = {};
			options[search_field] = ["like", "%" + txt + "%"];
			this.options.push({
				label: __('Find {0} in {1}', [txt.bold(), __(route[1]).bold()]),
				value: __('Find {0} in {1}', [txt, __(route[1])]),
				route_options: options,
				onclick: function() {
					cur_list.refresh();
				},
				index: 90,
				default: "Current",
				match: txt
			});
		}
	},

	make_calculator: function(txt) {
		var first = txt.substr(0,1);
		if(first==parseInt(first) || first==="(" || first==="=") {
			if(first==="=") {
				txt = txt.substr(1);
			}
			try {
				var val = eval(txt);
				var formatted_value = __('{0} = {1}', [txt, (val + '').bold()]);
				this.options.push({
					label: formatted_value,
					value: __('{0} = {1}', [txt, val]),
					match: val,
					index: 80,
					default: "Calculator",
					onclick: function() {
						frappe.msgprint(formatted_value, "Result");
					}
				});
			} catch(e) {
				// pass
			}
		}
	},
});

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/toolbar/search.js
 */
frappe.provide('frappe.search');

frappe.search.SearchDialog = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
		this.make();
	},

	make: function() {
		var d = new frappe.ui.Dialog();
		$(d.header).html($(frappe.render_template("search_header")));
		this.search_dialog = d;
		this.$search_modal = $(d.$wrapper).addClass('search-dialog');
		this.$modal_body = $(d.body);
		this.$input = this.$search_modal.find(".search-input");
		this.setup();
	},

	setup: function() {
		this.modal_state = 0;
		this.current_keyword = "";
		this.more_count = 20;
		this.full_lists = {};
		this.nav_lists = {};
		this.bind_input();
		this.bind_events();
	},

	update: function($r) {
		this.$search_modal.find('.loading-state').addClass('hide');
		this.$modal_body.append($r);
		if(this.$modal_body.find('.search-results').length > 1) {
			this.$modal_body.find('.search-results').first().addClass("hide");
			$r.removeClass("hide");
			this.$modal_body.find('.search-results').first().remove();
		} else {
			$r.removeClass("hide");
		}
	},

	put_placeholder: function(status_text) {
		var $placeholder = $('<div class="row search-results hide">' +
				'<div class="empty-state"><span style="margin-top: -100px">' +
				'<i class="mega-octicon octicon-telescope status-icon">' +
				'<i class="fa fa-square cover twinkle-one hide" style="left:0px;"></i>'+
				'<i class="fa fa-square cover twinkle-two hide" style="left:8px; top:5px;"></i>'+
				'<i class="fa fa-square cover twinkle-three hide" style="left:13px; top:-3px;"></i></i>'+
				'<p>' + status_text + '</p></span></div>' +
			'</div>');
		this.update($placeholder);
	},

	bind_input: function() {
		var me = this;
		this.$input.on("input", function() {
			var $this = $(this);
			clearTimeout($this.data('timeout'));
			$this.data('timeout', setTimeout(function() {
				if(me.$input.val() === me.current_keyword) return;
				var keywords = me.$input.val();
				if(keywords.length > 1) {
					me.get_results(keywords);
				} else {
					me.current_keyword = "";
					me.put_placeholder(me.search.empty_state_text);
				}
			}, 300));
		});
	},

	bind_events: function() {
		var me = this;

		// Sidebar
		this.$modal_body.on('click', '.list-link',  function() {
			var link = $(this);
			me.$modal_body.find('.search-sidebar').find(".list-link").removeClass("active select");
			link.addClass("active select");
			var type = link.attr('data-category');
			me.$modal_body.find('.results-area').empty().html(me.full_lists[type]);
			me.$modal_body.find('.module-section-link').first().focus();
			me.current_type = type;
		});

		// Summary more links
		this.$modal_body.on('click', '.section-more', function() {
			var type = $(this).attr('data-category');
			me.$modal_body.find('.search-sidebar').find('*[data-category="'+ type +'"]').trigger('click');
		});

		// Back-links (mobile-view)
		this.$modal_body.on('click', '.all-results-link', function() {
			me.$modal_body.find('.search-sidebar').find('*[data-category="All Results"]').trigger('click');
		});

		// Full list more links
		this.$modal_body.on('click', '.list-more', function() {
			var type = $(this).attr('data-category');
			var fetch_type = $(this).attr('data-search');
			var current_count = me.$modal_body.find('.result').length;
			if(fetch_type === "Global") {
				frappe.search.utils.get_global_results(me.current_keyword,
					current_count, me.more_count, type)
					.then(function(doctype_results) {
						me.add_more_results(doctype_results);
					}, function (err) {
						console.error(err);
					});
			} else {
				var results = me.nav_lists[type].slice(0, me.more_count);
				me.nav_lists[type].splice(0, me.more_count);
				me.add_more_results([{title: type, results: results}]);
			}
		});

		// Switch to global search link
		this.$modal_body.on('click', '.switch-to-global-search', function() {
			me.search = me.searches['global_search'];
			me.$input.attr("placeholder", me.search.input_placeholder);
			me.put_placeholder(me.search.empty_state_text);
			me.get_results(me.current_keyword);
		});

		// Help results
		this.$modal_body.on('click', 'a[data-path]', frappe.help.show_results);
		this.bind_keyboard_events();
	},

	bind_keyboard_events: function() {
		var me = this;
		this.$search_modal.on('keydown', function(e) {

			if(me.$modal_body.find('.list-link').length > 1) {
				if(me.modal_state === 0) {
					// DOWN and UP keys navigate sidebar
					var { UP_ARROW, DOWN_ARROW, TAB } = frappe.ui.keyCode;
					if(e.which === DOWN_ARROW || e.which === TAB) {
						e.preventDefault();
						var $link = me.$modal_body.find('.list-link.select').next();
						if($link.length > 0) {
							// me.$modal_body.find('.list-link').removeClass('select');
							// $link.addClass('select');
							$link.trigger('click');
						}
					} else if(e.which === UP_ARROW) {
						e.preventDefault();
						var $link = me.$modal_body.find('.list-link.select').prev();
						if($link.length > 0) {
							$link.trigger('click');
						}
					}
				}
			}

			if(!me.$input.is(":focus")) {
				me.$input.focus();
			}
		});

	},

	init_search: function(keywords, search_type) {
		var me = this;
		this.search = this.searches[search_type];
		this.$input.attr("placeholder", this.search.input_placeholder);
		this.put_placeholder(this.search.empty_state_text);
		this.get_results(keywords);
		this.search_dialog.show();
		this.$input.val(keywords);
		setTimeout(function() { me.$input.select(); }, 500);
	},

	get_results: function(keywords) {
		this.current_keyword = keywords;
		if(this.$modal_body.find('.empty-state').length > 0) {
			this.put_placeholder(__("Searching ..."));
			this.$modal_body.find('.cover').removeClass('hide')
		} else {
			this.$search_modal.find('.loading-state').removeClass('hide');
		}
		this.search.get_results(keywords, this.parse_results.bind(this));
	},

	parse_results: function(result_sets, keyword) {
		result_sets = result_sets.filter(function(set) {
			return set.results.length > 0;
		})
		if(result_sets.length > 0) {
			this.render_data(result_sets);
		} else {
			this.put_placeholder(this.search.no_results_status(keyword));
		}
	},

	render_data: function(result_sets) {
		var me = this;
		var $search_results = $(frappe.render_template("search")).addClass('hide');
		var $sidebar = $search_results.find(".search-sidebar").empty();
		var sidebar_item_html = '<li class="module-sidebar-item list-link" data-category="{0}">' +
			'<a><span class="ellipsis">{0}</span><i class="octicon octicon-chevron-right"' +
			'></a></li>';

		this.modal_state = 0;
		this.full_lists = {	'All Results': $('<div class="module-body results-summary"></div>') };
		this.nav_lists = {};

		result_sets.forEach(function(set) {
			$sidebar.append($(__(sidebar_item_html, [set.title])));
			me.add_section_to_summary(set.title, set.results);
			me.full_lists[set.title] = me.render_full_list(set.title, set.results, set.fetch_type);
		});

		if(result_sets.length > 1) {
			$sidebar.prepend($(__(sidebar_item_html, ["All Results"])));
		}

		this.update($search_results.clone());
		this.$modal_body.find('.list-link').first().trigger('click');
	},

	render_full_list: function(type, results, fetch_type) {
		var me = this, max_length = 20;
		var $results_list = $(' <div class="module-body"><div class="row module-section full-list '+
			type+'-section">'+'<div class="col-sm-12 module-section-column">' +
			'<div class="back-link"><a class="all-results-link small"> All Results</a></div>' +
			'<div class="h4 section-head">'+type+'</div>' +
			'<div class="section-body"></div></div></div></div>');

		var $results_col = $results_list.find('.module-section-column');
		for(var i = 0; i < max_length && results.length > 0; i++) {
			$results_col.append(me.render_result(type, results.shift()));
		}
		if(results.length > 0) {
			if(fetch_type === "Nav") this.nav_lists[type] = results;
			$results_col.append('<a class="list-more small" data-search="'+ fetch_type +
				'" data-category="'+ type + '" data-count="' + max_length +
				'" style="margin-top:10px">'+__("More...")+'</a>');
		}
		return $results_list;
	},

	add_section_to_summary: function(type, results) {
		var me = this;
		var are_expansive = false;
		var margin_more = "10px";
		for(var i = 0; i < results.length; i++) {
			if(results[i]["description" || "image" || "subtypes"] || false) {
				are_expansive = true;
				break;
			}
		}
		if(results[0].image) margin_more = "20px";
		var [section_length, col_width] = are_expansive ? [3, "12"] : [4, "6"];

		// check state of last summary section
		if(this.full_lists['All Results'].find('.module-section').last().find('.col-sm-6').length !== 1
			|| are_expansive) {
			this.full_lists['All Results'].append($('<div class="row module-section"></div>'));
		}
		var $results_col = $(`<div class="col-sm-${col_width} module-section-column" data-type="${type}">
			<div class="h4 section-head">${type}</div>
			<div class="section-body"></div>
			</div>`);
		results.slice(0, section_length).forEach(function(result) {
			$results_col.append(me.render_result(type, result));
		});
		if(results.length > section_length) {
			$results_col.append(`<div style="margin-top:${margin_more}"><a class="section-more small"
				data-category="${type}">${__("More...")}</a></div>`);
		}

		this.full_lists['All Results'].find('.module-section').last().append($results_col);
	},

	render_result: function(type, result) {
		var $result = $('<div class="result '+ type +'-result"></div>');

		function get_link(result) {
			var link;
			if(result.route) {
				link = 'href="#'+result.route.join('/')+'" ';
			} else if (result.data_path) {
				link = 'data-path="'+result.data_path+'"';
			} else {
				link = "";
			}
			return link;
		}

		if(result.image) {
			$result.append('<div class="result-image"><img data-name="' + result.label + '" src="'+ result.image +'" alt="' + result.label + '"></div>');
		} else if (result.image === null) {
			$result.append('<div class="result-image"><div class="flex-text"><span>'+ frappe.get_abbr(result.label) +'</span></div></div>');
		}

		var title_html = '<a '+ get_link(result) +' class="module-section-link small">'+ result.label +'</a>';
		var $result_text = $('<div style="display: inline-block;"></div>');
		if(result.description) {
			$result_text.append($('<b>' + title_html + '</b>'));
			$result_text.append('<p class="small">'+ result.description +'</p>');
		} else {
			$result_text.append($(title_html));
			if(result.route_options) {
				frappe.route_options = result.route_options;
			}
			$result_text.on('click', (e) => {
				this.search_dialog.hide();
				if(result.onclick) {
					result.onclick(result.match);
				} else {
					var previous_hash = window.location.hash;
					frappe.set_route(result.route);

					// hashchange didn't fire!
					if (window.location.hash == previous_hash) {
						frappe.route();
					}
				}
			});
		}

		$result.append($result_text);

		if(result.subtypes) {
			result.subtypes.forEach(function(subtype) {
				$result.append(subtype);
			});
		}

		return $result;
	},

	add_more_results: function(results_set) {
		var me = this;
		var more_results = $('<div class="more-results last"></div>');
		results_set[0].results.forEach(function(result) {
			more_results.append(me.render_result(results_set[0].title, result));
		});
		this.$modal_body.find('.list-more').before(more_results);

		if(results_set[0].results.length < this.more_count) {
			// hide more button and add a result count
			this.$modal_body.find('.list-more').hide();
			var no_of_results = this.$modal_body.find('.result').length;
			var no_of_results_cue = $('<p class="results-status text-muted small">'+
				no_of_results +' results found</p>');
			this.$modal_body.find(".more-results:last").append(no_of_results_cue);
		}
		this.$modal_body.find('.more-results.last').slideDown(200, function() {});
	},

	// Search objects
	searches: {
		global_search: {
			input_placeholder: __("Global Search"),
			empty_state_text: __("Search for anything"),
			no_results_status: (keyword) => __("<p>No results found for '" + keyword + "' in Global Search</p>"),

			get_results: function(keywords, callback) {
				var start = 0, limit = 100;
				var results = frappe.search.utils.get_nav_results(keywords);
				frappe.search.utils.get_global_results(keywords, start, limit)
					.then(function(global_results) {
						results = results.concat(global_results);
						return frappe.search.utils.get_help_results(keywords);
					}).then(function(help_results) {
						results = results.concat(help_results);
						callback(results, keywords);
					}, function (err) {
						console.error(err);
					});
			}
		},
		help: {
			input_placeholder: __("Search Help"),
			empty_state_text: __("Search the docs"),
			no_results_status: (keyword) => __("<p>No results found for '" + keyword +
				"' in Help</p><p>Would you like to search <a class='switch-to-global-search text-muted' "+
				"style='text-decoration: underline;'>globally</a>" +
				" or the <a href='https://discuss.erpnext.com' class='forum-link text-muted' " +
				"style='text-decoration: underline;'>forums</a> instead?</p>"),

			get_results: function(keywords, callback) {
				var results = [];
				frappe.search.utils.get_help_results(keywords)
					.then(function(help_results) {
						results = results.concat(help_results);
						callback(results, keywords);
					}, function (err) {
						console.error(err);
					});
			}
		}
	},

});
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/toolbar/search.html
 */
frappe.templates['search'] = '<div class="row search-results">     <div class="col-md-2 col-sm-2 hidden-xs layout-side-section">         <ul class="module-sidebar-nav overlay-sidebar nav nav-pills nav-stacked search-sidebar"></ul>     </div>     <div class="col-md-10 col-sm-10 layout-main-section results-area"></div> </div>';

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/toolbar/search_header.html
 */
frappe.templates['search_header'] = '<div class="search-header">     <i class="octicon octicon-search"></i>     <input type="text" class="form-control search-input" style="padding-left: 15px">     <p class="loading-state hide" style="margin: 0px 20px; color:#d4d9dd">{%= __("Searching")%}&nbsp...</p>     <a type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</a> </div>';

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/toolbar/search_utils.js
 */
frappe.provide('frappe.search');

frappe.search.utils = {
	setup_recent: function() {
		this.recent = JSON.parse(frappe.boot.user.recent || "[]") || [];
	},

	get_recent_pages: function(keywords) {
		var me = this, values = [], options = [];

		function find(list, keywords, process) {
			list.forEach(function(item, i) {
				var _item = ($.isArray(item)) ? item[0] : item;
				_item = __(_item || '').toLowerCase().replace(/-/g, " ");

				if(keywords===_item || _item.indexOf(keywords) !== -1) {
					var option = process(item);

					if(option) {
						if($.isPlainObject(option)) {
							option = [option];
						}
						option.forEach(function(o) { o.match = item; });
						options = option.concat(options);
					}
				}
			});
		}

		me.recent.forEach(function(doctype, i) {
			values.push([doctype[1], ['Form', doctype[0], doctype[1]]]);
		});

		values = values.reverse();

		frappe.route_history.forEach(function(route, i) {
			if(route[0]==='Form') {
				values.push([route[2], route]);
			}
			else if(in_list(['List', 'Report', 'Tree', 'modules', 'query-report'], route[0])) {
				if(route[1]) {
					values.push([route[1], route]);
				}
			}
			else if(route[0]) {
				values.push([frappe.route_titles[route[0]] || route[0], route]);
			}
		});

		find(values, keywords, function(match) {
			var out = {
				route: match[1]
			};
			if (match[1][0]==='Form') {
				if (match[1].length > 2 && match[1][1] !== match[1][2]) {
					out.label = __(match[1][1]) + " " + match[1][2].bold();
					out.value = __(match[1][1]) + " " + match[1][2];
				} else {
					out.label = __(match[1][1]).bold();
					out.value = __(match[1][1]);
				}
			} else if (in_list(['List', 'Report', 'Tree', 'modules', 'query-report'], match[1][0]) && (match[1].length > 1)) {
				var type = match[1][0], label = type;
				if(type==='modules') label = 'Module';
				else if(type==='query-report') label = 'Report';
				out.label = __(match[1][1]).bold() + " " + __(label);
				out.value = __(match[1][1]) + " " + __(label);
			} else if (match[0]) {
				out.label = match[0].bold();
				out.value = match[0];
			} else {
				// eslint-disable-next-line
				console.log('Illegal match', match);
			}
			out.index = 80;
			return out;
		});

		return options;
	},

	get_search_in_list: function(keywords) {
		var me = this;
		var out = [];
		if(in_list(keywords.split(" "), "in") && (keywords.slice(-2) !== "in")) {
			var parts = keywords.split(" in ");
			frappe.boot.user.can_read.forEach(function (item) {
				if(frappe.boot.user.can_search.includes(item)) {
					var level = me.fuzzy_search(parts[1], item);
					if(level) {
						out.push({
							type: "In List",
							label: __('Find {0} in {1}', [__(parts[0]), me.bolden_match_part(__(item), parts[1])]),
							value: __('Find {0} in {1}', [__(parts[0]), __(item)]),
							route_options: {"name": ["like", "%" + parts[0] + "%"]},
							index: 1 + level,
							route: ["List", item]
						});
					}
				}
			});
		}
		return out;
	},

	get_creatables: function(keywords) {
		var me = this;
		var out = [];
		var firstKeyword = keywords.split(" ")[0];
		if(firstKeyword.toLowerCase() === __("new")) {
			frappe.boot.user.can_create.forEach(function (item) {
				var level = me.fuzzy_search(keywords.substr(4), item);
				if(level) {
					out.push({
						type: "New",
						label: __("New {0}", [me.bolden_match_part(__(item), keywords.substr(4))]),
						value: __("New {0}", [__(item)]),
						index: 1 + level,
						match: item,
						onclick: function() { frappe.new_doc(item, true); }
					});
				}
			});
		}
		return out;
	},

	get_doctypes: function(keywords) {
		var me = this;
		var out = [];

		var level, target;
		var option = function(type, route, order) {
			return {
				type: type,
				label: me.bolden_match_part(__(target), keywords) + " " + __(type),
				value: __(target) + " " + __(type),
				index: level + order,
				match: target,
				route: route,
			}
		};
		frappe.boot.user.can_read.forEach(function (item) {
			level = me.fuzzy_search(keywords, item);
			if (level) {
				target = item;
				if (in_list(frappe.boot.single_types, item)) {
					out.push(option("", ["Form", item, item], 0.05));

				} else if (frappe.boot.user.can_search.includes(item)) {
					// include 'making new' option
					if (in_list(frappe.boot.user.can_create, item)) {
						var match = item;
						out.push({
							type: "New",
							label: __("New {0}", [me.bolden_match_part(__(item), keywords)]),
							value: __("New {0}", [__(item)]),
							index: level + 0.015,
							match: item,
							onclick: function () { frappe.new_doc(match, true); }
						});
					}
					if (in_list(frappe.boot.treeviews, item)) {
						out.push(option("Tree", ["Tree", item], 0.05));

					} else {
						out.push(option("List", ["List", item], 0.05));
						if (frappe.model.can_get_report(item)) {
							out.push(option("Report", ["Report", item], 0.04));
						}
						if (frappe.boot.calendars.indexOf(item) !== -1) {
							out.push(option("Calendar", ["List", item, "Calendar"], 0.03));
							out.push(option("Gantt", ["List", item, "Gantt"], 0.02));
						}
					}
				}
			}
		});
		return out;
	},

	get_reports: function(keywords) {
		var me = this;
		var out = [];
		var route;
		Object.keys(frappe.boot.user.all_reports).forEach(function(item) {
			var level = me.fuzzy_search(keywords, item);
			if(level > 0) {
				var report = frappe.boot.user.all_reports[item];
				if(report.report_type == "Report Builder")
					route = ["Report", report.ref_doctype, item];
				else
					route = ["query-report",  item];
				out.push({
					type: "Report",
					label: __("Report {0}" , [me.bolden_match_part(__(item), keywords)]),
					value: __("Report {0}" , [__(item)]),
					index: level,
					route: route
				});
			}
		});
		return out;
	},

	get_pages: function(keywords) {
		var me = this;
		var out = [];
		this.pages = {};
		$.each(frappe.boot.page_info, function(name, p) {
			me.pages[p.title] = p;
			p.name = name;
		});
		Object.keys(this.pages).forEach(function(item) {
			var level = me.fuzzy_search(keywords, item);
			if(level) {
				var page = me.pages[item];
				out.push({
					type: "Page",
					label: __("Open {0}", [me.bolden_match_part(__(item), keywords)]),
					value: __("Open {0}", [__(item)]),
					match: item,
					index: level,
					route: [page.route || page.name]
				});
			}
		});
		var target = 'Calendar';
		if(__('calendar').indexOf(keywords.toLowerCase()) === 0) {
			out.push({
				type: "Calendar",
				value: __("Open {0}", [__(target)]),
				index: me.fuzzy_search(keywords, 'Calendar'),
				match: target,
				route: ['List', 'Event', target],
			});
		}
		if(__('email inbox').indexOf(keywords.toLowerCase()) === 0) {
			out.push({
				type: "Inbox",
				value: __("Open {0}", [__('Email Inbox')]),
				index: me.fuzzy_search(keywords, 'email inbox'),
				match: target,
				route: ['List', 'Communication', 'Inbox'],
			});
		}
		return out;
	},

	get_modules: function(keywords) {
		var me = this;
		var out = [];
		Object.keys(frappe.modules).forEach(function(item) {
			var level = me.fuzzy_search(keywords, item);
			if(level > 0) {
				var module = frappe.modules[item];
				if (module._doctype) return;

				// disallow restricted modules
				if (frappe.boot.user.allow_modules &&
					!frappe.boot.user.allow_modules.includes(module.module_name)) {
					return;
				}
				var ret = {
					type: "Module",
					label: __("Open {0}", [me.bolden_match_part(__(item), keywords)]),
					value: __("Open {0}", [__(item)]),
					index: level,
				}
				if(module.link) {
					ret.route = [module.link];
				} else {
					ret.route = ["Module", item];
				}
				out.push(ret);
			}
		});
		return out;
	},

	get_global_results: function (keywords, start, limit, doctype = "") {
		var me = this;
		function get_results_sets(data) {
			var results_sets = [], result, set;
			function get_existing_set (doctype) {
				return results_sets.find(function(set) {
					return set.title === doctype;
				});
			}

			function make_description(content, doc_name) {
				var parts = content.split(" ||| ");
				var result_max_length = 300;
				var field_length = 120;
				var fields = [];
				var result_current_length = 0;
				var field_text = "";
				for(var i = 0; i < parts.length; i++) {
					var part = parts[i];
					if(part.toLowerCase().indexOf(keywords) !== -1) {
						// If the field contains the keyword
						if(part.indexOf(' &&& ') !== -1) {
							var colon_index = part.indexOf(' &&& ');
							var field_value = part.slice(colon_index + 5);
						} else {
							var colon_index = part.indexOf(' : ');
							var field_value = part.slice(colon_index + 3);
						}
						if(field_value.length > field_length) {
							// If field value exceeds field_length, find the keyword in it
							// and trim field value by half the field_length at both sides
							// ellipsify if necessary
							var field_data = "";
							var index = field_value.indexOf(keywords);
							field_data += index < field_length/2 ? field_value.slice(0, index)
								: '...' + field_value.slice(index - field_length/2, index)
							field_data += field_value.slice(index, index + field_length/2);
							field_data += index + field_length/2 < field_value.length ? "..." : "";
							field_value = field_data;
						}
						var field_name = part.slice(0, colon_index);

						// Find remaining result_length and add field length to result_current_length
						var remaining_length = result_max_length - result_current_length;
						result_current_length += field_name.length + field_value.length + 2;
						if(result_current_length < result_max_length) {
							// We have room, push the entire field
							field_text = '<span class="field-name text-muted">' +
								me.bolden_match_part(field_name, keywords) + ': </span> ' +
								me.bolden_match_part(field_value, keywords);
							if(fields.indexOf(field_text) === -1 && doc_name !== field_value) {
								fields.push(field_text);
							}
						} else {
							// Not enough room
							if(field_name.length < remaining_length){
								// Ellipsify (trim at word end) and push
								remaining_length -= field_name.length;
								field_text = '<span class="field-name text-muted">' +
									me.bolden_match_part(field_name, keywords) + ': </span> ';
								field_value = field_value.slice(0, remaining_length);
								field_value = field_value.slice(0, field_value.lastIndexOf(' ')) + ' ...';
								field_text += me.bolden_match_part(field_value, keywords);
								fields.push(field_text);
							} else {
								// No room for even the field name, skip
								fields.push('...');
							}
							break;
						}
					}
				}
				return fields.join(', ');
			}

			data.forEach(function(d) {
				// more properties
				result = {
					label: d.name,
					value: d.name,
					description: make_description(d.content, d.name),
					route: ['Form', d.doctype, d.name],
				}
				if(d.image || d.image === null){
					result.image = d.image;
				}
				set = get_existing_set(d.doctype);
				if(set) {
					set.results.push(result);
				} else {
					set = {
						title: d.doctype,
						results: [result],
						fetch_type: "Global"
					}
					results_sets.push(set);
				}

			});
			return results_sets;
		}
		return new Promise(function(resolve, reject) {
			frappe.call({
				method: "frappe.utils.global_search.search",
				args: {
					text: keywords,
					start: start,
					limit: limit,
					doctype: doctype
				},
				callback: function(r) {
					if(r.message) {
						resolve(get_results_sets(r.message));
					} else {
						resolve([]);
					}
				}
			});
		});
	},

	get_help_results: function(keywords) {
		function get_results_set(data) {
			var result;
			var set = {
				title: "Help",
				fetch_type: "Help",
				results: []
			}
			data.forEach(function(d) {
				// more properties
				result = {
					label: d[0],
					value: d[0],
					description: d[1],
					data_path: d[2],
					onclick: function() {

					}
				}
				set.results.push(result);
			});
			return [set];
		}
		return new Promise(function(resolve, reject) {
			frappe.call({
				method: "frappe.utils.help.get_help",
				args: {
					text: keywords
				},
				callback: function(r) {
					if(r.message) {
						resolve(get_results_set(r.message));
					} else {
						resolve([]);
					}
				}
			});
		});
	},

	get_nav_results: function(keywords) {
		function sort_uniques(array) {
			var routes = [], out = [];
			array.forEach(function(d) {
				if(d.route) {
					if(d.route[0] === "List" && d.route[2]) {
						d.route.splice(2);
					}
					var str_route = d.route.join('/');
					if(routes.indexOf(str_route) === -1) {
						routes.push(str_route);
						out.push(d);
					} else {
						var old = routes.indexOf(str_route);
						if(out[old].index > d.index) {
							out[old] = d;
						}
					}
				} else {
					out.push(d);
				}
			});
			return out.sort(function(a, b) {
				return b.index - a.index;
			});
		}
		var lists = [], setup = [];
		var all_doctypes = sort_uniques(this.get_doctypes(keywords));
		all_doctypes.forEach(function(d) {
			if(d.type === "") {
				setup.push(d);
			} else {
				lists.push(d);
			}
		});
		var in_keyword = keywords.split(" in ")[0];
		return [
			{title: "Recents", fetch_type: "Nav", results: sort_uniques(this.get_recent_pages(keywords))},
			{title: "Create a new ...", fetch_type: "Nav", results: sort_uniques(this.get_creatables(keywords))},
			{title: "Find '" + in_keyword + "' in ... ", fetch_type: "Nav", results: sort_uniques(this.get_search_in_list(keywords))},
			{title: "Lists", fetch_type: "Nav", results: lists},
			{title: "Reports", fetch_type: "Nav", results: sort_uniques(this.get_reports(keywords))},
			{title: "Administration", fetch_type: "Nav", results: sort_uniques(this.get_pages(keywords))},
			{title: "Modules", fetch_type: "Nav", results: sort_uniques(this.get_modules(keywords))},
			{title: "Setup", fetch_type: "Nav", results: setup},
		]
	},

	fuzzy_search: function(keywords, _item) {
		// Returns 10 for case-perfect contain, 0 for not found
			// 9 for perfect contain,
			// 0 - 6 for fuzzy contain

		// **Specific use-case step**
		keywords = keywords || '';

		var item = __(_item || '').replace(/-/g, " ");

		var ilen = item.length;
		var klen = keywords.length;
		var length_ratio = klen/ilen;
		var max_skips = 3, max_mismatch_len = 2;

		if (klen > ilen) {	return 0;  }

		if(keywords === item || item.toLowerCase().indexOf(keywords) === 0) {
			return 10 + length_ratio;
		}

		if (item.indexOf(keywords) !== -1 && keywords !== keywords.toLowerCase()) {
			return 9 + length_ratio;
		}

		item = item.toLowerCase();
		keywords = keywords.toLowerCase();

		if (item.indexOf(keywords) !== -1) {
			return 8 + length_ratio;
		}

		var skips = 0, mismatches = 0;
		outer: for (var i = 0, j = 0; i < klen; i++) {
			if(mismatches !== 0) skips++;
			if(skips > max_skips) return 0;
			var k_ch = keywords.charCodeAt(i);
			mismatches = 0;
			while (j < ilen) {
				if (item.charCodeAt(j++) === k_ch) {
					continue outer;
				}
				if(++mismatches > max_mismatch_len)  return 0 ;
			}
			return 0;
		}

		// Since indexOf didn't pass, there will be atleast 1 skip
		// hence no divide by zero, but just to be safe
		if((skips + mismatches) > 0) {
			return (5 + length_ratio)/(skips + mismatches);
		} else {
			return 0;
		}
	},

	bolden_match_part: function(str, subseq) {
		var rendered = "";
		if(this.fuzzy_search(subseq, str) === 0) {
			return str;
		} else if(this.fuzzy_search(subseq, str) > 6) {
			var regEx = new RegExp("("+ subseq +")", "ig");
			return str.replace(regEx, '<b>$1</b>');
		} else {
			var str_orig = str;
			var str = str.toLowerCase();
			var str_len = str.length;
			var subseq = subseq.toLowerCase();

			outer: for(var i = 0, j = 0; i < subseq.length; i++) {
				var sub_ch = subseq.charCodeAt(i);
				while(j < str_len) {
					if(str.charCodeAt(j) === sub_ch) {
						var str_char = str_orig.charAt(j);
						if(str_char === str_char.toLowerCase()) {
							rendered += '<b>' + subseq.charAt(i) + '</b>';
						} else {
							rendered += '<b>' + subseq.charAt(i).toUpperCase() + '</b>';
						}
						j++;
						continue outer;
					}
					rendered += str_orig.charAt(j);
					j++;
				}
				return str_orig;
			}
			rendered += str_orig.slice(j);
			return rendered;
		}

	},
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/toolbar/about.js
 */
frappe.provide('frappe.ui.misc');
frappe.ui.misc.about = function() {
	if(!frappe.ui.misc.about_dialog) {
		var d = new frappe.ui.Dialog({title: __('Frappe Framework')});

		$(d.body).html(repl("<div>\
		<p>"+__("Open Source Applications for the Web")+"</p>  \
		<p><i class='fa fa-globe fa-fw'></i>\
			Website: <a href='https://frappe.io' target='_blank'>https://frappe.io</a></p>\
		<p><i class='fa fa-github fa-fw'></i>\
			Source: <a href='https://github.com/frappe' target='_blank'>https://github.com/frappe</a></p>\
		<hr>\
		<h4>Installed Apps</h4>\
		<div id='about-app-versions'>Loading versions...</div>\
		<hr>\
		<p class='text-muted'>&copy; Frappe Technologies Pvt. Ltd and contributors </p> \
		</div>", frappe.app));

		frappe.ui.misc.about_dialog = d;

		frappe.ui.misc.about_dialog.on_page_show = function() {
			if(!frappe.versions) {
				frappe.call({
					method: "frappe.utils.change_log.get_versions",
					callback: function(r) {
						show_versions(r.message);
					}
				})
			}
		};

		var show_versions = function(versions) {
			var $wrap = $("#about-app-versions").empty();
			$.each(Object.keys(versions).sort(), function(i, key) {
				var v = versions[key];
				if(v.branch) {
					var text = $.format('<p><b>{0}:</b> v{1} ({2})<br></p>',
						[v.title, v.branch_version || v.version, v.branch])
				} else {
					var text = $.format('<p><b>{0}:</b> v{1}<br></p>',
						[v.title, v.version])
				}
				$(text).appendTo($wrap);
			});

			frappe.versions = versions;
		}

	}

	frappe.ui.misc.about_dialog.show();

}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/toolbar/navbar.html
 */
frappe.templates['navbar'] = '<div class="navbar navbar-default navbar-fixed-top" role="navigation">  <div class="container">   <div class="navbar-header navbar-desk">    <a class="navbar-brand toggle-sidebar visible-xs visible-sm">     <i class="octicon octicon-three-bars"></i>    </a>    <a class="navbar-brand navbar-home hidden-xs hidden-sm" href="#">Home</a>    <ul class="nav navbar-nav" id="navbar-breadcrumbs">    </ul>   </div>   <div class="navbar-center ellipsis" style="display: none;"></div>    <ul class="nav navbar-nav navbar-right">    <li class="user-progress hide" title="Your Setup Progress">     <a class="dropdown-toggle" data-toggle="dropdown" href="#" onclick="return false;"  style="height: 40px;">      <div class="progress-chart" style"width: 50px; margin-top: 8px;"><div class="progress">       <div class="progress-bar"></div>      </div></div>     </a>    </li>    <li class="visible-xs">     <a class="navbar-search-button" href="#" data-toggle="modal" data-target="#search-modal"><i class="octicon octicon-search"></i></a>    </li>    <li class="dropdown dropdown-navbar-user dropdown-mobile">     <a class="dropdown-toggle" data-toggle="dropdown" href="#"      onclick="return false;">     {{ avatar }}                 <span class="ellipsis toolbar-user-fullname hidden-xs hidden-sm">      {%= frappe.user.full_name() %}</span>                 <b class="caret hidden-xs hidden-sm"></b></a>     <ul class="dropdown-menu" id="toolbar-user" role="menu">      <li class="navbar-set-desktop-icons"><a href="#modules_setup">          {%= __("Set Desktop Icons") %}</a></li>      <li><a href="#Form/User/{%= encodeURIComponent(frappe.session.user) %}">          {%= __("My Settings") %}</a></li>      <li><a href="#" onclick="return frappe.ui.toolbar.clear_cache();">          {%= __("Reload") %}</a></li>      <li><a href="/index" target="_blank" rel="noopener noreferrer">       {%= __("View Website") %}</a></li>      <li><a href="#background_jobs">       {%= __("Background Jobs") %}</a></li>      <li class="divider"></li>      <li><a href="#" onclick="return frappe.app.logout();">       {%= __("Logout") %}</a></li>     </ul>    </li>     <li class="dropdown dropdown-help dropdown-mobile">     <a class="dropdown-toggle" data-toggle="dropdown" href="#"      onclick="return false;"  style="height: 40px;">      <span class="hidden-xs hidden-sm" style="line-height: 24px;">{{ __("Help") }} <b class="caret"></b></span>      <span class="visible-xs visible-sm standard-image"       style="padding: 50% 7px; font-size: 17px; background-color: #fafbfc; font-weight: 100;">?</span>     </a>     <ul class="dropdown-menu" role="menu">      <div class="input-group" style="border-bottom: 1px solid #d1d8dd;">       <input id="input-help" type="text" placeholder="{{ __("What do you need help with?") }}" autofocus>       <span class="input-group-btn"><button class="btn btn-default">{{ __("Go") }}</button></span>      </div>      <li id="help-links"></li>      <li class="divider"></li>      <li>       <a data-link-type="documentation"        data-path="/documentation/index" target="_blank" rel="noopener noreferrer">{{ __("Documentation") }}</a>      </li>      <li class="divider documentation-links"></li>      <li><a href="#" onclick="return frappe.ui.toolbar.show_about();">       {%= __("About") %}</a></li>     </ul>    </li>     <li class="dropdown dropdown-navbar-new-comments dropdown-mobile">     <a class="btn dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">      <span class="navbar-new-comments">0</span>     </a>     <ul class="dropdown-menu" id="dropdown-notification" role="menu" style="max-height: 480px; overflow-y: auto;">     </ul>    </li>   </ul>    <div id="search-modal" class="modal fade" role="dialog">    <div class="modal-dialog" style="height: 50px;">     <div class="modal-content">      <div class="modal-header">       <form role="search" onsubmit="return false;">        <div class="input-group" style="width: 100%">         <input id="modal-search" type="text" class="form-control"         placeholder="{%= __("Search or type a command") %}" aria-haspopup="true">         <button type="reset" class="close"><i class="octicon octicon-x"></i></button>        </div>       </form>      </div>     </div>    </div>   </div>    <div class="hidden-xs">          <form class="navbar-form navbar-right" role="search" onsubmit="return false;">            <div class="form-group form-group-sm ui-front">              <input id="navbar-search" type="text" class="form-control"      placeholder="{%= __("Search or type a command") %} {%= __("(Ctrl + G)") %}" aria-haspopup="true">     <span class="octicon octicon-search navbar-search-icon"></span>            </div>          </form>   </div>  </div> </div> ';

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/toolbar/toolbar.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.provide("frappe.ui.toolbar");
frappe.provide('frappe.search');

frappe.ui.toolbar.Toolbar = Class.extend({
	init: function() {
		$('header').append(frappe.render_template("navbar", {
			avatar: frappe.avatar(frappe.session.user)
		}));
		$('.dropdown-toggle').dropdown();

		let awesome_bar = new frappe.search.AwesomeBar();
		awesome_bar.setup("#navbar-search");
		awesome_bar.setup("#modal-search");

		this.make();
	},

	make: function() {
		this.setup_sidebar();
		this.setup_help();
		this.setup_progress_dialog();
		this.bind_events();

		$(document).trigger('toolbar_setup');
	},

	bind_events: function() {
		$(document).on("notification-update", function() {
			frappe.ui.notifications.update_notifications();
		});

		// clear all custom menus on page change
		$(document).on("page-change", function() {
			$("header .navbar .custom-menu").remove();
		});

		//focus search-modal on show in mobile view
		$('#search-modal').on('shown.bs.modal', function () {
			var search_modal = $(this);
			setTimeout(function() {
				search_modal.find('#modal-search').focus();
			}, 300);
		});
	},

	setup_sidebar: function () {
		var header = $('header');
		header.find(".toggle-sidebar").on("click", function () {
			var layout_side_section = $('.layout-side-section');
			var overlay_sidebar = layout_side_section.find('.overlay-sidebar');

			overlay_sidebar.addClass('opened');
			overlay_sidebar.find('.reports-dropdown')
				.removeClass('dropdown-menu')
				.addClass('list-unstyled');
			overlay_sidebar.find('.dropdown-toggle')
				.addClass('text-muted').find('.caret')
				.addClass('hidden-xs hidden-sm');

			$('<div class="close-sidebar">').hide().appendTo(layout_side_section).fadeIn();

			var scroll_container = $('html');
			scroll_container.css("overflow-y", "hidden");

			layout_side_section.find(".close-sidebar").on('click', close_sidebar);
			layout_side_section.on("click", "a", close_sidebar);

			function close_sidebar(e) {
				scroll_container.css("overflow-y", "");

				layout_side_section.find("div.close-sidebar").fadeOut(function() {
					overlay_sidebar.removeClass('opened')
						.find('.dropdown-toggle')
						.removeClass('text-muted');
					overlay_sidebar.find('.reports-dropdown')
						.addClass('dropdown-menu');
				});
			}
		});
	},

	setup_help: function () {
		frappe.provide('frappe.help');
		frappe.help.show_results = show_results;

		this.search = new frappe.search.SearchDialog();
		frappe.provide('frappe.searchdialog');
		frappe.searchdialog.search = this.search;

		$(".dropdown-help .dropdown-toggle").on("click", function () {
			$(".dropdown-help input").focus();
		});

		$(".dropdown-help .dropdown-menu").on("click", "input, button", function (e) {
			e.stopPropagation();
		});

		$("#input-help").on("keydown", function (e) {
			if(e.which == 13) {
				var keywords = $(this).val();
				show_help_results(keywords);
				$(this).val("");
			}
		});

		$("#input-help + span").on("click", function () {
			var keywords = $("#input-help").val();
			show_help_results(keywords);
			$(this).val("");
		});

		$(document).on("page-change", function () {
			var $help_links = $(".dropdown-help #help-links");
			$help_links.html("");

			var route = frappe.get_route_str();
			var breadcrumbs = route.split("/");

			var links = [];
			for (var i = 0; i < breadcrumbs.length; i++) {
				var r = route.split("/", i + 1);
				var key = r.join("/");
				var help_links = frappe.help.help_links[key] || [];
				links = $.merge(links, help_links);
			}

			if(links.length === 0) {
				$help_links.next().hide();
			}
			else {
				$help_links.next().show();
			}

			for (var i = 0; i < links.length; i++) {
				var link = links[i];
				var url = link.url;
				var app_name = url.split('//', 2)[1].split('/', 2)[1];
				var data_path = url.slice(url.indexOf('/user'));
				if(data_path.lastIndexOf('.')){
					data_path = data_path.slice(0, data_path.lastIndexOf('.'));
				}
				data_path = data_path.replace('user', app_name);

				$("<a>", {
					href: link.url,
					text: link.label,
					target: "_blank",
					"data-path": data_path
				}).appendTo($help_links);
			}

			$('.dropdown-help .dropdown-menu').on('click', 'a', show_results);
		});

		var $result_modal = frappe.get_modal("", "");
		$result_modal.addClass("help-modal");

		$(document).on("click", ".help-modal a", show_results);

		var me = this;
		function show_help_results(keywords) {
			me.search.init_search(keywords, "help");
		}

		function show_results(e) {
			//edit links
			var href = e.target.href;
			if(href.indexOf('blob') > 0) {
				window.open(href, '_blank');
			}
			var converter = new Showdown.converter();
			var path = $(e.target).attr("data-path");
			if(path) {
				e.preventDefault();
				frappe.call({
					method: "frappe.utils.help.get_help_content",
					args: {
						path: path
					},
					callback: function (r) {
						if(r.message && r.message.title) {
							$result_modal.find('.modal-title').html("<span>"
								+ r.message.title + "</span>");
							$result_modal.find('.modal-body').html(r.message.content);
							$result_modal.modal('show');
						}
					}
				});
			}
		}
	},

	setup_progress_dialog: function() {
		var me = this;
		frappe.call({
			method: "frappe.desk.user_progress.get_user_progress_slides",
			callback: function(r) {
				if(r.message) {
					let slides = r.message;
					if(slides.length && slides.map(s => parseInt(s.done)).includes(0)) {
						frappe.require("assets/frappe/js/frappe/ui/toolbar/user_progress_dialog.js", function() {
							me.progress_dialog = new frappe.setup.UserProgressDialog({
								slides: slides
							});
							$('.user-progress').removeClass('hide');
							$('.user-progress .dropdown-toggle').on('click', () => {
								me.progress_dialog.show();
							});

							if (frappe.boot.is_first_startup) {
								me.progress_dialog.show();
								frappe.call({
									method: "frappe.desk.page.setup_wizard.setup_wizard.reset_is_first_startup",
									args: {},
									callback: () => {}
								});
							}

						});
					}
				}
			},
			freeze: false
		});
	}
});

$.extend(frappe.ui.toolbar, {
	add_dropdown_button: function(parent, label, click, icon) {
		var menu = frappe.ui.toolbar.get_menu(parent);
		if(menu.find("li:not(.custom-menu)").length && !menu.find(".divider").length) {
			frappe.ui.toolbar.add_menu_divider(menu);
		}

		return $('<li class="custom-menu"><a><i class="fa-fw '
			+icon+'"></i> '+label+'</a></li>')
			.insertBefore(menu.find(".divider"))
			.find("a")
			.click(function() {
				click.apply(this);
			});
	},
	get_menu: function(label) {
		return $("#navbar-" + label.toLowerCase());
	},
	add_menu_divider: function(menu) {
		menu = typeof menu == "string" ?
			frappe.ui.toolbar.get_menu(menu) : menu;

		$('<li class="divider custom-menu"></li>').prependTo(menu);
	}
});

frappe.ui.toolbar.clear_cache = function() {
	frappe.assets.clear_local_storage();
	frappe.call({
		method: 'frappe.sessions.clear',
		callback: function(r) {
			if(!r.exc) {
				frappe.show_alert({message:r.message, indicator:'green'});
				location.reload(true);
			}
		}
	})
	return false;
}

frappe.ui.toolbar.download_backup = function() {
	frappe.msgprint(__("Your download is being built, this may take a few moments..."));
	$c('frappe.utils.backups.get_backup',{},function(r,rt) {});
	return false;
}

frappe.ui.toolbar.show_about = function() {
	try {
		frappe.ui.misc.about();
	} catch(e) {
		console.log(e);
	}
	return false;
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/toolbar/notifications.js
 */
frappe.provide("frappe.ui.notifications");

frappe.ui.notifications = {
	config: {
		"ToDo": { label: __("To Do") },
		"Chat": { label: __("Chat"), route: "chat"},
		"Event": { label: __("Calendar"), route: "List/Event/Calendar" },
		"Email": { label: __("Email"), route: "List/Communication/Inbox" },
		"Likes": { label: __("Likes"),
			click: function() {
				frappe.route_options = { show_likes: true };
				if (frappe.get_route()[0]=="activity") {
					frappe.pages['activity'].page.list.refresh();
				} else {
					frappe.set_route("activity");
				}
			}
		},
	},

	update_notifications: function() {
		this.total = 0;
		this.dropdown = $("#dropdown-notification").empty();
		this.boot_info = frappe.boot.notification_info;
		let defaults = ["Comment", "ToDo", "Event"];

		this.get_counts(this.boot_info.open_count_doctype, 1, defaults);
		this.get_counts(this.boot_info.open_count_other, 1);

		// Target counts are stored for docs per doctype
		let targets = { doctypes : {} }, map = this.boot_info.targets;
		Object.keys(map).map(doctype => {
			Object.keys(map[doctype]).map(doc => {
				targets[doc] = map[doctype][doc];
				targets.doctypes[doc] = doctype;
			});
		});
		this.get_counts(targets, 1, null, ["doctypes"], true);
		this.get_counts(this.boot_info.open_count_doctype,
			0, null, defaults);

		this.bind_list();

		// switch colour on the navbar and disable if no notifications
		$(".navbar-new-comments")
			.html(this.total > 99 ? '99+' : this.total)
			.toggleClass("navbar-new-comments-true", this.total ? true : false)
			.parent().toggleClass("disabled", this.total ? false : true);
	},

	get_counts: function(map, divide, keys, excluded = [], target = false) {
		let empty_map = 1;
		keys = keys ? keys
			: Object.keys(map).sort().filter(e => !excluded.includes(e));
		keys.map(key => {
			let doc_dt = (map.doctypes) ? map.doctypes[key] : undefined;
			if(map[key] > 0 || target) {
				this.add_notification(key, map[key], doc_dt, target);
				empty_map = 0;
			}
		});
		if(divide && !empty_map) {
			this.dropdown.append($('<li class="divider"></li>'));
		}
	},

	add_notification: function(name, value, doc_dt, target = false) {
		let label = this.config[name] ? this.config[name].label : name;
		let title = target ? `title="Your Target"` : '';
		let $list_item = !target
			? $(`<li><a class="badge-hover" data-doctype="${name}" ${title}>${__(label)}
				<span class="badge pull-right">${value}</span>
			</a></li>`)
			: $(`<li><a class="progress-small" ${title} data-doctype="${doc_dt}"
				data-doc="${name}"><span class="dropdown-item-label">${__(label)}<span>
				<div class="progress-chart"><div class="progress">
					<div class="progress-bar" style="width: ${value}%"></div>
				</div></div>
			</a></li>`);
		this.dropdown.append($list_item);
		if(!target) this.total += value;
	},

	bind_list: function() {
		var me = this;
		$("#dropdown-notification a").on("click", function() {
			var doctype = $(this).attr("data-doctype");
			var doc = $(this).attr("data-doc");
			if(!doc) {
				var config = me.config[doctype] || {};
				if (config.route) {
					frappe.set_route(config.route);
				} else if (config.click) {
					config.click();
				} else {
					frappe.ui.notifications.show_open_count_list(doctype);
				}
			} else {
				frappe.set_route("Form", doctype, doc);
			}
		});
	},

	show_open_count_list: function(doctype) {
		let filters = this.boot_info.conditions[doctype];
		if(filters && $.isPlainObject(filters)) {
			if (!frappe.route_options) {
				frappe.route_options = {};
			}
			$.extend(frappe.route_options, filters);
		}
		let route = frappe.get_route();
		if(route[0]==="List" && route[1]===doctype) {
			frappe.pages["List/" + doctype].list_view.refresh();
		} else {
			frappe.set_route("List", doctype);
		}
	},
}
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/views/communication.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.last_edited_communication = {};
frappe.standard_replies = {};

frappe.views.CommunicationComposer = Class.extend({
	init: function(opts) {
		$.extend(this, opts);
		this.make();
	},
	make: function() {
		var me = this;
		this.dialog = new frappe.ui.Dialog({
			title: (this.title || this.subject || __("New Email")),
			no_submit_on_enter: true,
			fields: this.get_fields(),
			primary_action_label: __("Send"),
			primary_action: function() {
				me.send_action();
			}
		});

		$(document).on("upload_complete", function(event, attachment) {
			if(me.dialog.display) {
				var wrapper = $(me.dialog.fields_dict.select_attachments.wrapper);

				// find already checked items
				var checked_items = wrapper.find('[data-file-name]:checked').map(function() {
					return $(this).attr("data-file-name");
				});

				// reset attachment list
				me.render_attach();

				// check latest added
				checked_items.push(attachment.name);

				$.each(checked_items, function(i, filename) {
					wrapper.find('[data-file-name="'+ filename +'"]').prop("checked", true);
				});
			}
		})
		this.prepare();
		this.dialog.show();
	},

	get_fields: function() {
		var fields= [
			{label:__("To"), fieldtype:"Data", reqd: 0, fieldname:"recipients",length:524288},
			{fieldtype: "Section Break", collapsible: 1, label: __("CC, BCC & Standard Reply")},
			{label:__("CC"), fieldtype:"Data", fieldname:"cc", length:524288},
			{label:__("BCC"), fieldtype:"Data", fieldname:"bcc", length:524288},
			{label:__("Standard Reply"), fieldtype:"Link", options:"Standard Reply",
				fieldname:"standard_reply"},
			{fieldtype: "Section Break"},
			{label:__("Subject"), fieldtype:"Data", reqd: 1,
				fieldname:"subject", length:524288},
			{fieldtype: "Section Break"},
			{label:__("Message"), fieldtype:"Text Editor", reqd: 1,
				fieldname:"content"},
			{fieldtype: "Section Break"},
			{fieldtype: "Column Break"},
			{label:__("Send As Email"), fieldtype:"Check",
				fieldname:"send_email"},
			{label:__("Send me a copy"), fieldtype:"Check",
				fieldname:"send_me_a_copy", 'default': frappe.boot.user.send_me_a_copy},
			{label:__("Send Read Receipt"), fieldtype:"Check",
				fieldname:"send_read_receipt"},
			{label:__("Communication Medium"), fieldtype:"Select",
				options: ["Phone", "Chat", "Email", "SMS", "Visit", "Other"],
				fieldname:"communication_medium"},
			{label:__("Sent or Received"), fieldtype:"Select",
				options: ["Received", "Sent"],
				fieldname:"sent_or_received"},
			{label:__("Attach Document Print"), fieldtype:"Check",
				fieldname:"attach_document_print"},
			{label:__("Select Print Format"), fieldtype:"Select",
				fieldname:"select_print_format"},
			{label:__("Select Languages"), fieldtype:"Select",
				fieldname:"language_sel"},
			{fieldtype: "Column Break"},
			{label:__("Select Attachments"), fieldtype:"HTML",
				fieldname:"select_attachments"}
		];

		// add from if user has access to multiple email accounts
		var email_accounts = frappe.boot.email_accounts.filter(function(account, idx){
			return !in_list(["All Accounts", "Sent", "Spam", "Trash"], account.email_account) &&
				account.enable_outgoing
		})
		if(frappe.boot.email_accounts && email_accounts.length > 1) {
			fields = [
				{label: __("From"), fieldtype: "Select", reqd: 1, fieldname: "sender",
					options: email_accounts.map(function(e) { return e.email_id; }) }
			].concat(fields);
		}

		return fields;
	},
	prepare: function() {
		this.setup_subject_and_recipients();
		this.setup_print_language()
		this.setup_print();
		this.setup_attach();
		this.setup_email();
		this.setup_awesomplete();
		this.setup_last_edited_communication();
		this.setup_standard_reply();

		this.dialog.fields_dict.recipients.set_value(this.recipients || '');
		this.dialog.fields_dict.cc.set_value(this.cc || '');
		this.dialog.fields_dict.bcc.set_value(this.bcc || '');

		if(this.dialog.fields_dict.sender) {
			this.dialog.fields_dict.sender.set_value(this.sender || '');
		}
		this.dialog.fields_dict.subject.set_value(this.subject || '');
		this.setup_earlier_reply();
	},

	setup_subject_and_recipients: function() {
		this.subject = this.subject || "";

		if(!this.forward && !this.recipients && this.last_email) {
			this.recipients = this.last_email.sender;
			this.cc = this.last_email.cc;
			this.bcc = this.last_email.bcc;
		}

		if(!this.forward && !this.recipients) {
			this.recipients = this.frm && this.frm.timeline.get_recipient();
		}

		if(!this.subject && this.frm) {
			// get subject from last communication
			var last = this.frm.timeline.get_last_email();

			if(last) {
				this.subject = last.subject;
				if(!this.recipients) {
					this.recipients = last.sender;
				}

				// prepend "Re:"
				if(strip(this.subject.toLowerCase().split(":")[0])!="re") {
					this.subject = __("Re: {0}", [this.subject]);
				}
			}

			if (!this.subject) {
				if (this.frm.subject_field && this.frm.doc[this.frm.subject_field]) {
					this.subject = __("Re: {0}", [this.frm.doc[this.frm.subject_field]]);
				} else {
					let title = this.frm.doc.name;
					if(this.frm.meta.title_field && this.frm.doc[this.frm.meta.title_field]
						&& this.frm.doc[this.frm.meta.title_field] != this.frm.doc.name) {
						title = `${this.frm.doc[this.frm.meta.title_field]} (#${this.frm.doc.name})`;
					}
					this.subject = `${__(this.frm.doctype)}: ${title}`;
				}
			}
		}
	},

	setup_standard_reply: function() {
		var me = this;

		this.dialog.fields_dict["standard_reply"].df.onchange = () => {
			var standard_reply = me.dialog.fields_dict.standard_reply.get_value();

			var prepend_reply = function(reply) {
				if(me.reply_added===standard_reply) {
					return;
				}
				var content_field = me.dialog.fields_dict.content;
				var subject_field = me.dialog.fields_dict.subject;
				var content = content_field.get_value() || "";
				var subject = subject_field.get_value() || "";

				var parts = content.split('<!-- salutation-ends -->');

				if(parts.length===2) {
					content = [reply.message, "<br>", parts[1]];
				} else {
					content = [reply.message, "<br>", content];
				}

				content_field.set_value(content.join(''));
				if(subject === "") {
					subject_field.set_value(reply.subject);
				}

				me.reply_added = standard_reply;
			}

			frappe.call({
				method: 'frappe.email.doctype.standard_reply.standard_reply.get_standard_reply',
				args: {
					template_name: standard_reply,
					doc: me.frm.doc
				},
				callback: function(r) {
					prepend_reply(r.message);
				}
			});
		}
	},

	setup_last_edited_communication: function() {
		var me = this;
		if (!this.doc){
			if (cur_frm){
				this.doc = cur_frm.doctype;
			}else{
				this.doc = "Inbox";
			}
		}
		if (cur_frm && cur_frm.docname) {
			this.key = cur_frm.docname;
		} else {
			this.key = "Inbox";
		}
		if(this.last_email) {
			this.key = this.key + ":" + this.last_email.name;
		}
		if(this.subject){
			this.key = this.key + ":" + this.subject;
		}
		this.dialog.onhide = function() {
			var last_edited_communication = me.get_last_edited_communication();
			$.extend(last_edited_communication, {
				sender: me.dialog.get_value("sender"),
				recipients: me.dialog.get_value("recipients"),
				subject: me.dialog.get_value("subject"),
				content: me.dialog.get_value("content"),
			});
		}

		this.dialog.on_page_show = function() {
			if (!me.txt) {
				var last_edited_communication = me.get_last_edited_communication();
				if(last_edited_communication.content) {
					me.dialog.set_value("sender", last_edited_communication.sender || "");
					me.dialog.set_value("subject", last_edited_communication.subject || "");
					me.dialog.set_value("recipients", last_edited_communication.recipients || "");
					me.dialog.set_value("content", last_edited_communication.content || "");
				}
			}

		}

	},

	get_last_edited_communication: function() {
		if (!frappe.last_edited_communication[this.doc]) {
			frappe.last_edited_communication[this.doc] = {};
		}

		if(!frappe.last_edited_communication[this.doc][this.key]) {
			frappe.last_edited_communication[this.doc][this.key] = {};
		}

		return frappe.last_edited_communication[this.doc][this.key];
	},

	setup_print_language: function() {
		var me = this;
		var doc = this.doc || cur_frm.doc;
		var fields = this.dialog.fields_dict;

		//Load default print language from doctype
		this.lang_code = doc.language

		//On selection of language retrieve language code
		$(fields.language_sel.input).change(function(){
			me.lang_code = this.value
		})

		// Load all languages in the select field language_sel
		$(fields.language_sel.input)
			.empty()
			.add_options(frappe.get_languages())
			.val(doc.language)
	},

	setup_print: function() {
		// print formats
		var fields = this.dialog.fields_dict;

		// toggle print format
		$(fields.attach_document_print.input).click(function() {
			$(fields.select_print_format.wrapper).toggle($(this).prop("checked"));
		});

		// select print format
		$(fields.select_print_format.wrapper).toggle(false);

		if (cur_frm) {
			$(fields.select_print_format.input)
				.empty()
				.add_options(cur_frm.print_preview.print_formats)
				.val(cur_frm.print_preview.print_formats[0]);
		} else {
			$(fields.attach_document_print.wrapper).toggle(false);
		}

	},
	setup_attach: function() {
		var fields = this.dialog.fields_dict;
		var attach = $(fields.select_attachments.wrapper);

		var me = this
		if (!me.attachments){
			me.attachments = []
		}

		var args = {
			args: {
				from_form: 1,
				folder:"Home/Attachments"
			},
			callback: function(attachment, r) { me.attachments.push(attachment); },
			max_width: null,
			max_height: null
		};

		if(me.frm) {
			args = {
				args: (me.frm.attachments.get_args
					? me.frm.attachments.get_args()
					: { from_form: 1,folder:"Home/Attachments" }),
				callback: function (attachment, r) {
					me.frm.attachments.attachment_uploaded(attachment, r)
				},
				max_width: me.frm.cscript ? me.frm.cscript.attachment_max_width : null,
				max_height: me.frm.cscript ? me.frm.cscript.attachment_max_height : null
			}

		}

		$("<h6 class='text-muted add-attachment' style='margin-top: 12px; cursor:pointer;'>"
			+__("Select Attachments")+"</h6><div class='attach-list'></div>\
			<p class='add-more-attachments'>\
			<a class='text-muted small'><i class='octicon octicon-plus' style='font-size: 12px'></i> "
			+__("Add Attachment")+"</a></p>").appendTo(attach.empty())
		attach.find(".add-more-attachments a").on('click',this,function() {
			me.upload = frappe.ui.get_upload_dialog(args);
		})
		me.render_attach()

	},
	render_attach:function(){
		var fields = this.dialog.fields_dict;
		var attach = $(fields.select_attachments.wrapper).find(".attach-list").empty();

		var files = [];
		if (this.attachments && this.attachments.length) {
			files = files.concat(this.attachments);
		}
		if (cur_frm) {
			files = files.concat(cur_frm.get_files());
		}

		if(files.length) {
			$.each(files, function(i, f) {
				if (!f.file_name) return;
				f.file_url = frappe.urllib.get_full_url(f.file_url);

				$(repl('<p class="checkbox">'
					+	'<label><span><input type="checkbox" data-file-name="%(name)s"></input></span>'
					+		'<span class="small">%(file_name)s</span>'
					+	' <a href="%(file_url)s" target="_blank" class="text-muted small">'
					+		'<i class="fa fa-share" style="vertical-align: middle; margin-left: 3px;"></i>'
					+ '</label></p>', f))
					.appendTo(attach)
			});
		}
	},
	setup_email: function() {
		// email
		var me = this;
		var fields = this.dialog.fields_dict;

		if(this.attach_document_print) {
			$(fields.attach_document_print.input).click();
			$(fields.select_print_format.wrapper).toggle(true);
		}

		$(fields.send_email.input).prop("checked", true);

		$(fields.send_me_a_copy.input).on('click', () => {
			// update send me a copy (make it sticky)
			let val = fields.send_me_a_copy.get_value();
			frappe.db.set_value('User', frappe.session.user, 'send_me_a_copy', val);
			frappe.boot.user.send_me_a_copy = val;
		});

		// toggle print format
		$(fields.send_email.input).click(function() {
			$(fields.communication_medium.wrapper).toggle(!!!$(this).prop("checked"));
			$(fields.sent_or_received.wrapper).toggle(!!!$(this).prop("checked"));
			$(fields.send_read_receipt.wrapper).toggle($(this).prop("checked"));
			me.dialog.get_primary_btn().html($(this).prop("checked") ? "Send" : "Add Communication");
		});

		// select print format
		$(fields.communication_medium.wrapper).toggle(false);
		$(fields.sent_or_received.wrapper).toggle(false);

	},

	send_action: function() {
		var me = this;
		var btn = me.dialog.get_primary_btn();

		var form_values = this.get_values();
		if(!form_values) return;

		var selected_attachments =
			$.map($(me.dialog.wrapper)
			.find("[data-file-name]:checked"), function (element) {
				return $(element).attr("data-file-name");
			});


		if(form_values.attach_document_print) {
			if (cur_frm.print_preview.is_old_style(form_values.select_print_format || "")) {
				cur_frm.print_preview.with_old_style({
					format: form_values.select_print_format,
					callback: function(print_html) {
						me.send_email(btn, form_values, selected_attachments, print_html);
					}
				});
			} else {
				me.send_email(btn, form_values, selected_attachments, null, form_values.select_print_format || "");
			}

		} else {
			me.send_email(btn, form_values, selected_attachments);
		}
	},

	get_values: function() {
		var form_values = this.dialog.get_values();

		// cc
		for ( var i=0, l=this.dialog.fields.length; i < l; i++ ) {
			var df = this.dialog.fields[i];

			if ( df.is_cc_checkbox ) {
				// concat in cc
				if ( form_values[df.fieldname] ) {
					form_values.cc = ( form_values.cc ? (form_values.cc + ", ") : "" ) + df.fieldname;
					form_values.bcc = ( form_values.bcc ? (form_values.bcc + ", ") : "" ) + df.fieldname;
				}

				delete form_values[df.fieldname];
			}
		}

		return form_values;
	},

	send_email: function(btn, form_values, selected_attachments, print_html, print_format) {
		var me = this;
		me.dialog.hide();

		if((form_values.send_email || form_values.communication_medium === "Email") && !form_values.recipients) {
			frappe.msgprint(__("Enter Email Recipient(s)"));
			return;
		}

		if(!form_values.attach_document_print) {
			print_html = null;
			print_format = null;
		}

		if(form_values.send_email) {
			if(cur_frm && !frappe.model.can_email(me.doc.doctype, cur_frm)) {
				frappe.msgprint(__("You are not allowed to send emails related to this document"));
				return;
			}

			form_values.communication_medium = "Email";
			form_values.sent_or_received = "Sent";
		}

		return frappe.call({
			method:"frappe.core.doctype.communication.email.make",
			args: {
				recipients: form_values.recipients,
				cc: form_values.cc,
				bcc: form_values.bcc,
				subject: form_values.subject,
				content: form_values.content,
				doctype: me.doc.doctype,
				name: me.doc.name,
				send_email: form_values.send_email,
				print_html: print_html,
				send_me_a_copy: form_values.send_me_a_copy,
				print_format: print_format,
				communication_medium: form_values.communication_medium,
				sent_or_received: form_values.sent_or_received,
				sender: form_values.sender,
				sender_full_name: form_values.sender?frappe.user.full_name():undefined,
				attachments: selected_attachments,
				_lang : me.lang_code,
				read_receipt:form_values.send_read_receipt,
				print_letterhead: me.is_print_letterhead_checked(),
			},
			btn: btn,
			callback: function(r) {
				if(!r.exc) {
					frappe.utils.play_sound("email");

					if(form_values.send_email && r.message["emails_not_sent_to"]) {
						frappe.msgprint(__("Email not sent to {0} (unsubscribed / disabled)",
							[ frappe.utils.escape_html(r.message["emails_not_sent_to"]) ]) );
					}

					if ((frappe.last_edited_communication[me.doc] || {})[me.key]) {
						delete frappe.last_edited_communication[me.doc][me.key];
					}
					if (cur_frm) {
						// clear input
						cur_frm.timeline.input && cur_frm.timeline.input.val("");
						cur_frm.reload_doc();
					}

					// try the success callback if it exists
					if (me.success) {
						try {
							me.success(r);
						} catch (e) {
							console.log(e);
						}
					}

				} else {
					frappe.msgprint(__("There were errors while sending email. Please try again."));

					// try the error callback if it exists
					if (me.error) {
						try {
							me.error(r);
						} catch (e) {
							console.log(e);
						}
					}
				}
			}
		});
	},

	is_print_letterhead_checked: function() {
		if (this.frm && $(this.frm.wrapper).find('.form-print-wrapper').is(':visible')){
			return $(this.frm.wrapper).find('.print-letterhead').prop('checked') ? 1 : 0;
		} else {
			return (frappe.model.get_doc(":Print Settings", "Print Settings") ||
				{ with_letterhead: 1 }).with_letterhead ? 1 : 0;
		}
	},

	setup_earlier_reply: function() {
		var fields = this.dialog.fields_dict,
			signature = frappe.boot.user.email_signature || "",
			last_email = this.last_email;

		if(!last_email) {
			last_email = this.frm && this.frm.timeline.get_last_email(true);
		}

		if(!frappe.utils.is_html(signature)) {
			signature = signature.replace(/\n/g, "<br>");
		}

		if(this.txt) {
			this.message = this.txt + (this.message ? ("<br><br>" + this.message) : "");
		}

		if(this.real_name) {
			this.message = '<p>'+__('Dear') +' '
				+ this.real_name + ",</p><!-- salutation-ends --><br>" + (this.message || "");
		}

		var reply = (this.message || "")
			+ (signature ? ("<br>" + signature) : "");
		var content = '';

		if(last_email) {
			var last_email_content = last_email.original_comment || last_email.content;

			last_email_content = last_email_content
				.replace(/&lt;meta[\s\S]*meta&gt;/g, '') // remove <meta> tags
				.replace(/&lt;style[\s\S]*&lt;\/style&gt;/g, ''); // // remove <style> tags

			var communication_date = last_email.communication_date || last_email.creation;
			content = '<div><br></div>'
				+ reply
				+ "<br><!-- original-reply --><br>"
				+ '<blockquote>' +
					'<p>' + __("On {0}, {1} wrote:",
					[frappe.datetime.global_date_format(communication_date) , last_email.sender]) + '</p>' +
					last_email_content +
				'<blockquote>';
		} else {
			content = "<div><br></div>" + reply;
		}
		fields.content.set_value(content);
	},
	setup_awesomplete: function() {
		var me = this;
		[
			this.dialog.fields_dict.recipients.input,
			this.dialog.fields_dict.cc.input,
			this.dialog.fields_dict.bcc.input
		].map(function(input) {
			me.setup_awesomplete_for_input(input);
		});
	},
	setup_awesomplete_for_input: function(input) {
		function split(val) {
			return val.split( /,\s*/ );
		}
		function extractLast(term) {
			return split(term).pop();
		}

		var awesomplete = new Awesomplete(input, {
			minChars: 0,
			maxItems: 99,
			autoFirst: true,
			list: [],
			item: function(item, input) {
				return $('<li>').text(item.value).get(0);
			},
			filter: function(text, input) { return true },
			replace: function(text) {
				var before = this.input.value.match(/^.+,\s*|/)[0];
				this.input.value = before + text + ", ";
			}
		});
		var delay_timer;
		var $input = $(input);
		$input.on("input", function(e) {
			clearTimeout(delay_timer);
			delay_timer = setTimeout(function() {
				var term = e.target.value;
				frappe.call({
					method:'frappe.email.get_contact_list',
					args: {
						'txt': extractLast(term) || '%'
					},
					quiet: true,
					callback: function(r) {
						awesomplete.list = r.message || [];
					}
				});
			},250);
		});
	}
});

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/sort_selector.html
 */
frappe.templates['sort_selector'] = '<div class="sort-selector pull-right">  <button class="btn btn-default btn-xs pull-right btn-order"   data-value="{{ sort_order }}" style="margin-left: 10px;">    <span class="octicon text-muted octicon-arrow-{{     sort_order==="desc" ? "down" : "up" }}"></span></button>  <div class="dropdown pull-right">    <a class="text-muted dropdown-toggle small"     data-toggle="dropdown" aria-haspopup="true" aria-expanded="true">      <span class="dropdown-text">{{ __(sort_by_label) }}</span>    </a>    <ul class="dropdown-menu" style="max-height: 300px; overflow-y: scroll;">   {% for value in options %}      <li><a class="option" data-value="{{ value.fieldname }}">    {{ __(value.label) }}</a></li>   {% endfor %}    </ul>   </div> </div>';

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/sort_selector.js
 */
frappe.ui.SortSelector = Class.extend({
	// parent:
	// change:
	// args:
	//		options: {fieldname:, label:}
	//		sort_by:
	//		sort_by_label:
	//		sort_order:
	//		doctype: (optional)
	init: function(opts) {
		$.extend(this, opts);
		this.labels = {};
		this.make();
	},
	make: function() {
		this.prepare_args();
		this.parent.find('.sort-selector').remove();
		this.wrapper = $(frappe.render_template('sort_selector', this.args)).appendTo(this.parent);
		this.bind_events();
	},
	bind_events: function() {
		var me = this;

		// order
		this.wrapper.find('.btn-order').on('click', function() {
			var btn = $(this);
			var order = $(this).attr('data-value')==='desc' ? 'asc' : 'desc';

			btn.attr('data-value', order);
			me.sort_order = order;
			btn.find('.octicon')
				.removeClass('octicon-arrow-' + (order==='asc' ? 'down' : 'up'))
				.addClass('octicon-arrow-' + (order==='desc' ? 'down' : 'up'));
			(me.onchange || me.change)(me.sort_by, me.sort_order);
		});

		// select field
		this.wrapper.find('.dropdown a.option').on('click', function() {
			me.sort_by = $(this).attr('data-value');
			me.wrapper.find('.dropdown .dropdown-text').html($(this).html());
			(me.onchange || me.change)(me.sort_by, me.sort_order);
		});

	},
	prepare_args: function() {
		var me = this;
		if(!this.args) {
			this.args = {};
		}

		// args as string
		if(this.args && typeof this.args === 'string') {
			var order_by = this.args;
			this.args = {}

			if (order_by.includes('`.`')) {
				// scrub table name (separated by dot), like `tabTime Log`.`modified` desc`
				order_by = order_by.split('.')[1];
			}

			var parts = order_by.split(' ');
			if (parts.length === 2) {
				var fieldname = strip(parts[0], '`');

				this.args.sort_by = fieldname;
				this.args.sort_order = parts[1];
			}
		}

		if(this.args.options) {
			this.args.options.forEach(function(o) {
				me.labels[o.fieldname] = o.label;
			});
		}

		this.setup_from_doctype();

		// if label is missing, add from options
		if(this.args.sort_by && !this.args.sort_by_label) {
			this.args.options.every(function(o) {
				if(o.fieldname===me.args.sort_by) {
					me.args.sort_by_label = o.label;
					return false;
				}
				return true;
			});
		}

	},
	setup_from_doctype: function() {
		var me = this;
		var meta = frappe.get_meta(this.doctype);
		if (!meta) return;

		var { meta_sort_field, meta_sort_order } = this.get_meta_sort_field();

		if(!this.args.sort_by) {
			if(meta_sort_field) {
				this.args.sort_by = meta_sort_field;
				this.args.sort_order = meta_sort_order;
			} else {
				// default
				this.args.sort_by = 'modified';
				this.args.sort_order = 'desc';
			}
		}

		if(!this.args.sort_by_label) {
			this.args.sort_by_label = this.get_label(this.args.sort_by);
		}

		if(!this.args.options) {
			// default options
			var _options = [
				{'fieldname': 'modified'}
			]

			// title field
			if(meta.title_field) {
				_options.push({'fieldname': meta.title_field});
			}

			// bold or mandatory
			meta.fields.forEach(function(df) {
				if(df.mandatory || df.bold) {
					_options.push({fieldname: df.fieldname, label: df.label});
				}
			});

			// meta sort field
			if(meta_sort_field) _options.push({ 'fieldname': meta_sort_field });

			// more default options
			_options.push(
				{'fieldname': 'name'},
				{'fieldname': 'creation'},
				{'fieldname': 'idx'}
			)

			// de-duplicate
			this.args.options = _options.uniqBy(function(obj) {
				return obj.fieldname;
			});

			// add missing labels
			this.args.options.forEach(function(o) {
				if(!o.label) {
					o.label = me.get_label(o.fieldname);
				}
			});
		}

		// set default
		this.sort_by = this.args.sort_by;
		this.sort_order = this.args.sort_order;
	},
	get_meta_sort_field: function() {
		var meta = frappe.get_meta(this.doctype);

		if (!meta) {
			return {
				meta_sort_field: null,
				meta_sort_order: null
			}
		}

		if(meta.sort_field && meta.sort_field.includes(',')) {
			var parts = meta.sort_field.split(',')[0].split(' ');
			return {
				meta_sort_field: parts[0],
				meta_sort_order: parts[1]
			}
		} else {
			return {
				meta_sort_field: meta.sort_field || 'modified',
				meta_sort_order: meta.sort_order ? meta.sort_order.toLowerCase() : ''
			}
		}
	},
	get_label: function(fieldname) {
		if(fieldname==='idx') {
			return __("Most Used");
		} else {
			return this.labels[fieldname]
				|| frappe.meta.get_label(this.doctype, fieldname);
		}
	}
})

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/change_log.html
 */
frappe.templates['change_log'] = '{% for (var i=0, l=change_log.length; i < l; i++) {     var app_info = change_log[i]; %}  {% if (i > 0) { %} <hr> {% } %}  <div class="text-left app-change-log">   <h2 style="margin-top: 10px;">             {{ app_info.title }}    <small>{{ __("updated to {0}", [app_info.version]) }}</small>   </h2>   {% for (var x=0, y=app_info.change_log.length; x < y; x++) {             var version_info = app_info.change_log[x];             if(version_info) { %}        <p>{{ frappe.markdown(version_info[1]) }}</p>       {% }         } %}  </div> {% } %} ';

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/desk.js
 */
// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors
// MIT License. See license.txt

frappe.start_app = function() {
	if(!frappe.Application)
		return;
	frappe.assets.check();
	frappe.provide('frappe.app');
	frappe.app = new frappe.Application();
}

$(document).ready(function() {
	if(!frappe.utils.supportsES6) {
		frappe.msgprint({
			indicator: 'red',
			title: __('Browser not supported'),
			message: __('Some of the features might not work in your browser. Please update your browser to the latest version.')
		});
	}
	frappe.start_app();
});

frappe.Application = Class.extend({
	init: function() {
		this.load_startup();
	},

	load_startup: function() {
		this.startup();
	},
	startup: function() {
		frappe.socketio.init();
		frappe.model.init();

		if(frappe.boot.status==='failed') {
			frappe.msgprint({
				message: frappe.boot.error,
				title: __('Session Start Failed'),
				indicator: 'red',
			})
			throw 'boot failed';
		}

		this.load_bootinfo();
		this.make_nav_bar();
		this.set_favicon();
		this.setup_analytics();
		frappe.ui.keys.setup();
		this.set_rtl();

		if(frappe.boot) {
			if(localStorage.getItem("session_last_route")) {
				window.location.hash = localStorage.getItem("session_last_route");
				localStorage.removeItem("session_last_route");
			}

		}

		// page container
		this.make_page_container();

		// route to home page
		frappe.route();

		// trigger app startup
		$(document).trigger('startup');

		this.start_notification_updates();

		$(document).trigger('app_ready');

		if (frappe.boot.messages) {
			frappe.msgprint(frappe.boot.messages);
		}

		if (frappe.boot.change_log && frappe.boot.change_log.length) {
			this.show_change_log();
		} else {
			this.show_notes();
		}

		// listen to csrf_update
		frappe.realtime.on("csrf_generated", function(data) {
			// handles the case when a user logs in again from another tab
			// and it leads to invalid request in the current tab
			if (data.csrf_token && data.sid===frappe.get_cookie("sid")) {
				frappe.csrf_token = data.csrf_token;
			}
		});

		frappe.realtime.on("version-update", function() {
			var dialog = frappe.msgprint({
				message:__("The application has been updated to a new version, please refresh this page"),
				indicator: 'green',
				title: __('Version Updated')
			});
			dialog.set_primary_action(__("Refresh"), function() {
				location.reload(true);
			});
			dialog.get_close_btn().toggle(false);
		});
		if (frappe.sys_defaults.email_user_password){
			var email_list =  frappe.sys_defaults.email_user_password.split(',');
			for (var u in email_list) {
				if (email_list[u]===frappe.user.name){
					this.set_password(email_list[u])
				}
			}
		}

	},
	set_password: function (user) {
		var me=this
		frappe.call({
			method: 'frappe.core.doctype.user.user.get_email_awaiting',
			args: {
				"user": user
			},
			callback: function (email_account) {
				email_account = email_account["message"];
				if (email_account) {
					var i = 0;
					if (i < email_account.length) {
						me.email_password_prompt( email_account, user, i);
					}
				}
			}
		});
	},

	email_password_prompt: function(email_account,user,i) {
		var me = this
		var d = new frappe.ui.Dialog({
			title: __('Email Account setup please enter your password for: '+email_account[i]["email_id"]),
			fields: [
				{	'fieldname': 'password',
					'fieldtype': 'Password',
					'label': 'Email Account Password',
					'reqd': 1
				},
				{
					"fieldtype": "Button",
					"label": __("Submit")
				}
			]
		});
		d.get_input("submit").on("click", function() {
			//setup spinner
			d.hide();
			var s = new frappe.ui.Dialog({
				title: __("Checking one moment"),
				fields: [{
					"fieldtype": "HTML",
					"fieldname": "checking"
				}]
			});
			s.fields_dict.checking.$wrapper.html('<i class="fa fa-spinner fa-spin fa-4x"></i>')
			s.show();
			frappe.call({
				method: 'frappe.core.doctype.user.user.set_email_password',
				args: {
					"email_account": email_account[i]["email_account"],
					"user": user,
					"password": d.get_value("password")
				},
				callback: function (passed)
				{
					s.hide();
					d.hide();//hide waiting indication
					if (!passed["message"])
					{
						frappe.show_alert("Login Failed please try again", 5);
						me.email_password_prompt(email_account, user, i)
					}
					else
					{
						if (i + 1 < email_account.length)
						{
							i = i + 1;
							me.email_password_prompt(email_account, user, i)
						}
					}

				}
			});
		});
		d.show();
	},
	load_bootinfo: function() {
		if(frappe.boot) {
			frappe.modules = {};
			frappe.boot.desktop_icons.forEach(function(m) { frappe.modules[m.module_name]=m; });
			frappe.model.sync(frappe.boot.docs);
			$.extend(frappe._messages, frappe.boot.__messages);
			this.check_metadata_cache_status();
			this.set_globals();
			this.sync_pages();
			moment.locale("en");
			moment.user_utc_offset = moment().utcOffset();
			if(frappe.boot.timezone_info) {
				moment.tz.add(frappe.boot.timezone_info);
			}
			if(frappe.boot.print_css) {
				frappe.dom.set_style(frappe.boot.print_css, "print-style");
			}
			frappe.user.name = frappe.boot.user.name;
		} else {
			this.set_as_guest();
		}
	},

	check_metadata_cache_status: function() {
		if(frappe.boot.metadata_version != localStorage.metadata_version) {
			frappe.assets.clear_local_storage();
			frappe.assets.init_local_storage();
		}
	},

	start_notification_updates: function() {
		var me = this;
		setInterval(function() {
			me.refresh_notifications();
		}, 30000);

		// first time loaded in boot
		$(document).trigger("notification-update");

		// refresh notifications if user is back after sometime
		$(document).on("session_alive", function() {
			me.refresh_notifications();
		})
	},

	refresh_notifications: function() {
		var me = this;
		if(frappe.session_alive && frappe.boot && !frappe.boot.in_setup_wizard) {
			return frappe.call({
				method: "frappe.desk.notifications.get_notifications",
				callback: function(r) {
					if(r.message) {
						$.extend(frappe.boot.notification_info, r.message);
						$(document).trigger("notification-update");

						// update in module views
						me.update_notification_count_in_modules();

						if(frappe.get_route()[0] != "messages") {
							if(r.message.new_messages.length) {
								frappe.utils.set_title_prefix("(" + r.message.new_messages.length + ")");
							}
						}
					}
				},
				freeze: false
			});
		}
	},

	update_notification_count_in_modules: function() {
		$.each(frappe.boot.notification_info.open_count_doctype, function(doctype, count) {
			if(count) {
				$('.open-notification.global[data-doctype="'+ doctype +'"]')
					.removeClass("hide").html(count > 99 ? "99+" : count);
			} else {
				$('.open-notification.global[data-doctype="'+ doctype +'"]')
					.addClass("hide");
			}
		});
	},

	set_globals: function() {
		frappe.session.user = frappe.boot.user.name;
		frappe.session.user_email = frappe.boot.user.email;
		frappe.session.user_fullname = frappe.user_info().fullname;

		frappe.user_defaults = frappe.boot.user.defaults;
		frappe.user_roles = frappe.boot.user.roles;
		frappe.sys_defaults = frappe.boot.sysdefaults;

		frappe.ui.py_date_format = frappe.boot.sysdefaults.date_format.replace('dd', '%d').replace('mm', '%m').replace('yyyy', '%Y');
		frappe.boot.user.last_selected_values = {};

		// Proxy for user globals
		Object.defineProperties(window, {
			'user': {
				get: function() {
					console.warn('Please use `frappe.session.user` instead of `user`. It will be deprecated soon.');
					return frappe.session.user;
				}
			},
			'user_fullname': {
				get: function() {
					console.warn('Please use `frappe.session.user_fullname` instead of `user_fullname`. It will be deprecated soon.');
					return frappe.session.user;
				}
			},
			'user_email': {
				get: function() {
					console.warn('Please use `frappe.session.user_email` instead of `user_email`. It will be deprecated soon.');
					return frappe.session.user_email;
				}
			},
			'user_defaults': {
				get: function() {
					console.warn('Please use `frappe.user_defaults` instead of `user_defaults`. It will be deprecated soon.');
					return frappe.user_defaults;
				}
			},
			'roles': {
				get: function() {
					console.warn('Please use `frappe.user_roles` instead of `roles`. It will be deprecated soon.');
					return frappe.user_roles;
				}
			},
			'sys_defaults': {
				get: function() {
					console.warn('Please use `frappe.sys_defaults` instead of `sys_defaults`. It will be deprecated soon.');
					return frappe.user_roles;
				}
			}
		});
	},
	sync_pages: function() {
		// clear cached pages if timestamp is not found
		if(localStorage["page_info"]) {
			frappe.boot.allowed_pages = [];
			var page_info = JSON.parse(localStorage["page_info"]);
			$.each(frappe.boot.page_info, function(name, p) {
				if(!page_info[name] || (page_info[name].modified != p.modified)) {
					delete localStorage["_page:" + name];
				}
				frappe.boot.allowed_pages.push(name);
			});
		} else {
			frappe.boot.allowed_pages = Object.keys(frappe.boot.page_info);
		}
		localStorage["page_info"] = JSON.stringify(frappe.boot.page_info);
	},
	set_as_guest: function() {
		frappe.session.user = 'Guest';
		frappe.session.user_email = '';
		frappe.session.user_fullname = 'Guest';

		frappe.user_defaults = {};
		frappe.user_roles = ['Guest'];
		frappe.sys_defaults = {};
	},
	make_page_container: function() {
		if($("#body_div").length) {
			$(".splash").remove();
			frappe.temp_container = $("<div id='temp-container' style='display: none;'>")
				.appendTo("body");
			frappe.container = new frappe.views.Container();
		}
	},
	make_nav_bar: function() {
		// toolbar
		if(frappe.boot && !frappe.boot.in_setup_wizard) {
			frappe.frappe_toolbar = new frappe.ui.toolbar.Toolbar();
		}

	},
	logout: function() {
		var me = this;
		me.logged_out = true;
		return frappe.call({
			method:'logout',
			callback: function(r) {
				if(r.exc) {
					return;
				}
				me.redirect_to_login();
			}
		})
	},
	handle_session_expired: function() {
		if(!frappe.app.session_expired_dialog) {
			var dialog = new frappe.ui.Dialog({
				title: __('Session Expired'),
				keep_open: true,
				fields: [
					{ fieldtype:'Password', fieldname:'password',
						label: __('Please Enter Your Password to Continue') },
				],
				onhide: () => {
					if (!dialog.logged_in) {
						frappe.app.redirect_to_login();
					}
				}
			});
			dialog.set_primary_action(__('Login'), () => {
				frappe.call({
					method: 'login',
					args: {
						usr: frappe.session.user,
						pwd: dialog.get_values().password
					},
					callback: (r) => {
						if (r.message==='Logged In') {
							dialog.logged_in = true;

							// revert backdrop
							$('.modal-backdrop').css({
								'opacity': '',
								'background-color': '#334143'
							});
						}
						dialog.hide();
					},
					statusCode: () => {
						dialog.hide();
					}
				});
			});
			frappe.app.session_expired_dialog = dialog;
		}
		if(!frappe.app.session_expired_dialog.display) {
			frappe.app.session_expired_dialog.show();
			// add backdrop
			$('.modal-backdrop').css({
				'opacity': 1,
				'background-color': '#4B4C9D'
			});
		}
	},
	redirect_to_login: function() {
		window.location.href = '/';
	},
	set_favicon: function() {
		var link = $('link[type="image/x-icon"]').remove().attr("href");
		$('<link rel="shortcut icon" href="' + link + '" type="image/x-icon">').appendTo("head");
		$('<link rel="icon" href="' + link + '" type="image/x-icon">').appendTo("head");
	},

	trigger_primary_action: function() {
		if(cur_dialog && cur_dialog.display) {
			// trigger primary
			cur_dialog.get_primary_btn().trigger("click");
		} else if(cur_frm && cur_frm.page.btn_primary.is(':visible')) {
			cur_frm.page.btn_primary.trigger('click');
		} else if(frappe.container.page.save_action) {
			frappe.container.page.save_action();
		}
	},

	set_rtl: function () {
		if (["ar", "he", "fa"].indexOf(frappe.boot.lang) >= 0) {
			var ls = document.createElement('link');
			ls.rel="stylesheet";
			ls.href= "assets/css/frappe-rtl.css";
			document.getElementsByTagName('head')[0].appendChild(ls);
			$('body').addClass('frappe-rtl')
		}
	},

	show_change_log: function() {
		var me = this;
		var d = frappe.msgprint(
			frappe.render_template("change_log", {"change_log": frappe.boot.change_log}),
			__("Updated To New Version")
		);
		d.keep_open = true;
		d.custom_onhide = function() {
			frappe.call({
				"method": "frappe.utils.change_log.update_last_known_versions"
			});
			me.show_notes();
		};
	},

	setup_analytics: function() {
		if(window.mixpanel) {
			window.mixpanel.identify(frappe.session.user);
			window.mixpanel.people.set({
				"$first_name": frappe.boot.user.first_name,
				"$last_name": frappe.boot.user.last_name,
				"$created": frappe.boot.user.creation,
				"$email": frappe.session.user
			});
		}
	},

	show_notes: function() {
		var me = this;
		if(frappe.boot.notes.length) {
			frappe.boot.notes.forEach(function(note) {
				if(!note.seen || note.notify_on_every_login) {
					var d = frappe.msgprint({message:note.content, title:note.title});
					d.keep_open = true;
					d.custom_onhide = function() {
						note.seen = true;

						// Mark note as read if the Notify On Every Login flag is not set
						if (!note.notify_on_every_login) {
							frappe.call({
								method: "frappe.desk.doctype.note.note.mark_as_seen",
								args: {
									note: note.name
								}
							});
						}

						// next note
						me.show_notes();

					}
				}
			})
		}
	},
});

frappe.get_module = function(m, default_module) {
	var module = frappe.modules[m] || default_module;
	if (!module) {
		return;
	}

	if(module._setup) {
		return module;
	}

	if(module.type==="module" && !module.link) {
		module.link = "modules/" + module.module_name;
	}

	if(module.type==="list" && !module.link) {
		module.link = "List/" + module._doctype;
	}

	if (!module.link) module.link = "";

	if (!module._id) {
		module._id = module.link.toLowerCase().replace("/", "-").replace(' ', '-');
	}


	if(!module.label) {
		module.label = m;
	}

	if(!module._label) {
		module._label = __(module.label);
	}

	if(!module._doctype) {
		module._doctype = '';
	}

	module._setup = true;

	return module;
};

frappe.get_desktop_icons = function(show_hidden, show_global) {
	// filter valid icons

	// hidden == hidden from desktop
	// blocked == no view from modules either

	var out = [];

	var add_to_out = function(module) {
		var module = frappe.get_module(module.module_name, module);
		module.app_icon = frappe.ui.app_icon.get_html(module);
		out.push(module);
	}

	var show_module = function(m) {
		var out = true;
		if(m.type==="page") {
			out = m.link in frappe.boot.page_info;
		} else if(m._report) {
			out = m._report in frappe.boot.user.all_reports
		} else if(m._doctype) {
			//out = frappe.model.can_read(m._doctype);
			out = frappe.boot.user.can_read.includes(m._doctype);
		} else {
			if(m.module_name==='Learn') {
				// no permissions necessary for learn
				out = true;
			} else if(m.module_name==='Setup' && frappe.user.has_role('System Manager')) {
				out = true;
			} else {
				out = frappe.boot.user.allow_modules.indexOf(m.module_name) !== -1
			}
		}
		if(m.hidden && !show_hidden) {
			out = false;
		}
		if(m.blocked && !show_global) {
			out = false;
		}
		return out;
	}

	for (var i=0, l=frappe.boot.desktop_icons.length; i < l; i++) {
		var m = frappe.boot.desktop_icons[i];
		if ((['Setup', 'Core'].indexOf(m.module_name) === -1) && show_module(m)) {
			add_to_out(m);
		}
	}

	if(frappe.user_roles.includes('System Manager')) {
		var m = frappe.get_module('Setup');
		if(show_module(m)) add_to_out(m);
	}

	if(frappe.user_roles.includes('Administrator')) {
		var m = frappe.get_module('Core');
		if(show_module(m)) add_to_out(m);
	}

	return out;
};

frappe.add_to_desktop = function(label, doctype, report) {
	frappe.call({
		method: 'frappe.desk.doctype.desktop_icon.desktop_icon.add_user_icon',
		args: {
			'link': frappe.get_route_str(),
			'label': label,
			'type': 'link',
			'_doctype': doctype,
			'_report': report
		},
		callback: function(r) {
			if(r.message) {
				frappe.show_alert(__("Added"));
			}
		}
	});
}

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/query_string.js
 */
frappe.provide('frappe.utils');

function get_url_arg(name) {
	return get_query_params()[name] || "";
}

function get_query_params(query_string) {
	var query_params = {};
	if (!query_string) {
		query_string = location.search.substring(1);
	}

	var query_list = query_string.split("&");
	for (var i=0, l=query_list.length; i < l; i++ ){
		var pair = query_list[i].split("=");
		var key = pair[0];
		if (!key) {
			continue;
		}

		var value = pair[1];
		if (typeof value === "string") {
			value = value.replace(/\+/g, "%20");
			value = decodeURIComponent(value);
		}

		if (key in query_params) {
			if (typeof query_params[key] === "undefined") {
				query_params[key] = [];
			} else if (typeof query_params[key] === "string") {
				query_params[key] = [query_params[key]];
			}
			query_params[key].push(value);
		} else {
			query_params[key] = value;
		}
	}
	return query_params;
}

function make_query_string(obj, encode=true) {
	let query_params = [];
	for (let key in obj) {
		let value = obj[key];
		if (value === undefined || value === '' || value === null) {
			continue;
		}
		if (typeof value === 'object') {
			value = JSON.stringify(value);
		}

		if (encode) {
			key = encodeURIComponent(key);
			value = encodeURIComponent(value);
		}

		query_params.push(`${key}=${value}`);
	}
	return '?' + query_params.join('&');
}

Object.assign(frappe.utils, {
	get_url_arg,
	get_query_params,
	make_query_string
});
/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/ui/comment.js
 */
/**
 * CommentArea: A small rich text editor with
 * support for @mentions and :emojis:
 * @example
 * let comment_area = new frappe.ui.CommentArea({
 *     parent: '.comment-area',
 *     mentions: ['john', 'mary', 'kate'],
 *     on_submit: (value) => save_to_database(value)
 * });
 */

frappe.ui.CommentArea = class CommentArea {

	constructor({ parent = null, mentions = [], on_submit = null, no_wrapper = false }) {
		this.parent = $(parent);
		this.mentions = mentions;
		this.on_submit = on_submit;
		this.no_wrapper = no_wrapper;

		this.make();
	}

	make() {
		this.setup_dom();
		this.setup_summernote();
		this.bind_events();
	}

	setup_dom() {
		const header = !this.no_wrapper ?
			`<div class="comment-input-header">
				<span class="small text-muted">${__("Add a comment")}</span>
				<button class="btn btn-default btn-comment btn-xs pull-right">
					${__("Comment")}
				</button>
			</div>` : '';

		const footer = !this.no_wrapper ?
			`<div class="text-muted small">
				${__("Ctrl+Enter to add comment")}
			</div>` : '';

		this.wrapper = $(`
			<div class="comment-input-wrapper">
				${ header }
				<div class="comment-input-container">
					<div class="form-control comment-input"></div>
					${ footer }
				</div>
			</div>
		`);
		this.wrapper.appendTo(this.parent);
		this.input = this.parent.find('.comment-input');
		this.button = this.parent.find('.btn-comment');
	}

	setup_summernote() {
		const { input, button } = this;

		input.summernote({
			height: 100,
			toolbar: false,
			airMode: true,
			hint: {
				mentions: this.mentions,
				match: /\B([@:]\w*)/,
				search: function (keyword, callback) {
					let items = [];
					if (keyword.startsWith('@')) {
						keyword = keyword.substr(1);
						items = this.mentions;
					} else if (keyword.startsWith(':')) {
						items = frappe.ui.emoji_keywords
							.filter(k => k.startsWith(keyword))
							.slice(0, 7);
					}
					callback($.grep(items, function (item) {
						return item.indexOf(keyword) == 0;
					}));
				},
				template: function (item) {
					if (item.startsWith(':')) {
						return frappe.ui.get_emoji(item) + ' ' + item;
					} else {
						return item;
					}
				},
				content: function (item) {
					if(item.startsWith(':')) {
						return frappe.ui.get_emoji(item);
					} else {
						return '@' + item;
					}
				}
			},
			callbacks: {
				onChange: () => {
					if(input.summernote('isEmpty')) {
						button
							.removeClass('btn-primary')
							.addClass('btn-default');
					} else {
						button
							.removeClass('btn-default')
							.addClass('btn-primary');
					}
				},
				onKeydown: (e) => {
					var key = frappe.ui.keys.get_key(e);
					if(key === 'ctrl+enter') {
						e.preventDefault();
						this.submit();
					}
					e.stopPropagation();
				},
			},
			icons: {
				'align': 'fa fa-align',
				'alignCenter': 'fa fa-align-center',
				'alignJustify': 'fa fa-align-justify',
				'alignLeft': 'fa fa-align-left',
				'alignRight': 'fa fa-align-right',
				'indent': 'fa fa-indent',
				'outdent': 'fa fa-outdent',
				'arrowsAlt': 'fa fa-arrows-alt',
				'bold': 'fa fa-bold',
				'caret': 'caret',
				'circle': 'fa fa-circle',
				'close': 'fa fa-close',
				'code': 'fa fa-code',
				'eraser': 'fa fa-eraser',
				'font': 'fa fa-font',
				'frame': 'fa fa-frame',
				'italic': 'fa fa-italic',
				'link': 'fa fa-link',
				'unlink': 'fa fa-chain-broken',
				'magic': 'fa fa-magic',
				'menuCheck': 'fa fa-check',
				'minus': 'fa fa-minus',
				'orderedlist': 'fa fa-list-ol',
				'pencil': 'fa fa-pencil',
				'picture': 'fa fa-image',
				'question': 'fa fa-question',
				'redo': 'fa fa-redo',
				'square': 'fa fa-square',
				'strikethrough': 'fa fa-strikethrough',
				'subscript': 'fa fa-subscript',
				'superscript': 'fa fa-superscript',
				'table': 'fa fa-table',
				'textHeight': 'fa fa-text-height',
				'trash': 'fa fa-trash',
				'underline': 'fa fa-underline',
				'undo': 'fa fa-undo',
				'unorderedlist': 'fa fa-list-ul',
				'video': 'fa fa-video-camera'
			}
		});

		this.note_editor = this.wrapper.find('.note-editor');
		this.note_editor.css({
			'border': '1px solid #ebeff2',
			'border-radius': '3px',
			'padding': '10px',
			'margin-bottom': '10px',
			'min-height': '80px',
			'cursor': 'text'
		});
		this.note_editor.on('click', () => input.summernote('focus'));
	}

	destroy() {
		this.input.summernote('destroy');
	}

	bind_events() {
		this.button.on('click', this.submit.bind(this));
	}

	val(value) {
		// Return html if no value specified
		if(value === undefined) {
			return this.input.summernote('code');
		}
		// Set html if value is specified
		this.input.summernote('code', value);
	}

	submit() {
		// Pass comment's value (html) to submit handler
		this.on_submit && this.on_submit(this.val());
	}
};

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/misc/rating_icons.html
 */
frappe.templates['rating_icons'] = '{% if show_label %}  {{ __("Rating: ") }} {% endif %} {% for(var i=1, l=6; i<l; i++) { %}  <i class="fa fa-fw {{ i<=rating? "fa-star": "fa-star-o" }} star-icon" data-idx=1></i> {% } %}';

/*
 *	/home/indictrans/pooja_workspace/artyfetes_v10/frappe-bench/apps/frappe/frappe/public/js/frappe/feedback.js
 */
frappe.provide("frappe.utils")

frappe.utils.Feedback = Class.extend({
	resend_feedback_request: function(doc) {
		/* resend the feedback request email */
		var args = {
			reference_name: doc.reference_name,
			reference_doctype: doc.reference_doctype,
			request: doc.feedback_request,
		}
		this.get_feedback_request_details(args, true)
	},

	manual_feedback_request: function(doc) {
		var me = this;

		var args = {
			reference_doctype: doc.doctype,
			reference_name: doc.name
		}
		if(frappe.boot.feedback_triggers[doc.doctype]) {
			var feedback_trigger = frappe.boot.feedback_triggers[doc.doctype]
			$.extend(args, { trigger: feedback_trigger })
			me.get_feedback_request_details(args, false)
		} else{
			me.make_feedback_request_dialog(args, false)
		}
	},

	get_feedback_request_details: function(args, is_resend) {
		var me = this;

		return frappe.call({
			method: "frappe.core.doctype.feedback_trigger.feedback_trigger.get_feedback_request_details",
			'args': args,
			callback: function(r) {
				if(r.message) {
					me.make_feedback_request_dialog(r.message, is_resend)
				}
			}
		});
	},

	make_feedback_request_dialog: function(args, is_resend) {
		var me = this;
		var dialog = new frappe.ui.Dialog({
			title: __("{0} Feedback Request", [ is_resend? "Resend": "Send" ]),
			fields: [
				{
					"reqd": 1,
					"label": __("Recipient"), 
					"fieldname": "recipients",
					"fieldtype": "Data",
					"options": "Email"
				},
				{
					"reqd": 1,
					"label": __("Subject"), 
					"fieldname": "subject",
					"fieldtype": "Data"
				},
				{
					"reqd": 1,
					"label": __("Message"), 
					"fieldname": "message",
					"fieldtype": "Text Editor"
				}
			],
		});

		$.each(args, function(field, value){
			dialog.set_value(field, value);
		})

		dialog.set_primary_action(__("Send"), function() {
			$.extend(args,{ details: dialog.get_values() });
			if(!args)
				return;

			dialog.hide();
			me.send_feedback_request(args)
		});

		dialog.show();
	},

	send_feedback_request: function(args) {
		$.extend(args, { is_manual: true })
		return frappe.call({
			method: "frappe.core.doctype.feedback_trigger.feedback_trigger.send_feedback_request",
			'args': args,
			freeze: true,
			callback: function(r) {
				if(r.message) {
					frappe.msgprint(__("Feedback Request for {0} is sent to {1}",
						[args.reference_name, args.details.recipients]));
				}
			}
		});
	}
})

